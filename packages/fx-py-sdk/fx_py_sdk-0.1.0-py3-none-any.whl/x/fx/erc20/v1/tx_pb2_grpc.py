# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from x.fx.erc20.v1 import tx_pb2 as fx_dot_erc20_dot_v1_dot_tx__pb2


class MsgStub(object):
    """Msg defines the erc20 Msg service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ConvertCoin = channel.unary_unary(
                '/fx.erc20.v1.Msg/ConvertCoin',
                request_serializer=fx_dot_erc20_dot_v1_dot_tx__pb2.MsgConvertCoin.SerializeToString,
                response_deserializer=fx_dot_erc20_dot_v1_dot_tx__pb2.MsgConvertCoinResponse.FromString,
                )
        self.ConvertERC20 = channel.unary_unary(
                '/fx.erc20.v1.Msg/ConvertERC20',
                request_serializer=fx_dot_erc20_dot_v1_dot_tx__pb2.MsgConvertERC20.SerializeToString,
                response_deserializer=fx_dot_erc20_dot_v1_dot_tx__pb2.MsgConvertERC20Response.FromString,
                )
        self.ConvertDenom = channel.unary_unary(
                '/fx.erc20.v1.Msg/ConvertDenom',
                request_serializer=fx_dot_erc20_dot_v1_dot_tx__pb2.MsgConvertDenom.SerializeToString,
                response_deserializer=fx_dot_erc20_dot_v1_dot_tx__pb2.MsgConvertDenomResponse.FromString,
                )


class MsgServicer(object):
    """Msg defines the erc20 Msg service.
    """

    def ConvertCoin(self, request, context):
        """ConvertCoin mints a ERC20 representation of the SDK Coin denom that is
        registered on the token mapping.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConvertERC20(self, request, context):
        """ConvertERC20 mints a Cosmos coin representation of the ERC20 token contract
        that is registered on the token mapping.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConvertDenom(self, request, context):
        """ConvertDenom convert denom to other denom
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MsgServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ConvertCoin': grpc.unary_unary_rpc_method_handler(
                    servicer.ConvertCoin,
                    request_deserializer=fx_dot_erc20_dot_v1_dot_tx__pb2.MsgConvertCoin.FromString,
                    response_serializer=fx_dot_erc20_dot_v1_dot_tx__pb2.MsgConvertCoinResponse.SerializeToString,
            ),
            'ConvertERC20': grpc.unary_unary_rpc_method_handler(
                    servicer.ConvertERC20,
                    request_deserializer=fx_dot_erc20_dot_v1_dot_tx__pb2.MsgConvertERC20.FromString,
                    response_serializer=fx_dot_erc20_dot_v1_dot_tx__pb2.MsgConvertERC20Response.SerializeToString,
            ),
            'ConvertDenom': grpc.unary_unary_rpc_method_handler(
                    servicer.ConvertDenom,
                    request_deserializer=fx_dot_erc20_dot_v1_dot_tx__pb2.MsgConvertDenom.FromString,
                    response_serializer=fx_dot_erc20_dot_v1_dot_tx__pb2.MsgConvertDenomResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fx.erc20.v1.Msg', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Msg(object):
    """Msg defines the erc20 Msg service.
    """

    @staticmethod
    def ConvertCoin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fx.erc20.v1.Msg/ConvertCoin',
            fx_dot_erc20_dot_v1_dot_tx__pb2.MsgConvertCoin.SerializeToString,
            fx_dot_erc20_dot_v1_dot_tx__pb2.MsgConvertCoinResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConvertERC20(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fx.erc20.v1.Msg/ConvertERC20',
            fx_dot_erc20_dot_v1_dot_tx__pb2.MsgConvertERC20.SerializeToString,
            fx_dot_erc20_dot_v1_dot_tx__pb2.MsgConvertERC20Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConvertDenom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fx.erc20.v1.Msg/ConvertDenom',
            fx_dot_erc20_dot_v1_dot_tx__pb2.MsgConvertDenom.SerializeToString,
            fx_dot_erc20_dot_v1_dot_tx__pb2.MsgConvertDenomResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
