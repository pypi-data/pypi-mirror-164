{"version":3,"file":"lib_index_js.6fd0e2b027c59eb85a53.js","mappings":";;;;;;;;;;;;;;;AAA2C;AACpC;AACP,kBAAkB,wCAAwC;AAC1D,0CAA0C,qDAAM;AAChD,+CAA+C,qDAAM;AACrD,+CAA+C,qDAAM;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC/C+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AClCwD;AACoE;AACI;AACjB;AACxE;AAC2D;AAClG;AACO;AACP,kBAAkB,4CAA4C;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA,iCAAiC,oDAAU,SAAS,4CAA4C;AAChG;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kEAAgB;AACxB,QAAQ,0IAAmC;AAC3C,QAAQ,sIAAqC;AAC7C,QAAQ,yHAAwB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oDAAU;AAC/C,+BAA+B,UAAU,IAAI,eAAe;AAC5D;AACA,0EAA0E,SAAI;AAC9E;AACA;AACA;AACA;AACA;AACA,sEAAsE,SAAI;AAC1E;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,gEAAgE,4CAA4C;AAC5G;AACA,sEAAsE,eAAe;AACrF,kGAAkG,eAAe;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,2GAAoC;AACnG;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,2DAA2D,SAAI;AAC/D;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://@educational-technology-collective/etc_jupyterlab_telemetry_coursera/./lib/etc_jupyterlab_telemetry_validate_button.js","webpack://@educational-technology-collective/etc_jupyterlab_telemetry_coursera/./lib/handler.js","webpack://@educational-technology-collective/etc_jupyterlab_telemetry_coursera/./lib/index.js"],"sourcesContent":["import { Signal } from '@lumino/signaling';\nexport class ETCJupyterLabTelemetryValidateButton {\n    constructor({ notebookPanel, validateButtonExtension }) {\n        this._validateButtonClicked = new Signal(this);\n        this._validationResultsDisplayed = new Signal(this);\n        this._validationResultsDismissed = new Signal(this);\n        this._notebookPanel = notebookPanel;\n        this._validateButtonExtension = validateButtonExtension;\n        this._validateButtonExtension.validateButtonClicked.connect(this.onValidateButtonClicked, this);\n        this._validateButtonExtension.validationResultsDisplayed.connect(this.onValidationResultsDisplayed, this);\n        this._validateButtonExtension.validationResultsDismissed.connect(this.onValidationResultsDismissed, this);\n    }\n    onValidateButtonClicked(sender, args) {\n        if (this._notebookPanel === args.notebook_panel) {\n            this._validateButtonClicked.emit({\n                event_name: args.name,\n                notebookPanel: this._notebookPanel\n            });\n        }\n    }\n    onValidationResultsDisplayed(sender, args) {\n        if (this._notebookPanel === args.notebook_panel) {\n            this._validationResultsDisplayed.emit({\n                event_name: args.name,\n                message: args.message,\n                notebookPanel: this._notebookPanel\n            });\n        }\n    }\n    onValidationResultsDismissed(sender, args) {\n        if (this._notebookPanel === args.notebook_panel) {\n            this._validationResultsDismissed.emit({\n                event_name: args.name,\n                message: args.message,\n                notebookPanel: this._notebookPanel\n            });\n        }\n    }\n    get validateButtonClicked() {\n        return this._validateButtonClicked;\n    }\n    get validationResultsDisplayed() {\n        return this._validationResultsDisplayed;\n    }\n    get validationResultsDismissed() {\n        return this._validationResultsDismissed;\n    }\n}\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'etc-jupyterlab-telemetry-coursera', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { INotebookTracker } from '@jupyterlab/notebook';\nimport { IETCJupyterLabTelemetryLibraryFactory } from '@educational-technology-collective/etc_jupyterlab_telemetry_library';\nimport { IETCJupyterLabNotebookStateProvider } from '@educational-technology-collective/etc_jupyterlab_notebook_state_provider';\nimport { IValidateButtonExtension } from '@educational-technology-collective/etc_jupyterlab_nbgrader_validate';\nimport { requestAPI } from './handler';\nimport { ETCJupyterLabTelemetryValidateButton } from './etc_jupyterlab_telemetry_validate_button';\nconst PLUGIN_ID = '@educational-technology-collective/etc_jupyterlab_telemetry_coursera:plugin';\nexport class AWSAPIGatewayAdapter {\n    constructor({ etcJupyterLabNotebookStateProvider, config }) {\n        this._etcJupyterLabNotebookStateProvider = etcJupyterLabNotebookStateProvider;\n        this._config = config;\n    }\n    async adaptMessage(sender, data) {\n        var _a, _b, _c, _d;\n        try {\n            let notebookState = this._etcJupyterLabNotebookStateProvider.getNotebookState({\n                notebookPanel: data.notebookPanel\n            });\n            var body = {\n                'event_name': data.eventName,\n                'cells': data.cells,\n                'notebook': notebookState === null || notebookState === void 0 ? void 0 : notebookState.notebook,\n                'seq': notebookState === null || notebookState === void 0 ? void 0 : notebookState.seq,\n                'session_id': notebookState === null || notebookState === void 0 ? void 0 : notebookState.session_id,\n                'user_id': ((_a = this._config) === null || _a === void 0 ? void 0 : _a.workspace_id) ? (_b = this._config) === null || _b === void 0 ? void 0 : _b.workspace_id : \"UNDEFINED\",\n                'notebook_path': data.notebookPanel.context.path,\n                'kernel_error': data.kernelError,\n                'selection': data.selection,\n                'environ': data.environ,\n            };\n            if ((_c = this._config['capture_notebook_events']) === null || _c === void 0 ? void 0 : _c.includes(data.eventName)) {\n                body['meta'] = (_d = data.notebookPanel.content.model) === null || _d === void 0 ? void 0 : _d.toJSON();\n            }\n            let request = Object.assign({}, body);\n            delete request['meta'];\n            console.log('Request', request);\n            let response = await requestAPI('s3', { method: 'POST', body: JSON.stringify(body) });\n            console.log('Response', {\n                'response': response,\n                'requestBody': request\n            });\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n}\n/**\n * Initialization data for the @educational-technology-collective/etc_jupyterlab_telemetry_coursera extension.\n */\nconst plugin = {\n    id: PLUGIN_ID,\n    autoStart: true,\n    requires: [\n        INotebookTracker,\n        IETCJupyterLabNotebookStateProvider,\n        IETCJupyterLabTelemetryLibraryFactory,\n        IValidateButtonExtension\n    ],\n    activate: (app, notebookTracker, etcJupyterLabNotebookStateProvider, etcJupyterLabTelemetryLibraryFactory, validateButtonExtension) => {\n        let messageAdapter;\n        let appConfig = (async () => {\n            try {\n                await app.started;\n                const config = await requestAPI('config');\n                console.log(`${PLUGIN_ID}, ${config.version}`);\n                if (!config.telemetry) {\n                    notebookTracker.widgetAdded.disconnect(onWidgetAdded, this);\n                }\n                return config;\n            }\n            catch (e) {\n                console.error(e);\n                notebookTracker.widgetAdded.disconnect(onWidgetAdded, this);\n                return false;\n            }\n        })();\n        async function onWidgetAdded(sender, notebookPanel) {\n            //  Handlers must be attached immediately in order to detect early events, hence we do not want to await the appearance of the Notebook.\n            let config = await appConfig;\n            if (config.telemetry) {\n                setInterval(() => {\n                    var _a;\n                    if ((_a = notebookPanel.content.model) === null || _a === void 0 ? void 0 : _a.dirty) {\n                        notebookPanel.context.save();\n                    }\n                }, config.save_interval * 1000);\n                if (!messageAdapter) {\n                    messageAdapter = new AWSAPIGatewayAdapter({ etcJupyterLabNotebookStateProvider, config });\n                }\n                etcJupyterLabNotebookStateProvider.addNotebookPanel({ notebookPanel });\n                let etcJupyterLabTelemetryLibrary = etcJupyterLabTelemetryLibraryFactory.create({ notebookPanel });\n                etcJupyterLabTelemetryLibrary.notebookClipboardEvent.notebookClipboardCopied.connect(messageAdapter.adaptMessage, messageAdapter);\n                etcJupyterLabTelemetryLibrary.notebookClipboardEvent.notebookClipboardCut.connect(messageAdapter.adaptMessage, messageAdapter);\n                etcJupyterLabTelemetryLibrary.notebookClipboardEvent.notebookClipboardPasted.connect(messageAdapter.adaptMessage, messageAdapter);\n                etcJupyterLabTelemetryLibrary.notebookVisibilityEvent.notebookVisible.connect(messageAdapter.adaptMessage, messageAdapter);\n                etcJupyterLabTelemetryLibrary.notebookVisibilityEvent.notebookHidden.connect(messageAdapter.adaptMessage, messageAdapter);\n                etcJupyterLabTelemetryLibrary.notebookOpenEvent.notebookOpened.connect(messageAdapter.adaptMessage, messageAdapter);\n                etcJupyterLabTelemetryLibrary.notebookCloseEvent.notebookClosed.connect(messageAdapter.adaptMessage, messageAdapter);\n                etcJupyterLabTelemetryLibrary.notebookSaveEvent.notebookSaved.connect(messageAdapter.adaptMessage, messageAdapter);\n                etcJupyterLabTelemetryLibrary.notebookScrollEvent.notebookScrolled.connect(messageAdapter.adaptMessage, messageAdapter);\n                etcJupyterLabTelemetryLibrary.activeCellChangeEvent.activeCellChanged.connect(messageAdapter.adaptMessage, messageAdapter);\n                etcJupyterLabTelemetryLibrary.cellAddEvent.cellAdded.connect(messageAdapter.adaptMessage, messageAdapter);\n                etcJupyterLabTelemetryLibrary.cellRemoveEvent.cellRemoved.connect(messageAdapter.adaptMessage, messageAdapter);\n                etcJupyterLabTelemetryLibrary.cellExecutionEvent.cellExecuted.connect(messageAdapter.adaptMessage, messageAdapter);\n                etcJupyterLabTelemetryLibrary.cellErrorEvent.cellErrored.connect(messageAdapter.adaptMessage, messageAdapter);\n                let etcJupyterLabTelemetryValidateButton = new ETCJupyterLabTelemetryValidateButton({\n                    notebookPanel,\n                    validateButtonExtension\n                });\n                etcJupyterLabTelemetryValidateButton.validateButtonClicked.connect(messageAdapter.adaptMessage, messageAdapter);\n                etcJupyterLabTelemetryValidateButton.validationResultsDisplayed.connect(messageAdapter.adaptMessage, messageAdapter);\n                etcJupyterLabTelemetryValidateButton.validationResultsDismissed.connect(messageAdapter.adaptMessage, messageAdapter);\n            }\n        }\n        notebookTracker.widgetAdded.connect(onWidgetAdded, this);\n    }\n};\nexport default plugin;\n"],"names":[],"sourceRoot":""}