# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['LoadbalancerRouteArgs', 'LoadbalancerRoute']

@pulumi.input_type
class LoadbalancerRouteArgs:
    def __init__(__self__, *,
                 backend_id: pulumi.Input[str],
                 frontend_id: pulumi.Input[str],
                 match_sni: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LoadbalancerRoute resource.
        :param pulumi.Input[str] backend_id: The backend ID destination of redirection
        :param pulumi.Input[str] frontend_id: The frontend ID origin of redirection
        :param pulumi.Input[str] match_sni: The domain to match against
        """
        pulumi.set(__self__, "backend_id", backend_id)
        pulumi.set(__self__, "frontend_id", frontend_id)
        if match_sni is not None:
            pulumi.set(__self__, "match_sni", match_sni)

    @property
    @pulumi.getter(name="backendId")
    def backend_id(self) -> pulumi.Input[str]:
        """
        The backend ID destination of redirection
        """
        return pulumi.get(self, "backend_id")

    @backend_id.setter
    def backend_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "backend_id", value)

    @property
    @pulumi.getter(name="frontendId")
    def frontend_id(self) -> pulumi.Input[str]:
        """
        The frontend ID origin of redirection
        """
        return pulumi.get(self, "frontend_id")

    @frontend_id.setter
    def frontend_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "frontend_id", value)

    @property
    @pulumi.getter(name="matchSni")
    def match_sni(self) -> Optional[pulumi.Input[str]]:
        """
        The domain to match against
        """
        return pulumi.get(self, "match_sni")

    @match_sni.setter
    def match_sni(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_sni", value)


@pulumi.input_type
class _LoadbalancerRouteState:
    def __init__(__self__, *,
                 backend_id: Optional[pulumi.Input[str]] = None,
                 frontend_id: Optional[pulumi.Input[str]] = None,
                 match_sni: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LoadbalancerRoute resources.
        :param pulumi.Input[str] backend_id: The backend ID destination of redirection
        :param pulumi.Input[str] frontend_id: The frontend ID origin of redirection
        :param pulumi.Input[str] match_sni: The domain to match against
        """
        if backend_id is not None:
            pulumi.set(__self__, "backend_id", backend_id)
        if frontend_id is not None:
            pulumi.set(__self__, "frontend_id", frontend_id)
        if match_sni is not None:
            pulumi.set(__self__, "match_sni", match_sni)

    @property
    @pulumi.getter(name="backendId")
    def backend_id(self) -> Optional[pulumi.Input[str]]:
        """
        The backend ID destination of redirection
        """
        return pulumi.get(self, "backend_id")

    @backend_id.setter
    def backend_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backend_id", value)

    @property
    @pulumi.getter(name="frontendId")
    def frontend_id(self) -> Optional[pulumi.Input[str]]:
        """
        The frontend ID origin of redirection
        """
        return pulumi.get(self, "frontend_id")

    @frontend_id.setter
    def frontend_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frontend_id", value)

    @property
    @pulumi.getter(name="matchSni")
    def match_sni(self) -> Optional[pulumi.Input[str]]:
        """
        The domain to match against
        """
        return pulumi.get(self, "match_sni")

    @match_sni.setter
    def match_sni(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_sni", value)


class LoadbalancerRoute(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backend_id: Optional[pulumi.Input[str]] = None,
                 frontend_id: Optional[pulumi.Input[str]] = None,
                 match_sni: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a LoadbalancerRoute resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] backend_id: The backend ID destination of redirection
        :param pulumi.Input[str] frontend_id: The frontend ID origin of redirection
        :param pulumi.Input[str] match_sni: The domain to match against
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LoadbalancerRouteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LoadbalancerRoute resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LoadbalancerRouteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LoadbalancerRouteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backend_id: Optional[pulumi.Input[str]] = None,
                 frontend_id: Optional[pulumi.Input[str]] = None,
                 match_sni: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LoadbalancerRouteArgs.__new__(LoadbalancerRouteArgs)

            if backend_id is None and not opts.urn:
                raise TypeError("Missing required property 'backend_id'")
            __props__.__dict__["backend_id"] = backend_id
            if frontend_id is None and not opts.urn:
                raise TypeError("Missing required property 'frontend_id'")
            __props__.__dict__["frontend_id"] = frontend_id
            __props__.__dict__["match_sni"] = match_sni
        super(LoadbalancerRoute, __self__).__init__(
            'scaleway:index/loadbalancerRoute:LoadbalancerRoute',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backend_id: Optional[pulumi.Input[str]] = None,
            frontend_id: Optional[pulumi.Input[str]] = None,
            match_sni: Optional[pulumi.Input[str]] = None) -> 'LoadbalancerRoute':
        """
        Get an existing LoadbalancerRoute resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] backend_id: The backend ID destination of redirection
        :param pulumi.Input[str] frontend_id: The frontend ID origin of redirection
        :param pulumi.Input[str] match_sni: The domain to match against
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LoadbalancerRouteState.__new__(_LoadbalancerRouteState)

        __props__.__dict__["backend_id"] = backend_id
        __props__.__dict__["frontend_id"] = frontend_id
        __props__.__dict__["match_sni"] = match_sni
        return LoadbalancerRoute(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="backendId")
    def backend_id(self) -> pulumi.Output[str]:
        """
        The backend ID destination of redirection
        """
        return pulumi.get(self, "backend_id")

    @property
    @pulumi.getter(name="frontendId")
    def frontend_id(self) -> pulumi.Output[str]:
        """
        The frontend ID origin of redirection
        """
        return pulumi.get(self, "frontend_id")

    @property
    @pulumi.getter(name="matchSni")
    def match_sni(self) -> pulumi.Output[Optional[str]]:
        """
        The domain to match against
        """
        return pulumi.get(self, "match_sni")

