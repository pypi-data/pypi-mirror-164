From 2c4cb5712724b5617019dc749b91b0acd0f9ad7c Mon Sep 17 00:00:00 2001
From: Dirk Farin <dirk.farin@gmail.com>
Date: Mon, 12 Jul 2021 20:42:18 +0200
Subject: [PATCH] check whether 'clap' input fraction exceeds supported range
 (replaced fix from #504)

---
 libheif/box.cc | 44 +++++++++++++++++++++++++++++++-------------
 1 file changed, 31 insertions(+), 13 deletions(-)

diff --git a/libheif/box.cc b/libheif/box.cc
index 0de1f589..9a828cc9 100644
--- a/libheif/box.cc
+++ b/libheif/box.cc
@@ -59,6 +59,14 @@ Fraction::Fraction(int32_t num, int32_t den)
   }
 }
 
+Fraction::Fraction(uint32_t num, uint32_t den)
+{
+  assert(num <= std::numeric_limits<int32_t>::max());
+  assert(den <= std::numeric_limits<int32_t>::max());
+
+  *this = Fraction(int32_t(num), int32_t(den));
+}
+
 Fraction Fraction::operator+(const Fraction& b) const
 {
   if (denominator == b.denominator) {
@@ -2298,18 +2306,28 @@ Error Box_clap::parse(BitstreamRange& range)
 {
   //parse_full_box_header(range);
 
-  int32_t clean_aperture_width_num = range.read32();
-  int32_t clean_aperture_width_den = range.read32();
-  int32_t clean_aperture_height_num = range.read32();
-  int32_t clean_aperture_height_den = range.read32();
-  int32_t horizontal_offset_num = range.read32();
-  int32_t horizontal_offset_den = range.read32();
-  int32_t vertical_offset_num = range.read32();
-  int32_t vertical_offset_den = range.read32();
-  if (clean_aperture_width_num < 0 || clean_aperture_width_den < 0 ||
-      clean_aperture_height_num < 0 || clean_aperture_height_den < 0) {
-    return Error(heif_error_Invalid_input, heif_suberror_Invalid_image_size);
+  uint32_t clean_aperture_width_num = range.read32();
+  uint32_t clean_aperture_width_den = range.read32();
+  uint32_t clean_aperture_height_num = range.read32();
+  uint32_t clean_aperture_height_den = range.read32();
+  uint32_t horizontal_offset_num = range.read32();
+  uint32_t horizontal_offset_den = range.read32();
+  uint32_t vertical_offset_num = range.read32();
+  uint32_t vertical_offset_den = range.read32();
+
+  if (clean_aperture_width_num > std::numeric_limits<int32_t>::max() ||
+      clean_aperture_width_den > std::numeric_limits<int32_t>::max() ||
+      clean_aperture_height_num > std::numeric_limits<int32_t>::max() ||
+      clean_aperture_height_den > std::numeric_limits<int32_t>::max() ||
+      horizontal_offset_num > std::numeric_limits<int32_t>::max() ||
+      horizontal_offset_den > std::numeric_limits<int32_t>::max() ||
+      vertical_offset_num > std::numeric_limits<int32_t>::max() ||
+      vertical_offset_den > std::numeric_limits<int32_t>::max()) {
+    return Error(heif_error_Invalid_input,
+                 heif_suberror_Invalid_fractional_number,
+                 "Exceeded supported value range.");
   }
+
   m_clean_aperture_width = Fraction(clean_aperture_width_num,
                                     clean_aperture_width_den);
   m_clean_aperture_height = Fraction(clean_aperture_height_num,
@@ -2420,8 +2438,8 @@ void Box_clap::set(uint32_t clap_width, uint32_t clap_height,
   assert(image_width >= clap_width);
   assert(image_height >= clap_height);
 
-  m_clean_aperture_width = Fraction(clap_width, 1);
-  m_clean_aperture_height = Fraction(clap_height, 1);
+  m_clean_aperture_width = Fraction(clap_width, 1U);
+  m_clean_aperture_height = Fraction(clap_height, 1U);
 
   m_horizontal_offset = Fraction(-(int32_t) (image_width - clap_width), 2);
   m_vertical_offset = Fraction(-(int32_t) (image_height - clap_height), 2);
