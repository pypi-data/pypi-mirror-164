[build-system]
requires = ["setuptools", "wheel"]
# uncomment to enable pep517 after versioneer problem is fixed.
# https://github.com/python-versioneer/python-versioneer/issues/193
# build-backend = "setuptools.build_meta"

[tool.black]
extend_excludes = '''(docs/.*|tests/.*.fixture|.*.ge_store_backend_id)'''

[tool.isort]
profile = "black"
skip_gitignore = true
extend_skip_glob = ['venv/*', 'docs/*']

[tool.mypy]
files = [
    "great_expectations",
    # "contrib" # ignore entire `contrib` package
    ]
warn_unused_configs = true
ignore_missing_imports = true
# TODO: change this to 'normal' once we have 'full' type coverage
follow_imports = 'silent'
warn_redundant_casts = true
show_error_codes = true
exclude = [
    # If pattern should always be excluded add comment explaining why
    '_version\.py',  # generated by `versioneer`
    'v012',  # legacy code
    # #################################################################################
    # TODO: complete typing for the following modules and remove from exclude list
    # number is the current number of typing errors for the excluded pattern
    'checkpoint', # 75
    'cli', # 157
    'core/usage_statistics', # 1
    'core/expectation_diagnostics', # 20
    'core/__init__\.py', # 1
    'core/id_dict\.py', # 1
    'core/async_executor\.py', # 2
    'core/batch\.py', # 29
    'core/batch_spec\.py', # 2
    'core/config_peer\.py', # 1
    'core/evaluation_parameters\.py', # 6
    'core/expectation_configuration\.py', # 21
    'core/expectation_validation_result\.py', # 9
    'core/run_identifier\.py', # 1
    'core/yaml_handler\.py', # 1
    'datasource', # 93
    'dataset',  # 19
    'data_context/data_context/abstract_data_context.py', # 84
    'data_context/data_context/base_data_context.py', # 76
    'data_context/data_context/cloud_data_context.py', # 17
    'execution_engine', # 100
    'marshmallow__shade', # 19
    '.*render', # 72
    'expectations/expectation', # 188
    'rule_based_profiler', # 446
    'validation_operators', # 47
    'validator', # 44
    'util\.py', # 19
]

[tool.pytest.ini_options]
filterwarnings = [
    # This warning is common during testing where we intentionally use a COMPLETE format even in cases that would
    # be potentially overly resource intensive in standard operation
    "ignore:Setting result format to COMPLETE for a SqlAlchemyDataset:UserWarning",
    # This deprecation warning was fixed in moto release 1.3.15, and the filter should be removed once we migrate
    # to that minimum version
    "ignore:Using or importing the ABCs:DeprecationWarning:moto.cloudformation.parsing",
    # This deprecation warning comes from getsentry/responses, a mocking utility for requests. It is a dependency in moto.
    "ignore:stream argument is deprecated. Use stream parameter in request directly:DeprecationWarning",
]
junit_family="xunit2"
markers = [
    "docs: mark a test as a docs test.",
    "unit: mark a test as a unit test.",
    "integration: mark test as an integration test.",
    "e2e: mark test as an E2E test.",
    "external_sqldialect: mark test as requiring install of an external sql dialect.",
    "cloud: mark test as being relevant to Great Expectations Cloud.",
    "base_data_context: mark test as being relevant to BaseDataContext, which will be removed during refactor",
    "v2_api: mark test as specific to the v2 api (e.g. pre Data Connectors)",
]
testpaths = "tests"
# use `pytest-mock` drop-in replacement for `unittest.mock`
# https://pytest-mock.readthedocs.io/en/latest/configuration.html#use-standalone-mock-package
mock_use_standalone_module = true
