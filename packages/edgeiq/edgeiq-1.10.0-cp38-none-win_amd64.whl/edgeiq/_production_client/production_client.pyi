import numpy as np
from .connection import ConnectionError as ConnectionError, IoTCoreConnection as IoTCoreConnection
from .credentials import CLIENT_ID as CLIENT_ID
from _typeshed import Incomplete
from edgeiq.app_config import AppConfig as AppConfig
from typing import Any, List, Type

SerializableResultT = Any

class ProdClientError(Exception): ...

PROJECT_TAG: Incomplete
TOPIC_PREFIX: str
TOPIC: Incomplete
DEVICE_TAG: Incomplete
IMAGE_TYPE: str

def create_analytics_message_packet(results: Type[SerializableResultT], type: str, base_service: str, tag: Any = ...): ...

class ImageCloudWriter:
    cloud_connection: Incomplete
    publish_topic: Incomplete
    subscribe_url_response_topic: Incomplete
    exit_event: Incomplete
    images: Incomplete
    def __init__(self) -> None: ...
    def publish_image(self, image: np.ndarray, tag: Any = ...): ...
    def publish_analytics(self, results: Type[SerializableResultT], type: str, base_service: str, tag: Any = ...): ...
    def publish(self, message: str, topic: str): ...
    def stop(self) -> None: ...

class AnalyticsCloudWriter:
    cloud_connection: Incomplete
    topic: Incomplete
    exit_event: Incomplete
    def __init__(self) -> None: ...
    def publish_image(self, image: np.ndarray, tag: Any = ...): ...
    def publish_analytics(self, results: Type[SerializableResultT], type: str, base_service: str, tag: Any = ...): ...
    def publish(self, message: str, topic: str): ...
    def stop(self) -> None: ...

class AnalyticsFileWriter:
    def __init__(self, file_size_bytes: int = ...) -> None: ...
    def publish_image(self, image: np.ndarray, tag: Any = ...): ...
    def publish_analytics(self, results: List[SerializableResultT], type: str, base_service: str, tag: Any = ...): ...
    def stop(self) -> None: ...

class ClientManager:
    def __init__(self) -> None: ...
    def add_client(self, client_class, *args) -> None: ...
    def publish_analytics(self, results: Type[SerializableResultT], type: str, base_service: str, tag: Any = ...): ...
    def publish_image(self, image: np.ndarray, tag: Any = ...): ...
    def stop(self) -> None: ...

PRODUCTION_CLIENT: Incomplete
