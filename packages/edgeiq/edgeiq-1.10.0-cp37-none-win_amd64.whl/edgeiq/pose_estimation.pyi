import numpy as np
from _typeshed import Incomplete
from edgeiq import edge_tools as edge_tools, processing as processing
from edgeiq._production_client import PRODUCTION_CLIENT as PRODUCTION_CLIENT
from edgeiq.base_service import BaseService as BaseService
from edgeiq.edge_tools import to_json_serializable as to_json_serializable
from typing import Any, List

KEYPOINTS: Incomplete

class Pose:
    def __init__(self, key_points, score) -> None: ...
    @property
    def key_points(self) -> dict: ...
    @property
    def score(self) -> float: ...

class HumanPoseResult:
    def __init__(self, poses: List[Pose], duration: float, input_dimension: tuple, image: np.ndarray, **kwargs) -> None: ...
    def __eq__(self, other): ...
    @property
    def duration(self) -> float: ...
    @property
    def poses(self) -> List[Pose]: ...
    @property
    def image(self) -> np.ndarray: ...
    def draw_poses_background(self, color: tuple) -> np.ndarray: ...
    def draw_poses(self, image: np.ndarray = ...) -> np.ndarray: ...
    def draw_aliens(self) -> np.ndarray: ...

RESULT_TYPE: Incomplete

class PoseEstimation(BaseService):
    def __init__(self, model_id: str) -> None: ...
    def estimate(self, image: np.ndarray) -> HumanPoseResult: ...
    def publish_analytics(self, results: HumanPoseResult, tag: Any = ...): ...
