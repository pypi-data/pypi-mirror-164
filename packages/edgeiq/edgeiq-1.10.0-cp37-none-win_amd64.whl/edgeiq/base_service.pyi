from _typeshed import Incomplete
from edgeiq import edge_tools as edge_tools, model_config as model_config, processing as processing, runtime as runtime
from edgeiq._constants import HAILO_SUPPORTED_OS as HAILO_SUPPORTED_OS, MYRIAD_SUPPORTED_OS as MYRIAD_SUPPORTED_OS, SupportedDevices as SupportedDevices
from edgeiq.engine_accelerator import Accelerator as Accelerator, Engine as Engine
from typing import List, Optional, Tuple

def get_opencv_engine(engine): ...
def get_opencv_accelerator(accelerator): ...

SUPPORTED_ACCELERATOR: Incomplete
SUPPORTED_OPENCV_ENGINE: Incomplete
HAILO_SUPPORTED_ARCHITECTURES: Incomplete

def validate_engine_accelerator_pair(engine: Engine, accelerator: Accelerator, model_config: model_config.ModelConfig) -> Accelerator: ...

class BaseService:
    def __init__(self, model_id: str) -> None: ...
    def load(self, engine: Engine = ..., accelerator: Accelerator = ...): ...
    @property
    def labels(self) -> List[str]: ...
    @property
    def colors(self) -> List[Tuple[int, int, int]]: ...
    @colors.setter
    def colors(self, colors: List[Tuple[int, int, int]]): ...
    @property
    def model_id(self) -> str: ...
    @property
    def model_purpose(self) -> str: ...
    @property
    def model_config(self) -> model_config.ModelConfig: ...
    @property
    def engine(self) -> Optional[Engine]: ...
    @property
    def accelerator(self) -> Optional[Accelerator]: ...
