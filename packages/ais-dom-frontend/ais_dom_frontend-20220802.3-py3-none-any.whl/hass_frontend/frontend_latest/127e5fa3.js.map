{"version":3,"file":"127e5fa3.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AA+GA;ACiNA;;AAEA;;;AAGA;AACA;;;;AAIA;;;AAGA;;;AAGA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAKA;;AAIA;AACA;;AAEA;AACA;AACA;;;;;;AAMA;;;;;;AAMA;;;;AAIA;;;AAGA;;;;;;AAMA;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/iron-icon/iron-icon.js","webpack://home-assistant-frontend/./node_modules/@thomasloven/round-slider/round-slider.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\n\nimport {IronMeta} from '@polymer/iron-meta/iron-meta.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {Base} from '@polymer/polymer/polymer-legacy.js';\n\n/**\n\nThe `iron-icon` element displays an icon. By default an icon renders as a 24px\nsquare.\n\nExample using src:\n\n    <iron-icon src=\"star.png\"></iron-icon>\n\nExample setting size to 32px x 32px:\n\n    <iron-icon class=\"big\" src=\"big_star.png\"></iron-icon>\n\n    <style is=\"custom-style\">\n      .big {\n        --iron-icon-height: 32px;\n        --iron-icon-width: 32px;\n      }\n    </style>\n\nThe iron elements include several sets of icons. To use the default set of\nicons, import `iron-icons.js` and use the `icon` attribute to specify an icon:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/iron-icons.js\";\n    </script>\n\n    <iron-icon icon=\"menu\"></iron-icon>\n\nTo use a different built-in set of icons, import the specific\n`iron-icons/<iconset>-icons.js`, and specify the icon as `<iconset>:<icon>`.\nFor example, to use a communication icon, you would use:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/communication-icons.js\";\n    </script>\n\n    <iron-icon icon=\"communication:email\"></iron-icon>\n\nYou can also create custom icon sets of bitmap or SVG icons.\n\nExample of using an icon named `cherry` from a custom iconset with the ID\n`fruit`:\n\n    <iron-icon icon=\"fruit:cherry\"></iron-icon>\n\nSee `<iron-iconset>` and `<iron-iconset-svg>` for more information about how to\ncreate a custom iconset.\n\nSee the `iron-icons` demo to see the icons available in the various iconsets.\n\n### Styling\n\nThe following custom properties are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-icon` | Mixin applied to the icon | {}\n`--iron-icon-width` | Width of the icon | `24px`\n`--iron-icon-height` | Height of the icon | `24px`\n`--iron-icon-fill-color` | Fill color of the svg icon | `currentcolor`\n`--iron-icon-stroke-color` | Stroke color of the svg icon | none\n\n@group Iron Elements\n@element iron-icon\n@demo demo/index.html\n@hero hero.svg\n@homepage polymer.github.io\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        @apply --layout-inline;\n        @apply --layout-center-center;\n        position: relative;\n\n        vertical-align: middle;\n\n        fill: var(--iron-icon-fill-color, currentcolor);\n        stroke: var(--iron-icon-stroke-color, none);\n\n        width: var(--iron-icon-width, 24px);\n        height: var(--iron-icon-height, 24px);\n        @apply --iron-icon;\n      }\n\n      :host([hidden]) {\n        display: none;\n      }\n    </style>\n`,\n\n  is: 'iron-icon',\n\n  properties: {\n\n    /**\n     * The name of the icon to use. The name should be of the form:\n     * `iconset_name:icon_name`.\n     */\n    icon: {type: String},\n\n    /**\n     * The name of the theme to used, if one is specified by the\n     * iconset.\n     */\n    theme: {type: String},\n\n    /**\n     * If using iron-icon without an iconset, you can set the src to be\n     * the URL of an individual icon image file. Note that this will take\n     * precedence over a given icon attribute.\n     */\n    src: {type: String},\n\n    /**\n     * @type {!IronMeta}\n     */\n    _meta: {value: Base.create('iron-meta', {type: 'iconset'})}\n\n  },\n\n  observers: [\n    '_updateIcon(_meta, isAttached)',\n    '_updateIcon(theme, isAttached)',\n    '_srcChanged(src, isAttached)',\n    '_iconChanged(icon, isAttached)'\n  ],\n\n  _DEFAULT_ICONSET: 'icons',\n\n  _iconChanged: function(icon) {\n    var parts = (icon || '').split(':');\n    this._iconName = parts.pop();\n    this._iconsetName = parts.pop() || this._DEFAULT_ICONSET;\n    this._updateIcon();\n  },\n\n  _srcChanged: function(src) {\n    this._updateIcon();\n  },\n\n  _usesIconset: function() {\n    return this.icon || !this.src;\n  },\n\n  /** @suppress {visibility} */\n  _updateIcon: function() {\n    if (this._usesIconset()) {\n      if (this._img && this._img.parentNode) {\n        dom(this.root).removeChild(this._img);\n      }\n      if (this._iconName === '') {\n        if (this._iconset) {\n          this._iconset.removeIcon(this);\n        }\n      } else if (this._iconsetName && this._meta) {\n        this._iconset = /** @type {?Polymer.Iconset} */ (\n            this._meta.byKey(this._iconsetName));\n        if (this._iconset) {\n          this._iconset.applyIcon(this, this._iconName, this.theme);\n          this.unlisten(window, 'iron-iconset-added', '_updateIcon');\n        } else {\n          this.listen(window, 'iron-iconset-added', '_updateIcon');\n        }\n      }\n    } else {\n      if (this._iconset) {\n        this._iconset.removeIcon(this);\n      }\n      if (!this._img) {\n        this._img = document.createElement('img');\n        this._img.style.width = '100%';\n        this._img.style.height = '100%';\n        this._img.draggable = false;\n      }\n      this._img.src = this.src;\n      dom(this.root).appendChild(this._img);\n    }\n  }\n});\n","import { __decorate } from \"tslib\";\nimport { LitElement, html, css, svg, } from \"lit\";\nimport { property, state } from \"lit/decorators.js\";\nexport class RoundSlider extends LitElement {\n    constructor() {\n        super();\n        this.min = 0;\n        this.max = 100;\n        this.step = 1;\n        this.startAngle = 135;\n        this.arcLength = 270;\n        this.handleSize = 6;\n        this.handleZoom = 1.5;\n        this.readonly = false;\n        this.disabled = false;\n        this.dragging = false;\n        this.rtl = false;\n        this._scale = 1;\n        this.dragEnd = this.dragEnd.bind(this);\n        this.drag = this.drag.bind(this);\n        this._keyStep = this._keyStep.bind(this);\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        document.addEventListener(\"mouseup\", this.dragEnd);\n        document.addEventListener(\"touchend\", this.dragEnd, {\n            passive: false,\n        });\n        document.addEventListener(\"mousemove\", this.drag);\n        document.addEventListener(\"touchmove\", this.drag, {\n            passive: false,\n        });\n        document.addEventListener(\"keydown\", this._keyStep);\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        document.removeEventListener(\"mouseup\", this.dragEnd);\n        document.removeEventListener(\"touchend\", this.dragEnd);\n        document.removeEventListener(\"mousemove\", this.drag);\n        document.removeEventListener(\"touchmove\", this.drag);\n        document.removeEventListener(\"keydown\", this._keyStep);\n    }\n    get _start() {\n        return (this.startAngle * Math.PI) / 180;\n    }\n    get _len() {\n        // Things get weird if length is more than a complete turn\n        return Math.min((this.arcLength * Math.PI) / 180, 2 * Math.PI - 0.01);\n    }\n    get _end() {\n        return this._start + this._len;\n    }\n    get _showHandle() {\n        // If handle is shown\n        if (this.readonly)\n            return false;\n        if (this.value == null && (this.high == null || this.low == null))\n            return false;\n        return true;\n    }\n    _angleInside(angle) {\n        // Check if an angle is on the arc\n        let a = ((this.startAngle + this.arcLength / 2 - angle + 180 + 360) % 360) - 180;\n        return a < this.arcLength / 2 && a > -this.arcLength / 2;\n    }\n    _angle2xy(angle) {\n        if (this.rtl)\n            return { x: -Math.cos(angle), y: Math.sin(angle) };\n        return { x: Math.cos(angle), y: Math.sin(angle) };\n    }\n    _xy2angle(x, y) {\n        if (this.rtl)\n            x = -x;\n        return (Math.atan2(y, x) - this._start + 2 * Math.PI) % (2 * Math.PI);\n    }\n    _value2angle(value) {\n        value = Math.min(this.max, Math.max(this.min, value));\n        const fraction = (value - this.min) / (this.max - this.min);\n        return this._start + fraction * this._len;\n    }\n    _angle2value(angle) {\n        return (Math.round(((angle / this._len) * (this.max - this.min) + this.min) / this.step) * this.step);\n    }\n    get _boundaries() {\n        // Get the maximum extents of the bar arc\n        const start = this._angle2xy(this._start);\n        const end = this._angle2xy(this._end);\n        let up = 1;\n        if (!this._angleInside(270))\n            up = Math.max(-start.y, -end.y);\n        let down = 1;\n        if (!this._angleInside(90))\n            down = Math.max(start.y, end.y);\n        let left = 1;\n        if (!this._angleInside(180))\n            left = Math.max(-start.x, -end.x);\n        let right = 1;\n        if (!this._angleInside(0))\n            right = Math.max(start.x, end.x);\n        return {\n            up,\n            down,\n            left,\n            right,\n            height: up + down,\n            width: left + right,\n        };\n    }\n    _mouse2value(ev) {\n        const mouseX = ev.type.startsWith(\"touch\")\n            ? ev.touches[0].clientX\n            : ev.clientX;\n        const mouseY = ev.type.startsWith(\"touch\")\n            ? ev.touches[0].clientY\n            : ev.clientY;\n        const rect = this.shadowRoot.querySelector(\"svg\").getBoundingClientRect();\n        const boundaries = this._boundaries;\n        const x = mouseX - (rect.left + (boundaries.left * rect.width) / boundaries.width);\n        const y = mouseY - (rect.top + (boundaries.up * rect.height) / boundaries.height);\n        const angle = this._xy2angle(x, y);\n        const pos = this._angle2value(angle);\n        return pos;\n    }\n    dragStart(ev) {\n        if (!this._showHandle || this.disabled)\n            return;\n        let handle = ev.target;\n        let cooldown = undefined;\n        // Avoid double events mouseDown->focus\n        if (this._rotation && this._rotation.type !== \"focus\")\n            return;\n        // If the bar was touched, find the nearest handle and drag from that\n        if (handle.classList.contains(\"shadowpath\")) {\n            if (ev.type === \"touchstart\")\n                cooldown = window.setTimeout(() => {\n                    if (this._rotation)\n                        this._rotation.cooldown = undefined;\n                }, 200);\n            if (this.low == null) {\n                handle = this.shadowRoot.querySelector(\"#value\");\n            }\n            else {\n                const mouse = this._mouse2value(ev);\n                if (Math.abs(mouse - this.low) < Math.abs(mouse - this.high)) {\n                    handle = this.shadowRoot.querySelector(\"#low\");\n                }\n                else {\n                    handle = this.shadowRoot.querySelector(\"#high\");\n                }\n            }\n        }\n        // If an invisible handle was clicked, switch to the visible counterpart\n        if (handle.classList.contains(\"overflow\"))\n            handle = handle.nextElementSibling;\n        if (!handle.classList.contains(\"handle\"))\n            return;\n        handle.setAttribute(\"stroke-width\", String(2 * this.handleSize * this.handleZoom * this._scale));\n        const min = handle.id === \"high\" ? this.low : this.min;\n        const max = handle.id === \"low\" ? this.high : this.max;\n        this._rotation = {\n            handle,\n            min,\n            max,\n            start: this[handle.id],\n            type: ev.type,\n            cooldown,\n        };\n        this.dragging = true;\n    }\n    _cleanupRotation() {\n        const handle = this._rotation.handle;\n        handle.setAttribute(\"stroke-width\", String(2 * this.handleSize * this._scale));\n        this._rotation = undefined;\n        this.dragging = false;\n        handle.blur();\n    }\n    dragEnd(_ev) {\n        if (!this._showHandle || this.disabled)\n            return;\n        if (!this._rotation)\n            return;\n        const handle = this._rotation.handle;\n        this._cleanupRotation();\n        let event = new CustomEvent(\"value-changed\", {\n            detail: {\n                [handle.id]: this[handle.id],\n            },\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(event);\n        // This makes the low handle render over the high handle if they both are\n        // close to the top end.  Otherwise if would be unclickable, and the high\n        // handle locked by the low.  Calcualtion is done in the dragEnd handler to\n        // avoid \"z fighting\" while dragging.\n        if (this.low && this.low >= 0.99 * this.max)\n            this._reverseOrder = true;\n        else\n            this._reverseOrder = false;\n    }\n    drag(ev) {\n        if (!this._showHandle || this.disabled)\n            return;\n        if (!this._rotation)\n            return;\n        if (this._rotation.cooldown) {\n            window.clearTimeout(this._rotation.cooldown);\n            this._cleanupRotation();\n            return;\n        }\n        if (this._rotation.type === \"focus\")\n            return;\n        ev.preventDefault();\n        const pos = this._mouse2value(ev);\n        this._dragpos(pos);\n    }\n    _dragpos(pos) {\n        if (pos < this._rotation.min || pos > this._rotation.max)\n            return;\n        const handle = this._rotation.handle;\n        this[handle.id] = pos;\n        let event = new CustomEvent(\"value-changing\", {\n            detail: {\n                [handle.id]: pos,\n            },\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(event);\n    }\n    _keyStep(ev) {\n        if (!this._showHandle || this.disabled)\n            return;\n        if (!this._rotation)\n            return;\n        const handle = this._rotation.handle;\n        if (ev.key === \"ArrowLeft\" || ev.key === \"ArrowDown\") {\n            ev.preventDefault();\n            if (this.rtl)\n                this._dragpos(this[handle.id] + this.step);\n            else\n                this._dragpos(this[handle.id] - this.step);\n        }\n        if (ev.key === \"ArrowRight\" || ev.key === \"ArrowUp\") {\n            ev.preventDefault();\n            if (this.rtl)\n                this._dragpos(this[handle.id] - this.step);\n            else\n                this._dragpos(this[handle.id] + this.step);\n        }\n        if (ev.key === \"Home\") {\n            ev.preventDefault();\n            this._dragpos(this.min);\n        }\n        if (ev.key === \"End\") {\n            ev.preventDefault();\n            this._dragpos(this.max);\n        }\n    }\n    updated(changedProperties) {\n        // Adjust margin in the bar slider stroke width is greater than the handle size\n        if (this.shadowRoot.querySelector(\".slider\")) {\n            const styles = window.getComputedStyle(this.shadowRoot.querySelector(\".slider\"));\n            if (styles && styles[\"strokeWidth\"]) {\n                const stroke = parseFloat(styles[\"strokeWidth\"]);\n                if (stroke > this.handleSize * this.handleZoom) {\n                    const view = this._boundaries;\n                    const margin = `\n          ${(stroke / 2) * Math.abs(view.up)}px\n          ${(stroke / 2) * Math.abs(view.right)}px\n          ${(stroke / 2) * Math.abs(view.down)}px\n          ${(stroke / 2) * Math.abs(view.left)}px`;\n                    this.shadowRoot.querySelector(\"svg\").style.margin = margin;\n                }\n            }\n        }\n        // Workaround for vector-effect not working in IE and pre-Chromium Edge\n        // That's also why the _scale property exists\n        if (this.shadowRoot.querySelector(\"svg\") &&\n            // @ts-expect-error\n            this.shadowRoot.querySelector(\"svg\").style.vectorEffect === undefined) {\n            if (changedProperties.has(\"_scale\") && this._scale != 1) {\n                this.shadowRoot\n                    .querySelector(\"svg\")\n                    .querySelectorAll(\"path\")\n                    .forEach((e) => {\n                    if (e.getAttribute(\"stroke-width\"))\n                        return;\n                    const orig = parseFloat(getComputedStyle(e).getPropertyValue(\"stroke-width\"));\n                    e.style.strokeWidth = `${orig * this._scale}px`;\n                });\n            }\n            const rect = this.shadowRoot.querySelector(\"svg\").getBoundingClientRect();\n            const scale = Math.max(rect.width, rect.height);\n            this._scale = 2 / scale;\n        }\n    }\n    _renderArc(start, end) {\n        const diff = end - start;\n        const startXY = this._angle2xy(start);\n        const endXY = this._angle2xy(end + 0.001); // Safari doesn't like arcs with no length\n        return `\n      M ${startXY.x} ${startXY.y}\n      A 1 1,\n        0,\n        ${diff > Math.PI ? \"1\" : \"0\"} ${this.rtl ? \"0\" : \"1\"},\n        ${endXY.x} ${endXY.y}\n    `;\n    }\n    _renderHandle(id) {\n        const theta = this._value2angle(this[id]);\n        const pos = this._angle2xy(theta);\n        const label = {\n            value: this.valueLabel,\n            low: this.lowLabel,\n            high: this.highLabel,\n        }[id] || \"\";\n        // Two handles are drawn. One visible, and one invisible that's twice as\n        // big. Makes it easier to click.\n        return svg `\n      <g class=\"${id} handle\">\n        <path\n          id=${id}\n          class=\"overflow\"\n          d=\"\n          M ${pos.x} ${pos.y}\n          L ${pos.x + 0.001} ${pos.y + 0.001}\n          \"\n          vector-effect=\"non-scaling-stroke\"\n          stroke=\"rgba(0,0,0,0)\"\n          stroke-width=\"${4 * this.handleSize * this._scale}\"\n          />\n        <path\n          id=${id}\n          class=\"handle\"\n          d=\"\n          M ${pos.x} ${pos.y}\n          L ${pos.x + 0.001} ${pos.y + 0.001}\n          \"\n          vector-effect=\"non-scaling-stroke\"\n          stroke-width=\"${2 * this.handleSize * this._scale}\"\n          tabindex=\"0\"\n          @focus=${this.dragStart}\n          @blur=${this.dragEnd}\n          role=\"slider\"\n          aria-valuemin=${this.min}\n          aria-valuemax=${this.max}\n          aria-valuenow=${this[id]}\n          aria-disabled=${this.disabled}\n          aria-label=${label || \"\"}\n          />\n        </g>\n      `;\n    }\n    render() {\n        const view = this._boundaries;\n        return html `\n      <svg\n        @mousedown=${this.dragStart}\n        @touchstart=${this.dragStart}\n        xmln=\"http://www.w3.org/2000/svg\"\n        viewBox=\"${-view.left} ${-view.up} ${view.width} ${view.height}\"\n        style=\"margin: ${this.handleSize * this.handleZoom}px;\"\n        ?disabled=${this.disabled}\n        focusable=\"false\"\n      >\n        <g class=\"slider\">\n          <path\n            class=\"path\"\n            d=${this._renderArc(this._start, this._end)}\n            vector-effect=\"non-scaling-stroke\"\n          />\n          <path\n            class=\"bar\"\n            vector-effect=\"non-scaling-stroke\"\n            d=${this._renderArc(this._value2angle(this.low != null ? this.low : this.min), this._value2angle(this.high != null ? this.high : this.value))}\n          />\n          <path\n            class=\"shadowpath\"\n            d=${this._renderArc(this._start, this._end)}\n            vector-effect=\"non-scaling-stroke\"\n            stroke=\"rgba(0,0,0,0)\"\n            stroke-width=\"${3 * this.handleSize * this._scale}\"\n            stroke-linecap=\"butt\"\n          />\n        </g>\n\n        <g class=\"handles\">\n          ${this._showHandle\n            ? this.low != null\n                ? this._reverseOrder\n                    ? svg `${this._renderHandle(\"high\")} ${this._renderHandle(\"low\")}`\n                    : svg `${this._renderHandle(\"low\")} ${this._renderHandle(\"high\")}`\n                : svg `${this._renderHandle(\"value\")}`\n            : ``}\n        </g>\n      </svg>\n    `;\n    }\n    static get styles() {\n        return css `\n      :host {\n        display: inline-block;\n        width: 100%;\n      }\n      svg {\n        overflow: visible;\n        display: block;\n      }\n      path {\n        transition: stroke 1s ease-out, stroke-width 200ms ease-out;\n      }\n      .slider {\n        fill: none;\n        stroke-width: var(--round-slider-path-width, 3);\n        stroke-linecap: var(--round-slider-linecap, round);\n      }\n      .path {\n        stroke: var(--round-slider-path-color, lightgray);\n      }\n      .bar {\n        stroke: var(--round-slider-bar-color, deepskyblue);\n      }\n      svg[disabled] .bar {\n        stroke: var(--round-slider-disabled-bar-color, darkgray);\n      }\n      g.handles {\n        stroke: var(\n          --round-slider-handle-color,\n          var(--round-slider-bar-color, deepskyblue)\n        );\n        stroke-linecap: round;\n        cursor: var(--round-slider-handle-cursor, pointer);\n      }\n      g.low.handle {\n        stroke: var(--round-slider-low-handle-color);\n      }\n      g.high.handle {\n        stroke: var(--round-slider-high-handle-color);\n      }\n      svg[disabled] g.handles {\n        stroke: var(--round-slider-disabled-bar-color, darkgray);\n      }\n      .handle:focus {\n        outline: unset;\n      }\n    `;\n    }\n}\n__decorate([\n    property({ type: Number })\n], RoundSlider.prototype, \"value\", void 0);\n__decorate([\n    property({ type: Number })\n], RoundSlider.prototype, \"high\", void 0);\n__decorate([\n    property({ type: Number })\n], RoundSlider.prototype, \"low\", void 0);\n__decorate([\n    property({ type: Number })\n], RoundSlider.prototype, \"min\", void 0);\n__decorate([\n    property({ type: Number })\n], RoundSlider.prototype, \"max\", void 0);\n__decorate([\n    property({ type: Number })\n], RoundSlider.prototype, \"step\", void 0);\n__decorate([\n    property({ type: Number })\n], RoundSlider.prototype, \"startAngle\", void 0);\n__decorate([\n    property({ type: Number })\n], RoundSlider.prototype, \"arcLength\", void 0);\n__decorate([\n    property({ type: Number })\n], RoundSlider.prototype, \"handleSize\", void 0);\n__decorate([\n    property({ type: Number })\n], RoundSlider.prototype, \"handleZoom\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RoundSlider.prototype, \"readonly\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RoundSlider.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], RoundSlider.prototype, \"dragging\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RoundSlider.prototype, \"rtl\", void 0);\n__decorate([\n    property()\n], RoundSlider.prototype, \"valueLabel\", void 0);\n__decorate([\n    property()\n], RoundSlider.prototype, \"lowLabel\", void 0);\n__decorate([\n    property()\n], RoundSlider.prototype, \"highLabel\", void 0);\n__decorate([\n    state()\n], RoundSlider.prototype, \"_scale\", void 0);\ncustomElements.define(\"round-slider\", RoundSlider);\n"],"names":[],"sourceRoot":""}