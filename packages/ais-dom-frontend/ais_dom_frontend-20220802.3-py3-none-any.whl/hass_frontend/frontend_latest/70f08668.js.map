{"version":3,"file":"70f08668.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;;;;;AAKA;AAEA;;;AAGA;AACA;;AAGA;;AAEA;AACA;;;AA3HA;AAqIA;AArIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/components/ha-combo-box.ts"],"sourcesContent":["import \"@material/mwc-list/mwc-list-item\";\nimport { mdiClose, mdiMenuDown, mdiMenuUp } from \"@mdi/js\";\nimport \"@vaadin/combo-box/theme/material/vaadin-combo-box-light\";\nimport type {\n  ComboBoxLight,\n  ComboBoxLightFilterChangedEvent,\n  ComboBoxLightOpenedChangedEvent,\n  ComboBoxLightValueChangedEvent,\n} from \"@vaadin/combo-box/vaadin-combo-box-light\";\nimport { registerStyles } from \"@vaadin/vaadin-themable-mixin/register-styles\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { ComboBoxLitRenderer, comboBoxRenderer } from \"lit-vaadin-helpers\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\nimport \"./ha-textfield\";\n\nregisterStyles(\n  \"vaadin-combo-box-item\",\n  css`\n    :host {\n      padding: 0;\n    }\n    :host([focused]:not([disabled])) {\n      background-color: rgba(var(--rgb-primary-text-color, 0, 0, 0), 0.12);\n    }\n    :host([selected]:not([disabled])) {\n      background-color: transparent;\n      color: var(--mdc-theme-primary);\n      --mdc-ripple-color: var(--mdc-theme-primary);\n      --mdc-theme-text-primary-on-background: var(--mdc-theme-primary);\n    }\n    :host([selected]:not([disabled])):before {\n      background-color: var(--mdc-theme-primary);\n      opacity: 0.12;\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n    }\n    :host([selected][focused]:not([disabled])):before {\n      opacity: 0.24;\n    }\n    :host(:hover:not([disabled])) {\n      background-color: transparent;\n    }\n    [part=\"content\"] {\n      width: 100%;\n    }\n    [part=\"checkmark\"] {\n      display: none;\n    }\n  `\n);\n\n@customElement(\"ha-combo-box\")\nexport class HaComboBox extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public placeholder?: string;\n\n  @property() public validationMessage?: string;\n\n  @property() public helper?: string;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ type: Boolean }) public icon?: boolean;\n\n  @property() public items?: any[];\n\n  @property() public filteredItems?: any[];\n\n  @property({ attribute: \"allow-custom-value\", type: Boolean })\n  public allowCustomValue?: boolean;\n\n  @property({ attribute: \"item-value-path\" }) public itemValuePath?: string;\n\n  @property({ attribute: \"item-label-path\" }) public itemLabelPath?: string;\n\n  @property({ attribute: \"item-id-path\" }) public itemIdPath?: string;\n\n  @property() public renderer?: ComboBoxLitRenderer<any>;\n\n  @property({ type: Boolean }) public disabled?: boolean;\n\n  @property({ type: Boolean }) public required?: boolean;\n\n  @property({ type: Boolean, reflect: true, attribute: \"opened\" })\n  private _opened?: boolean;\n\n  @query(\"vaadin-combo-box-light\", true) private _comboBox!: ComboBoxLight;\n\n  private _overlayMutationObserver?: MutationObserver;\n\n  public open() {\n    this.updateComplete.then(() => {\n      this._comboBox?.open();\n    });\n  }\n\n  public focus() {\n    this.updateComplete.then(() => {\n      this._comboBox?.inputElement?.focus();\n    });\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this._overlayMutationObserver) {\n      this._overlayMutationObserver.disconnect();\n      this._overlayMutationObserver = undefined;\n    }\n  }\n\n  public get selectedItem() {\n    return this._comboBox.selectedItem;\n  }\n\n  public setInputValue(value: string) {\n    this._comboBox.value = value;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <vaadin-combo-box-light\n        .itemValuePath=${this.itemValuePath}\n        .itemIdPath=${this.itemIdPath}\n        .itemLabelPath=${this.itemLabelPath}\n        .items=${this.items}\n        .value=${this.value || \"\"}\n        .filteredItems=${this.filteredItems}\n        .allowCustomValue=${this.allowCustomValue}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        ${comboBoxRenderer(this.renderer || this._defaultRowRenderer)}\n        @opened-changed=${this._openedChanged}\n        @filter-changed=${this._filterChanged}\n        @value-changed=${this._valueChanged}\n        attr-for-value=\"value\"\n      >\n        <ha-textfield\n          .label=${this.label}\n          .placeholder=${this.placeholder}\n          .disabled=${this.disabled}\n          .required=${this.required}\n          .validationMessage=${this.validationMessage}\n          .errorMessage=${this.errorMessage}\n          class=\"input\"\n          autocapitalize=\"none\"\n          autocomplete=\"off\"\n          autocorrect=\"off\"\n          spellcheck=\"false\"\n          .suffix=${html`<div style=\"width: 28px;\"></div>`}\n          .icon=${this.icon}\n          .invalid=${this.invalid}\n          .helper=${this.helper}\n          helperPersistent\n        >\n          <slot name=\"icon\" slot=\"leadingIcon\"></slot>\n        </ha-textfield>\n        ${this.value\n          ? html`<ha-svg-icon\n              aria-label=${this.hass?.localize(\"ui.components.combo-box.clear\")}\n              class=\"clear-button\"\n              .path=${mdiClose}\n              @click=${this._clearValue}\n            ></ha-svg-icon>`\n          : \"\"}\n        <ha-svg-icon\n          aria-label=${this.hass?.localize(\"ui.components.combo-box.show\")}\n          class=\"toggle-button\"\n          .path=${this._opened ? mdiMenuUp : mdiMenuDown}\n          @click=${this._toggleOpen}\n        ></ha-svg-icon>\n      </vaadin-combo-box-light>\n    `;\n  }\n\n  private _defaultRowRenderer: ComboBoxLitRenderer<\n    string | Record<string, any>\n  > = (item) =>\n    html`<mwc-list-item>\n      ${this.itemLabelPath ? item[this.itemLabelPath] : item}\n    </mwc-list-item>`;\n\n  private _clearValue(ev: Event) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", { value: undefined });\n  }\n\n  private _toggleOpen(ev: Event) {\n    if (this._opened) {\n      this._comboBox?.close();\n      ev.stopPropagation();\n    } else {\n      this._comboBox?.inputElement.focus();\n    }\n  }\n\n  private _openedChanged(ev: ComboBoxLightOpenedChangedEvent) {\n    const opened = ev.detail.value;\n    // delay this so we can handle click event before setting _opened\n    setTimeout(() => {\n      this._opened = opened;\n    }, 0);\n    // @ts-ignore\n    fireEvent(this, ev.type, ev.detail);\n\n    if (\n      opened &&\n      \"MutationObserver\" in window &&\n      !this._overlayMutationObserver\n    ) {\n      const overlay = document.querySelector<HTMLElement>(\n        \"vaadin-combo-box-overlay\"\n      );\n\n      if (!overlay) {\n        return;\n      }\n\n      this._overlayMutationObserver = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n          if (\n            mutation.type === \"attributes\" &&\n            mutation.attributeName === \"inert\"\n          ) {\n            this._overlayMutationObserver?.disconnect();\n            this._overlayMutationObserver = undefined;\n            // @ts-expect-error\n            overlay.inert = false;\n          } else if (mutation.type === \"childList\") {\n            mutation.removedNodes.forEach((node) => {\n              if (node.nodeName === \"VAADIN-COMBO-BOX-OVERLAY\") {\n                this._overlayMutationObserver?.disconnect();\n                this._overlayMutationObserver = undefined;\n              }\n            });\n          }\n        });\n      });\n\n      this._overlayMutationObserver.observe(overlay, {\n        attributes: true,\n      });\n      this._overlayMutationObserver.observe(document.body, {\n        childList: true,\n      });\n    }\n  }\n\n  private _filterChanged(ev: ComboBoxLightFilterChangedEvent) {\n    // @ts-ignore\n    fireEvent(this, ev.type, ev.detail, { composed: false });\n  }\n\n  private _valueChanged(ev: ComboBoxLightValueChangedEvent) {\n    ev.stopPropagation();\n    const newValue = ev.detail.value;\n\n    if (newValue !== this.value) {\n      fireEvent(this, \"value-changed\", { value: newValue });\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        width: 100%;\n      }\n      vaadin-combo-box-light {\n        position: relative;\n      }\n      ha-textfield {\n        width: 100%;\n      }\n      ha-textfield > ha-icon-button {\n        --mdc-icon-button-size: 24px;\n        padding: 2px;\n        color: var(--secondary-text-color);\n      }\n      ha-svg-icon {\n        color: var(--input-dropdown-icon-color);\n        position: absolute;\n        cursor: pointer;\n      }\n      .toggle-button {\n        right: 12px;\n        top: -10px;\n        inset-inline-start: initial;\n        inset-inline-end: 12px;\n        direction: var(--direction);\n      }\n      :host([opened]) .toggle-button {\n        color: var(--primary-color);\n      }\n      .clear-button {\n        --mdc-icon-size: 20px;\n        top: -7px;\n        right: 36px;\n        inset-inline-start: initial;\n        inset-inline-end: 36px;\n        direction: var(--direction);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-combo-box\": HaComboBox;\n  }\n}\n"],"names":[],"sourceRoot":""}