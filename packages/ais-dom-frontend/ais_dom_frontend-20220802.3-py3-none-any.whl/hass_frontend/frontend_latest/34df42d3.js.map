{"version":3,"file":"34df42d3.js","mappings":";;;AAiCA;AACA;;;AAGA;;;;AAIA;AACA;;;;AAIA;;;;AAIA;AACA;;;AAGA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzCA;;AC2EA;;AAIA;;AAGA;AACA;;AAEA;;AAGA;AACA;;AAEA;;AAGA;AAGA;;;AAOA;AAGA;;;AAKA;AAGA;;;AAeA;AAGA;;;;AA9DA;;;;;;;;;;;;;AA3DA","sources":["webpack://home-assistant-frontend/./src/components/ha-expansion-panel.ts","webpack://home-assistant-frontend/./src/panels/config/devices/device-detail/integration-elements/zwave_js/ha-device-info-zwave_js.ts"],"sourcesContent":["import { mdiChevronDown } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { nextRender } from \"../common/util/render-status\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-expansion-panel\")\nclass HaExpansionPanel extends LitElement {\n  @property({ type: Boolean, reflect: true }) expanded = false;\n\n  @property({ type: Boolean, reflect: true }) outlined = false;\n\n  @property() header?: string;\n\n  @property() secondary?: string;\n\n  @state() _showContent = this.expanded;\n\n  @query(\".container\") private _container!: HTMLDivElement;\n\n  protected render(): TemplateResult {\n    return html`\n      <div\n        id=\"summary\"\n        @click=${this._toggleContainer}\n        @keydown=${this._toggleContainer}\n        role=\"button\"\n        tabindex=\"0\"\n        aria-expanded=${this.expanded}\n        aria-controls=\"sect1\"\n      >\n        <slot class=\"header\" name=\"header\">\n          ${this.header}\n          <slot class=\"secondary\" name=\"secondary\">${this.secondary}</slot>\n        </slot>\n        <ha-svg-icon\n          .path=${mdiChevronDown}\n          class=\"summary-icon ${classMap({ expanded: this.expanded })}\"\n        ></ha-svg-icon>\n      </div>\n      <div\n        class=\"container ${classMap({ expanded: this.expanded })}\"\n        @transitionend=${this._handleTransitionEnd}\n        role=\"region\"\n        aria-labelledby=\"summary\"\n        aria-hidden=${!this.expanded}\n        tabindex=\"-1\"\n      >\n        ${this._showContent ? html`<slot></slot>` : \"\"}\n      </div>\n    `;\n  }\n\n  protected willUpdate(changedProps: PropertyValues) {\n    if (changedProps.has(\"expanded\") && this.expanded) {\n      this._showContent = this.expanded;\n    }\n  }\n\n  private _handleTransitionEnd() {\n    this._container.style.removeProperty(\"height\");\n    this._showContent = this.expanded;\n  }\n\n  private async _toggleContainer(ev): Promise<void> {\n    if (ev.type === \"keydown\" && ev.key !== \"Enter\" && ev.key !== \" \") {\n      return;\n    }\n    ev.preventDefault();\n    const newExpanded = !this.expanded;\n    fireEvent(this, \"expanded-will-change\", { expanded: newExpanded });\n\n    if (newExpanded) {\n      this._showContent = true;\n      // allow for dynamic content to be rendered\n      await nextRender();\n    }\n\n    const scrollHeight = this._container.scrollHeight;\n    this._container.style.height = `${scrollHeight}px`;\n\n    if (!newExpanded) {\n      setTimeout(() => {\n        this._container.style.height = \"0px\";\n      }, 0);\n    }\n\n    this.expanded = newExpanded;\n    fireEvent(this, \"expanded-changed\", { expanded: this.expanded });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: 1px;\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n      }\n\n      #summary {\n        display: flex;\n        padding: var(--expansion-panel-summary-padding, 0 8px);\n        min-height: 48px;\n        align-items: center;\n        cursor: pointer;\n        overflow: hidden;\n        font-weight: 500;\n        outline: none;\n      }\n\n      #summary:focus {\n        background: var(--input-fill-color);\n      }\n\n      .summary-icon {\n        transition: transform 150ms cubic-bezier(0.4, 0, 0.2, 1);\n        margin-left: auto;\n        margin-inline-start: auto;\n        margin-inline-end: initial;\n        direction: var(--direction);\n      }\n\n      .summary-icon.expanded {\n        transform: rotate(180deg);\n      }\n\n      .container {\n        padding: var(--expansion-panel-content-padding, 0 8px);\n        overflow: hidden;\n        transition: height 300ms cubic-bezier(0.4, 0, 0.2, 1);\n        height: 0px;\n      }\n\n      .container.expanded {\n        height: auto;\n      }\n\n      .header {\n        display: block;\n      }\n\n      .secondary {\n        display: block;\n        color: var(--secondary-text-color);\n        font-size: 12px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-expansion-panel\": HaExpansionPanel;\n  }\n\n  // for fire event\n  interface HASSDomEvents {\n    \"expanded-changed\": {\n      expanded: boolean;\n    };\n    \"expanded-will-change\": {\n      expanded: boolean;\n    };\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../../../../components/ha-expansion-panel\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  ConfigEntry,\n  getConfigEntries,\n} from \"../../../../../../data/config_entries\";\nimport { DeviceRegistryEntry } from \"../../../../../../data/device_registry\";\nimport {\n  fetchZwaveNodeStatus,\n  nodeStatus,\n  SecurityClass,\n  subscribeZwaveNodeStatus,\n  ZWaveJSNodeStatus,\n} from \"../../../../../../data/zwave_js\";\nimport { haStyle } from \"../../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../../types\";\nimport { SubscribeMixin } from \"../../../../../../mixins/subscribe-mixin\";\n\n@customElement(\"ha-device-info-zwave_js\")\nexport class HaDeviceInfoZWaveJS extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public device!: DeviceRegistryEntry;\n\n  @state() private _configEntry?: ConfigEntry;\n\n  @state() private _multipleConfigEntries = false;\n\n  @state() private _node?: ZWaveJSNodeStatus;\n\n  public willUpdate(changedProperties: PropertyValues) {\n    super.willUpdate(changedProperties);\n    if (changedProperties.has(\"device\")) {\n      this._fetchNodeDetails();\n    }\n  }\n\n  public hassSubscribe(): Array<UnsubscribeFunc | Promise<UnsubscribeFunc>> {\n    return [\n      subscribeZwaveNodeStatus(this.hass, this.device!.id, (message) => {\n        if (!this._node) {\n          return;\n        }\n        this._node = {\n          ...this._node,\n          status: message.status,\n          ready: message.ready,\n        };\n      }),\n    ];\n  }\n\n  protected async _fetchNodeDetails() {\n    if (!this.device) {\n      return;\n    }\n\n    const configEntries = await getConfigEntries(this.hass, {\n      domain: \"zwave_js\",\n    });\n\n    this._multipleConfigEntries = configEntries.length > 1;\n\n    const configEntry = configEntries.find((entry) =>\n      this.device.config_entries.includes(entry.entry_id)\n    );\n\n    if (!configEntry) {\n      return;\n    }\n\n    this._configEntry = configEntry;\n\n    this._node = await fetchZwaveNodeStatus(this.hass, this.device.id);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._node) {\n      return html``;\n    }\n    return html`\n      <ha-expansion-panel\n        .header=${this.hass.localize(\n          \"ui.panel.config.zwave_js.device_info.zwave_info\"\n        )}\n      >\n        ${this._multipleConfigEntries\n          ? html`\n              <div>\n                ${this.hass.localize(\"ui.panel.config.zwave_js.common.source\")}:\n                ${this._configEntry!.title}\n              </div>\n            `\n          : \"\"}\n        <div>\n          ${this.hass.localize(\"ui.panel.config.zwave_js.common.node_id\")}:\n          ${this._node.node_id}\n        </div>\n        ${!this._node.is_controller_node\n          ? html`\n              <div>\n                ${this.hass.localize(\n                  \"ui.panel.config.zwave_js.device_info.node_status\"\n                )}:\n                ${this.hass.localize(\n                  `ui.panel.config.zwave_js.node_status.${\n                    nodeStatus[this._node.status]\n                  }`\n                )}\n              </div>\n              <div>\n                ${this.hass.localize(\n                  \"ui.panel.config.zwave_js.device_info.node_ready\"\n                )}:\n                ${this._node.ready\n                  ? this.hass.localize(\"ui.common.yes\")\n                  : this.hass.localize(\"ui.common.no\")}\n              </div>\n              <div>\n                ${this.hass.localize(\n                  \"ui.panel.config.zwave_js.device_info.highest_security\"\n                )}:\n                ${this._node.highest_security_class !== null\n                  ? this.hass.localize(\n                      `ui.panel.config.zwave_js.security_classes.${\n                        SecurityClass[this._node.highest_security_class]\n                      }.title`\n                    )\n                  : this._node.is_secure === false\n                  ? this.hass.localize(\n                      \"ui.panel.config.zwave_js.security_classes.none.title\"\n                    )\n                  : this.hass.localize(\n                      \"ui.panel.config.zwave_js.device_info.unknown\"\n                    )}\n              </div>\n              <div>\n                ${this.hass.localize(\n                  \"ui.panel.config.zwave_js.device_info.zwave_plus\"\n                )}:\n                ${this._node.zwave_plus_version\n                  ? this.hass.localize(\n                      \"ui.panel.config.zwave_js.device_info.zwave_plus_version\",\n                      \"version\",\n                      this._node.zwave_plus_version\n                    )\n                  : this.hass.localize(\"ui.common.no\")}\n              </div>\n            `\n          : \"\"}\n      </ha-expansion-panel>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        h4 {\n          margin-bottom: 4px;\n        }\n        div {\n          word-break: break-all;\n          margin-top: 2px;\n        }\n        ha-expansion-panel {\n          --expansion-panel-summary-padding: 0;\n          --expansion-panel-content-padding: 0;\n          padding-top: 4px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-device-info-zwave_js\": HaDeviceInfoZWaveJS;\n  }\n}\n"],"names":[],"sourceRoot":""}