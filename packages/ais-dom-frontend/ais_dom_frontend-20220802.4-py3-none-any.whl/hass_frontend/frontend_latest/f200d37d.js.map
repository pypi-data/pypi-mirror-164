{"version":3,"file":"f200d37d.js","mappings":";AAoGA;;AAGA;AAEA;AACA;AACA;AAGA;;;;AAIA;;AAKA;;;AAIA;;;AAIA;;;AAMA;AAEA;AACA;;AAKA;AACA;AAEA;AACA;;;AAIA;;;AAIA;;AAOA;;;;AAKA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AArJA;ACRA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;ACjBA;;;;;AAAA;ACqDA;AACA;AAmBA;AACA;;AA0CA;;AAIA;;;;AAKA;;AAEA;AAKA;AASA;;;;AAKA;;AAEA;;AAGA;;AASA;AAeA;AACA;AAmBA;AACA;ACxLA;AACA;AALA;;;AC4FA;AACA;;AAEA;;;;;;;AAOA;;;;;;AAQA;AACA;;AAEA;;AAEA;;;AAIA;;AAIA;;AAEA;AAEA;;;AAIA;;AAIA;;AAEA;;AAGA;;AAKA;AACA;;;AAGA;;;;AAMA;;;AAKA;;;AAIA;AAGA;;;AAKA;AACA;;;AAGA;AAIA;AACA;;AAEA;AAIA;AACA;;;AAGA;AACA;;AAEA;;AAGA;;;AAKA;;;;AAMA;;AAEA;;AAIA;AAEA;;AAGA;AACA;;;AAGA;AACA;;;;;AA9LA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACTA;;AAEA;AACA;;;;;AAOA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AAlCA;;;ACgBA;;AAEA;AACA;;;;AAIA;AACA;AACA;;;;;;AAfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAlBA","sources":["webpack://home-assistant-frontend/./src/components/chart/ha-chart-base.ts","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-header-bar.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/show-dialog-config-flow.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/controls/more-info-default.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/ha-more-info-dialog.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/ha-more-info-history.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/ha-more-info-logbook.ts"],"sourcesContent":["import type {\n  Chart,\n  ChartType,\n  ChartData,\n  ChartOptions,\n  TooltipModel,\n} from \"chart.js\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { clamp } from \"../../common/number/clamp\";\n\nexport const MIN_TIME_BETWEEN_UPDATES = 60 * 5 * 1000;\n\ninterface Tooltip extends TooltipModel<any> {\n  top: string;\n  left: string;\n}\n\n@customElement(\"ha-chart-base\")\nexport default class HaChartBase extends LitElement {\n  public chart?: Chart;\n\n  @property({ attribute: \"chart-type\", reflect: true })\n  public chartType: ChartType = \"line\";\n\n  @property({ attribute: false }) public data: ChartData = { datasets: [] };\n\n  @property({ attribute: false }) public options?: ChartOptions;\n\n  @property({ attribute: false }) public plugins?: any[];\n\n  @property({ type: Number }) public height?: number;\n\n  @state() private _chartHeight?: number;\n\n  @state() private _tooltip?: Tooltip;\n\n  @state() private _hiddenDatasets: Set<number> = new Set();\n\n  private _releaseCanvas() {\n    // release the canvas memory to prevent\n    // safari from running out of memory.\n    if (this.chart) {\n      this.chart.destroy();\n    }\n  }\n\n  public disconnectedCallback() {\n    this._releaseCanvas();\n    super.disconnectedCallback();\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (this.hasUpdated) {\n      this._setupChart();\n    }\n  }\n\n  protected firstUpdated() {\n    this._setupChart();\n    this.data.datasets.forEach((dataset, index) => {\n      if (dataset.hidden) {\n        this._hiddenDatasets.add(index);\n      }\n    });\n  }\n\n  public willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n\n    if (!this.hasUpdated || !this.chart) {\n      return;\n    }\n    if (changedProps.has(\"plugins\")) {\n      this.chart.destroy();\n      this._setupChart();\n      return;\n    }\n    if (changedProps.has(\"chartType\")) {\n      this.chart.config.type = this.chartType;\n    }\n    if (changedProps.has(\"data\")) {\n      if (this._hiddenDatasets.size) {\n        this.data.datasets.forEach((dataset, index) => {\n          dataset.hidden = this._hiddenDatasets.has(index);\n        });\n      }\n      this.chart.data = this.data;\n    }\n    if (changedProps.has(\"options\")) {\n      this.chart.options = this._createOptions();\n    }\n    this.chart.update(\"none\");\n  }\n\n  protected render() {\n    return html`\n      ${this.options?.plugins?.legend?.display === true\n        ? html`<div class=\"chartLegend\">\n            <ul>\n              ${this.data.datasets.map(\n                (dataset, index) => html`<li\n                  .datasetIndex=${index}\n                  @click=${this._legendClick}\n                  class=${classMap({\n                    hidden: this._hiddenDatasets.has(index),\n                  })}\n                  .title=${dataset.label}\n                >\n                  <div\n                    class=\"bullet\"\n                    style=${styleMap({\n                      backgroundColor: dataset.backgroundColor as string,\n                      borderColor: dataset.borderColor as string,\n                    })}\n                  ></div>\n                  <div class=\"label\">${dataset.label}</div>\n                </li>`\n              )}\n            </ul>\n          </div>`\n        : \"\"}\n      <div\n        class=\"chartContainer\"\n        style=${styleMap({\n          height: `${this.height ?? this._chartHeight}px`,\n          overflow: this._chartHeight ? \"initial\" : \"hidden\",\n        })}\n      >\n        <canvas></canvas>\n        ${this._tooltip\n          ? html`<div\n              class=\"chartTooltip ${classMap({ [this._tooltip.yAlign]: true })}\"\n              style=${styleMap({\n                top: this._tooltip.top,\n                left: this._tooltip.left,\n              })}\n            >\n              <div class=\"title\">${this._tooltip.title}</div>\n              ${this._tooltip.beforeBody\n                ? html`<div class=\"beforeBody\">\n                    ${this._tooltip.beforeBody}\n                  </div>`\n                : \"\"}\n              <div>\n                <ul>\n                  ${this._tooltip.body.map(\n                    (item, i) => html`<li>\n                      <div\n                        class=\"bullet\"\n                        style=${styleMap({\n                          backgroundColor: this._tooltip!.labelColors[i]\n                            .backgroundColor as string,\n                          borderColor: this._tooltip!.labelColors[i]\n                            .borderColor as string,\n                        })}\n                      ></div>\n                      ${item.lines.join(\"\\n\")}\n                    </li>`\n                  )}\n                </ul>\n              </div>\n              ${this._tooltip.footer.length\n                ? html`<div class=\"footer\">\n                    ${this._tooltip.footer.map((item) => html`${item}<br />`)}\n                  </div>`\n                : \"\"}\n            </div>`\n          : \"\"}\n      </div>\n    `;\n  }\n\n  private async _setupChart() {\n    const ctx: CanvasRenderingContext2D = this.renderRoot\n      .querySelector(\"canvas\")!\n      .getContext(\"2d\")!;\n\n    const ChartConstructor = (await import(\"../../resources/chartjs\")).Chart;\n\n    const computedStyles = getComputedStyle(this);\n\n    ChartConstructor.defaults.borderColor =\n      computedStyles.getPropertyValue(\"--divider-color\");\n    ChartConstructor.defaults.color = computedStyles.getPropertyValue(\n      \"--secondary-text-color\"\n    );\n    ChartConstructor.defaults.font.family =\n      computedStyles.getPropertyValue(\"--mdc-typography-body1-font-family\") ||\n      computedStyles.getPropertyValue(\"--mdc-typography-font-family\") ||\n      \"Roboto, Noto, sans-serif\";\n\n    this.chart = new ChartConstructor(ctx, {\n      type: this.chartType,\n      data: this.data,\n      options: this._createOptions(),\n      plugins: this._createPlugins(),\n    });\n  }\n\n  private _createOptions() {\n    return {\n      ...this.options,\n      plugins: {\n        ...this.options?.plugins,\n        tooltip: {\n          ...this.options?.plugins?.tooltip,\n          enabled: false,\n          external: (context) => this._handleTooltip(context),\n        },\n        legend: {\n          ...this.options?.plugins?.legend,\n          display: false,\n        },\n      },\n    };\n  }\n\n  private _createPlugins() {\n    return [\n      ...(this.plugins || []),\n      {\n        id: \"afterRenderHook\",\n        afterRender: (chart) => {\n          this._chartHeight = chart.height;\n        },\n        legend: {\n          ...this.options?.plugins?.legend,\n          display: false,\n        },\n      },\n    ];\n  }\n\n  private _legendClick(ev) {\n    if (!this.chart) {\n      return;\n    }\n    const index = ev.currentTarget.datasetIndex;\n    if (this.chart.isDatasetVisible(index)) {\n      this.chart.setDatasetVisibility(index, false);\n      this._hiddenDatasets.add(index);\n    } else {\n      this.chart.setDatasetVisibility(index, true);\n      this._hiddenDatasets.delete(index);\n    }\n    this.chart.update(\"none\");\n    this.requestUpdate(\"_hiddenDatasets\");\n  }\n\n  private _handleTooltip(context: {\n    chart: Chart;\n    tooltip: TooltipModel<any>;\n  }) {\n    if (context.tooltip.opacity === 0) {\n      this._tooltip = undefined;\n      return;\n    }\n    this._tooltip = {\n      ...context.tooltip,\n      top: this.chart!.canvas.offsetTop + context.tooltip.caretY + 12 + \"px\",\n      left:\n        this.chart!.canvas.offsetLeft +\n        clamp(context.tooltip.caretX, 100, this.clientWidth - 100) -\n        100 +\n        \"px\",\n    };\n  }\n\n  public updateChart = (\n    mode:\n      | \"resize\"\n      | \"reset\"\n      | \"none\"\n      | \"hide\"\n      | \"show\"\n      | \"normal\"\n      | \"active\"\n      | undefined\n  ): void => {\n    if (this.chart) {\n      this.chart.update(mode);\n    }\n  };\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n      .chartContainer {\n        overflow: hidden;\n        height: 0;\n        transition: height 300ms cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      canvas {\n        max-height: var(--chart-max-height, 400px);\n      }\n      .chartLegend {\n        text-align: center;\n      }\n      .chartLegend li {\n        cursor: pointer;\n        display: inline-grid;\n        grid-auto-flow: column;\n        padding: 0 8px;\n        box-sizing: border-box;\n        align-items: center;\n        color: var(--secondary-text-color);\n      }\n      .chartLegend .hidden {\n        text-decoration: line-through;\n      }\n      .chartLegend .label {\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        overflow: hidden;\n      }\n      .chartLegend .bullet,\n      .chartTooltip .bullet {\n        border-width: 1px;\n        border-style: solid;\n        border-radius: 50%;\n        display: inline-block;\n        height: 16px;\n        margin-right: 6px;\n        width: 16px;\n        flex-shrink: 0;\n        box-sizing: border-box;\n        margin-inline-end: 6px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .chartTooltip .bullet {\n        align-self: baseline;\n      }\n      :host([rtl]) .chartLegend .bullet,\n      :host([rtl]) .chartTooltip .bullet {\n        margin-right: inherit;\n        margin-left: 6px;\n        margin-inline-end: inherit;\n        margin-inline-start: 6px;\n        direction: var(--direction);\n      }\n      .chartTooltip {\n        padding: 8px;\n        font-size: 90%;\n        position: absolute;\n        background: rgba(80, 80, 80, 0.9);\n        color: white;\n        border-radius: 4px;\n        pointer-events: none;\n        z-index: 1000;\n        width: 200px;\n        box-sizing: border-box;\n      }\n      :host([rtl]) .chartTooltip {\n        direction: rtl;\n      }\n      .chartLegend ul,\n      .chartTooltip ul {\n        display: inline-block;\n        padding: 0 0px;\n        margin: 8px 0 0 0;\n        width: 100%;\n      }\n      .chartTooltip ul {\n        margin: 0 4px;\n      }\n      .chartTooltip li {\n        display: flex;\n        white-space: pre-line;\n        align-items: center;\n        line-height: 16px;\n        padding: 4px 0;\n      }\n      .chartTooltip .title {\n        text-align: center;\n        font-weight: 500;\n        direction: ltr;\n      }\n      .chartTooltip .footer {\n        font-weight: 500;\n      }\n      .chartTooltip .beforeBody {\n        text-align: center;\n        font-weight: 300;\n        word-break: break-all;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-chart-base\": HaChartBase;\n  }\n}\n","import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","// @ts-ignore\nimport topAppBarStyles from \"@material/top-app-bar/dist/mdc.top-app-bar.min.css\";\nimport { css, html, LitElement, unsafeCSS } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-header-bar\")\nexport class HaHeaderBar extends LitElement {\n  protected render() {\n    return html`<header class=\"mdc-top-app-bar\">\n      <div class=\"mdc-top-app-bar__row\">\n        <section\n          class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-start\"\n          id=\"navigation\"\n        >\n          <slot name=\"navigationIcon\"></slot>\n          <span class=\"mdc-top-app-bar__title\">\n            <slot name=\"title\"></slot>\n          </span>\n        </section>\n        <section\n          class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-end\"\n          id=\"actions\"\n          role=\"toolbar\"\n        >\n          <slot name=\"actionItems\"></slot>\n        </section>\n      </div>\n    </header>`;\n  }\n\n  static get styles() {\n    return [\n      unsafeCSS(topAppBarStyles),\n      css`\n        .mdc-top-app-bar {\n          position: static;\n          color: var(--mdc-theme-on-primary, #fff);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-header-bar\": HaHeaderBar;\n  }\n}\n","import { html } from \"lit\";\nimport {\n  createConfigFlow,\n  deleteConfigFlow,\n  fetchConfigFlow,\n  getConfigFlowHandlers,\n  handleConfigFlowStep,\n} from \"../../data/config_flow\";\nimport { domainToName } from \"../../data/integration\";\nimport { getSupportedBrands } from \"../../data/supported_brands\";\nimport {\n  DataEntryFlowDialogParams,\n  loadDataEntryFlowDialog,\n  showFlowDialog,\n} from \"./show-dialog-data-entry-flow\";\n\nexport const loadConfigFlowDialog = loadDataEntryFlowDialog;\n\nexport const showConfigFlowDialog = (\n  element: HTMLElement,\n  dialogParams: Omit<DataEntryFlowDialogParams, \"flowConfig\">\n): void =>\n  showFlowDialog(element, dialogParams, {\n    loadDevicesAndAreas: true,\n    getFlowHandlers: async (hass) => {\n      const [integrations, helpers, supportedBrands] = await Promise.all([\n        getConfigFlowHandlers(hass, \"integration\"),\n        getConfigFlowHandlers(hass, \"helper\"),\n        getSupportedBrands(hass),\n        hass.loadBackendTranslation(\"title\", undefined, true),\n      ]);\n\n      return { integrations, helpers, supportedBrands };\n    },\n    createFlow: async (hass, handler) => {\n      const [step] = await Promise.all([\n        createConfigFlow(hass, handler),\n        hass.loadBackendTranslation(\"config\", handler),\n        // Used as fallback if no header defined for step\n        hass.loadBackendTranslation(\"title\", handler),\n      ]);\n      return step;\n    },\n    fetchFlow: async (hass, flowId) => {\n      const step = await fetchConfigFlow(hass, flowId);\n      await hass.loadBackendTranslation(\"config\", step.handler);\n      return step;\n    },\n    handleFlowStep: handleConfigFlowStep,\n    deleteFlow: deleteConfigFlow,\n\n    renderAbortDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.abort.${step.reason}`,\n        step.description_placeholders\n      );\n\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderShowFormStepHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderShowFormStepDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.description`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderShowFormStepFieldLabel(hass, step, field) {\n      return hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.data.${field.name}`\n      );\n    },\n\n    renderShowFormStepFieldHelper(hass, step, field) {\n      return hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.data_description.${field.name}`\n      );\n    },\n\n    renderShowFormStepFieldError(hass, step, error) {\n      return hass.localize(\n        `component.${step.handler}.config.error.${error}`,\n        step.description_placeholders\n      );\n    },\n\n    renderExternalStepHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) ||\n        hass.localize(\n          \"ui.panel.config.integrations.config_flow.external_step.open_site\"\n        )\n      );\n    },\n\n    renderExternalStepDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.${step.step_id}.description`,\n        step.description_placeholders\n      );\n\n      return html`\n        <p>\n          ${hass.localize(\n            \"ui.panel.config.integrations.config_flow.external_step.description\"\n          )}\n        </p>\n        ${description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\"}\n      `;\n    },\n\n    renderCreateEntryDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.create_entry.${\n          step.description || \"default\"\n        }`,\n        step.description_placeholders\n      );\n\n      return html`\n        ${description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\"}\n        <p>\n          ${hass.localize(\n            \"ui.panel.config.integrations.config_flow.created_config\",\n            \"name\",\n            step.title\n          )}\n        </p>\n      `;\n    },\n\n    renderShowFormProgressHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderShowFormProgressDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.progress.${step.progress_action}`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderMenuHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderMenuDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.description`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderMenuOption(hass, step, option) {\n      return hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.menu_options.${option}`,\n        step.description_placeholders\n      );\n    },\n\n    renderLoadingDescription(hass, reason, handler, step) {\n      if (![\"loading_flow\", \"loading_step\"].includes(reason)) {\n        return \"\";\n      }\n      const domain = step?.handler || handler;\n      return hass.localize(\n        `ui.panel.config.integrations.config_flow.loading.${reason}`,\n        {\n          integration: domain\n            ? domainToName(hass.localize, domain)\n            : // when we are continuing a config flow, we only know the ID and not the domain\n              hass.localize(\n                \"ui.panel.config.integrations.config_flow.loading.fallback_title\"\n              ),\n        }\n      );\n    },\n  });\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../components/ha-attributes\";\nimport { HomeAssistant } from \"../../../types\";\n\n@customElement(\"more-info-default\")\nclass MoreInfoDefault extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public stateObj?: HassEntity;\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.stateObj) {\n      return html``;\n    }\n\n    return html`<ha-attributes\n      .hass=${this.hass}\n      .stateObj=${this.stateObj}\n    ></ha-attributes>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"more-info-default\": MoreInfoDefault;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@material/mwc-tab\";\nimport \"@material/mwc-tab-bar\";\nimport { mdiClose, mdiCog, mdiPencil } from \"@mdi/js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { cache } from \"lit/directives/cache\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport {\n  DOMAINS_MORE_INFO_NO_HISTORY,\n  DOMAINS_WITH_MORE_INFO,\n} from \"../../common/const\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport { navigate } from \"../../common/navigate\";\nimport \"../../components/ha-dialog\";\nimport \"../../components/ha-header-bar\";\nimport \"../../components/ha-icon-button\";\nimport { removeEntityRegistryEntry } from \"../../data/entity_registry\";\nimport { CONTINUOUS_DOMAINS } from \"../../data/logbook\";\nimport { showEntityEditorDialog } from \"../../panels/config/entities/show-dialog-entity-editor\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport \"../../state-summary/state-card-content\";\nimport { HomeAssistant } from \"../../types\";\nimport { showConfirmationDialog } from \"../generic/show-dialog-box\";\nimport { replaceDialog } from \"../make-dialog-manager\";\nimport \"./controls/more-info-default\";\nimport \"./ha-more-info-history\";\nimport \"./ha-more-info-logbook\";\nimport \"./more-info-content\";\n\nconst DOMAINS_NO_INFO = [\"camera\", \"configurator\"];\n/**\n * Entity domains that should be editable *if* they have an id present;\n * {@see shouldShowEditIcon}.\n * */\nconst EDITABLE_DOMAINS_WITH_ID = [\"scene\", \"automation\"];\n/**\n * Entity Domains that should always be editable; {@see shouldShowEditIcon}.\n * */\nconst EDITABLE_DOMAINS = [\"script\"];\n\nexport interface MoreInfoDialogParams {\n  entityId: string | null;\n}\n\n@customElement(\"ha-more-info-dialog\")\nexport class MoreInfoDialog extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public large = false;\n\n  @state() private _entityId?: string | null;\n\n  @state() private _currTabIndex = 0;\n\n  public showDialog(params: MoreInfoDialogParams) {\n    this._entityId = params.entityId;\n    if (!this._entityId) {\n      this.closeDialog();\n      return;\n    }\n    this.large = false;\n  }\n\n  public closeDialog() {\n    this._entityId = undefined;\n    this._currTabIndex = 0;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected shouldShowEditIcon(domain, stateObj): boolean {\n    if (__DEMO__) {\n      return false;\n    }\n    if (EDITABLE_DOMAINS_WITH_ID.includes(domain) && stateObj.attributes.id) {\n      return true;\n    }\n    if (EDITABLE_DOMAINS.includes(domain)) {\n      return true;\n    }\n    if (domain === \"person\" && stateObj.attributes.editable !== \"false\") {\n      return true;\n    }\n\n    return false;\n  }\n\n  protected render() {\n    if (!this._entityId) {\n      return html``;\n    }\n    const entityId = this._entityId;\n    const stateObj = this.hass.states[entityId];\n\n    if (!stateObj) {\n      return html``;\n    }\n\n    const domain = computeDomain(entityId);\n    const name = computeStateName(stateObj);\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${name}\n        hideActions\n        data-domain=${domain}\n      >\n        <div slot=\"heading\" class=\"heading\">\n          <ha-header-bar>\n            <ha-icon-button\n              slot=\"navigationIcon\"\n              dialogAction=\"cancel\"\n              .label=${this.hass.localize(\n                \"ui.dialogs.more_info_control.dismiss\"\n              )}\n              .path=${mdiClose}\n            ></ha-icon-button>\n            <div\n              slot=\"title\"\n              class=\"main-title\"\n              .title=${name}\n              @click=${this._enlarge}\n            >\n              ${name}\n            </div>\n            ${this.hass.user!.is_admin\n              ? html`\n                  <ha-icon-button\n                    slot=\"actionItems\"\n                    .label=${this.hass.localize(\n                      \"ui.dialogs.more_info_control.settings\"\n                    )}\n                    .path=${mdiCog}\n                    @click=${this._gotoSettings}\n                  ></ha-icon-button>\n                `\n              : \"\"}\n            ${this.shouldShowEditIcon(domain, stateObj)\n              ? html`\n                  <ha-icon-button\n                    slot=\"actionItems\"\n                    .label=${this.hass.localize(\n                      \"ui.dialogs.more_info_control.edit\"\n                    )}\n                    .path=${mdiPencil}\n                    @click=${this._gotoEdit}\n                  ></ha-icon-button>\n                `\n              : \"\"}\n          </ha-header-bar>\n          ${DOMAINS_WITH_MORE_INFO.includes(domain) &&\n          (this._computeShowHistoryComponent(entityId) ||\n            this._computeShowLogBookComponent(entityId))\n            ? html`\n                <mwc-tab-bar\n                  .activeIndex=${this._currTabIndex}\n                  @MDCTabBar:activated=${this._handleTabChanged}\n                >\n                  <mwc-tab\n                    .label=${this.hass.localize(\n                      \"ui.dialogs.more_info_control.details\"\n                    )}\n                    dialogInitialFocus\n                  ></mwc-tab>\n                  <mwc-tab\n                    .label=${this.hass.localize(\n                      \"ui.dialogs.more_info_control.history\"\n                    )}\n                  ></mwc-tab>\n                </mwc-tab-bar>\n              `\n            : \"\"}\n        </div>\n        <div class=\"content\" tabindex=\"-1\" dialogInitialFocus>\n          ${cache(\n            this._currTabIndex === 0\n              ? html`\n                  ${DOMAINS_NO_INFO.includes(domain)\n                    ? \"\"\n                    : html`\n                        <state-card-content\n                          in-dialog\n                          .stateObj=${stateObj}\n                          .hass=${this.hass}\n                        ></state-card-content>\n                      `}\n                  ${DOMAINS_WITH_MORE_INFO.includes(domain) ||\n                  !this._computeShowHistoryComponent(entityId)\n                    ? \"\"\n                    : html`<ha-more-info-history\n                        .hass=${this.hass}\n                        .entityId=${this._entityId}\n                      ></ha-more-info-history>`}\n                  ${DOMAINS_WITH_MORE_INFO.includes(domain) ||\n                  !this._computeShowLogBookComponent(entityId)\n                    ? \"\"\n                    : html`<ha-more-info-logbook\n                        .hass=${this.hass}\n                        .entityId=${this._entityId}\n                      ></ha-more-info-logbook>`}\n                  <more-info-content\n                    .stateObj=${stateObj}\n                    .hass=${this.hass}\n                  ></more-info-content>\n                  ${stateObj.attributes.restored\n                    ? html`\n                        <p>\n                          ${this.hass.localize(\n                            \"ui.dialogs.more_info_control.restored.not_provided\"\n                          )}\n                        </p>\n                        <p>\n                          ${this.hass.localize(\n                            \"ui.dialogs.more_info_control.restored.remove_intro\"\n                          )}\n                        </p>\n                        <mwc-button\n                          class=\"warning\"\n                          @click=${this._removeEntity}\n                        >\n                          ${this.hass.localize(\n                            \"ui.dialogs.more_info_control.restored.remove_action\"\n                          )}\n                        </mwc-button>\n                      `\n                    : \"\"}\n                `\n              : html`\n                  <ha-more-info-history\n                    .hass=${this.hass}\n                    .entityId=${this._entityId}\n                  ></ha-more-info-history>\n                  <ha-more-info-logbook\n                    .hass=${this.hass}\n                    .entityId=${this._entityId}\n                  ></ha-more-info-logbook>\n                `\n          )}\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  private _enlarge() {\n    this.large = !this.large;\n  }\n\n  private _computeShowHistoryComponent(entityId) {\n    return (\n      isComponentLoaded(this.hass, \"history\") &&\n      !DOMAINS_MORE_INFO_NO_HISTORY.includes(computeDomain(entityId))\n    );\n  }\n\n  private _computeShowLogBookComponent(entityId): boolean {\n    if (!isComponentLoaded(this.hass, \"logbook\")) {\n      return false;\n    }\n\n    const stateObj = this.hass.states[entityId];\n    if (!stateObj || stateObj.attributes.unit_of_measurement) {\n      return false;\n    }\n\n    const domain = computeDomain(entityId);\n    if (\n      CONTINUOUS_DOMAINS.includes(domain) ||\n      DOMAINS_MORE_INFO_NO_HISTORY.includes(domain)\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private _removeEntity() {\n    const entityId = this._entityId!;\n    showConfirmationDialog(this, {\n      title: this.hass.localize(\n        \"ui.dialogs.more_info_control.restored.confirm_remove_title\"\n      ),\n      text: this.hass.localize(\n        \"ui.dialogs.more_info_control.restored.confirm_remove_text\"\n      ),\n      confirmText: this.hass.localize(\"ui.common.remove\"),\n      dismissText: this.hass.localize(\"ui.common.cancel\"),\n      confirm: () => {\n        removeEntityRegistryEntry(this.hass, entityId);\n      },\n    });\n  }\n\n  private _gotoSettings() {\n    replaceDialog(this);\n    showEntityEditorDialog(this, {\n      entity_id: this._entityId!,\n    });\n    this.closeDialog();\n  }\n\n  private _gotoEdit() {\n    const stateObj = this.hass.states[this._entityId!];\n    const domain = computeDomain(this._entityId!);\n    let idToPassThroughUrl = stateObj.entity_id;\n    if (EDITABLE_DOMAINS_WITH_ID.includes(domain) || domain === \"person\") {\n      idToPassThroughUrl = stateObj.attributes.id;\n    }\n\n    navigate(`/config/${domain}/edit/${idToPassThroughUrl}`);\n    this.closeDialog();\n  }\n\n  private _handleTabChanged(ev: CustomEvent): void {\n    const newTab = ev.detail.index;\n    if (newTab === this._currTabIndex) {\n      return;\n    }\n\n    this._currTabIndex = ev.detail.index;\n  }\n\n  static get styles() {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --dialog-surface-position: static;\n          --dialog-content-position: static;\n        }\n\n        ha-header-bar {\n          --mdc-theme-on-primary: var(--primary-text-color);\n          --mdc-theme-primary: var(--mdc-theme-surface);\n          flex-shrink: 0;\n          display: block;\n        }\n        .content {\n          outline: none;\n        }\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          ha-header-bar {\n            --mdc-theme-primary: var(--app-header-background-color);\n            --mdc-theme-on-primary: var(--app-header-text-color, white);\n            border-bottom: none;\n          }\n        }\n\n        .heading {\n          border-bottom: 1px solid\n            var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n        }\n\n        @media all and (min-width: 451px) and (min-height: 501px) {\n          ha-dialog {\n            --mdc-dialog-max-width: 90vw;\n          }\n\n          .content {\n            width: 352px;\n          }\n\n          ha-header-bar {\n            width: 400px;\n          }\n\n          .main-title {\n            overflow: hidden;\n            text-overflow: ellipsis;\n            cursor: default;\n          }\n\n          ha-dialog[data-domain=\"camera\"] .content,\n          ha-dialog[data-domain=\"camera\"] ha-header-bar {\n            width: auto;\n          }\n\n          :host([large]) .content {\n            width: calc(90vw - 48px);\n          }\n\n          :host([large]) ha-dialog[data-domain=\"camera\"] .content,\n          :host([large]) ha-header-bar {\n            width: 90vw;\n          }\n        }\n\n        ha-dialog[data-domain=\"camera\"] {\n          --dialog-content-padding: 0;\n        }\n\n        state-card-content,\n        ha-more-info-history,\n        ha-more-info-logbook:not(:last-child) {\n          display: block;\n          margin-bottom: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-more-info-dialog\": MoreInfoDialog;\n  }\n}\n","import { startOfYesterday } from \"date-fns/esm\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { throttle } from \"../../common/util/throttle\";\nimport \"../../components/chart/state-history-charts\";\nimport { getRecentWithCache } from \"../../data/cached-history\";\nimport { HistoryResult } from \"../../data/history\";\nimport { HomeAssistant } from \"../../types\";\n\ndeclare global {\n  interface HASSDomEvents {\n    closed: undefined;\n  }\n}\n\n@customElement(\"ha-more-info-history\")\nexport class MoreInfoHistory extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entityId!: string;\n\n  @state() private _stateHistory?: HistoryResult;\n\n  private _showMoreHref = \"\";\n\n  private _throttleGetStateHistory = throttle(() => {\n    this._getStateHistory();\n  }, 10000);\n\n  protected render(): TemplateResult {\n    if (!this.entityId) {\n      return html``;\n    }\n\n    return html`${isComponentLoaded(this.hass, \"history\")\n      ? html` <div class=\"header\">\n            <div class=\"title\">\n              ${this.hass.localize(\"ui.dialogs.more_info_control.history\")}\n            </div>\n            <a href=${this._showMoreHref} @click=${this._close}\n              >${this.hass.localize(\n                \"ui.dialogs.more_info_control.show_more\"\n              )}</a\n            >\n          </div>\n          <state-history-charts\n            up-to-now\n            .hass=${this.hass}\n            .historyData=${this._stateHistory}\n            .isLoadingData=${!this._stateHistory}\n          ></state-history-charts>`\n      : \"\"}`;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"entityId\")) {\n      this._stateHistory = undefined;\n\n      if (!this.entityId) {\n        return;\n      }\n\n      this._showMoreHref = `/history?entity_id=${\n        this.entityId\n      }&start_date=${startOfYesterday().toISOString()}`;\n\n      this._throttleGetStateHistory();\n      return;\n    }\n\n    if (!this.entityId || !changedProps.has(\"hass\")) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n\n    if (\n      oldHass &&\n      this.hass.states[this.entityId] !== oldHass?.states[this.entityId]\n    ) {\n      // wait for commit of data (we only account for the default setting of 1 sec)\n      setTimeout(this._throttleGetStateHistory, 1000);\n    }\n  }\n\n  private async _getStateHistory(): Promise<void> {\n    if (!isComponentLoaded(this.hass, \"history\")) {\n      return;\n    }\n    this._stateHistory = await getRecentWithCache(\n      this.hass!,\n      this.entityId,\n      {\n        cacheKey: `more_info.${this.entityId}`,\n        hoursToShow: 24,\n      },\n      this.hass!.localize,\n      this.hass!.language\n    );\n  }\n\n  private _close(): void {\n    setTimeout(() => fireEvent(this, \"closed\"), 500);\n  }\n\n  static get styles() {\n    return [\n      css`\n        .header {\n          display: flex;\n          flex-direction: row;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 8px;\n        }\n        .header > a,\n        a:visited {\n          color: var(--primary-color);\n        }\n        .title {\n          font-family: var(--paper-font-title_-_font-family);\n          -webkit-font-smoothing: var(\n            --paper-font-title_-_-webkit-font-smoothing\n          );\n          font-size: var(--paper-font-subhead_-_font-size);\n          font-weight: var(--paper-font-title_-_font-weight);\n          letter-spacing: var(--paper-font-title_-_letter-spacing);\n          line-height: var(--paper-font-title_-_line-height);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-more-info-history\": MoreInfoHistory;\n  }\n}\n","import { startOfYesterday } from \"date-fns/esm\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../panels/logbook/ha-logbook\";\nimport type { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-more-info-logbook\")\nexport class MoreInfoLogbook extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entityId!: string;\n\n  private _showMoreHref = \"\";\n\n  private _time = { recent: 86400 };\n\n  private _entityIdAsList = memoizeOne((entityId: string) => [entityId]);\n\n  protected render(): TemplateResult {\n    if (!isComponentLoaded(this.hass, \"logbook\") || !this.entityId) {\n      return html``;\n    }\n    const stateObj = this.hass.states[this.entityId];\n\n    if (!stateObj) {\n      return html``;\n    }\n\n    return html`\n      <div class=\"header\">\n        <div class=\"title\">\n          ${this.hass.localize(\"ui.dialogs.more_info_control.logbook\")}\n        </div>\n        <a href=${this._showMoreHref} @click=${this._close}\n          >${this.hass.localize(\"ui.dialogs.more_info_control.show_more\")}</a\n        >\n      </div>\n      <ha-logbook\n        .hass=${this.hass}\n        .time=${this._time}\n        .entityIds=${this._entityIdAsList(this.entityId)}\n        narrow\n        no-icon\n        no-name\n        relative-time\n      ></ha-logbook>\n    `;\n  }\n\n  protected willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n\n    if (changedProps.has(\"entityId\") && this.entityId) {\n      this._showMoreHref = `/logbook?entity_id=${\n        this.entityId\n      }&start_date=${startOfYesterday().toISOString()}`;\n    }\n  }\n\n  private _close(): void {\n    setTimeout(() => fireEvent(this, \"closed\"), 500);\n  }\n\n  static get styles() {\n    return [\n      css`\n        ha-logbook {\n          --logbook-max-height: 250px;\n        }\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          ha-logbook {\n            --logbook-max-height: unset;\n          }\n        }\n        .header {\n          display: flex;\n          flex-direction: row;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 8px;\n        }\n        .header > a,\n        a:visited {\n          color: var(--primary-color);\n        }\n        .title {\n          font-family: var(--paper-font-title_-_font-family);\n          -webkit-font-smoothing: var(\n            --paper-font-title_-_-webkit-font-smoothing\n          );\n          font-size: var(--paper-font-subhead_-_font-size);\n          font-weight: var(--paper-font-title_-_font-weight);\n          letter-spacing: var(--paper-font-title_-_letter-spacing);\n          line-height: var(--paper-font-title_-_line-height);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-more-info-logbook\": MoreInfoLogbook;\n  }\n}\n"],"names":[],"sourceRoot":""}