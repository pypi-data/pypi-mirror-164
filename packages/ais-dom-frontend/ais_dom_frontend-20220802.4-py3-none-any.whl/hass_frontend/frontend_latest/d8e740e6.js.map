{"version":3,"file":"d8e740e6.js","mappings":";AAsBA;AACA;;AAGA;;;;;;;AAQA;;AAGA;;AAxBA;AAgCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAhCA;;;;;;;;;;;;;ACNA;;;;;;;;ACHA;;;ACmEA;AACA;AACA;AACA;AAGA;AAGA;;;;AAIA;AACA;AACA;AACA;;;AAKA;AACA;;AAEA;AACA;;;AAKA;AACA;;AAEA;AACA;;;AAKA;AACA;;AAEA;AACA;;AAIA;;AAGA;AACA;;AAEA;AACA;;;;AAMA;AACA;AACA;;;;AAIA;;;AAKA;;;;;;;;;;;;;;;;;;;;AAlIA;;;ACqCA;AACA;AACA;AACA;AAGA;AAGA;;;;AAIA;AACA;AACA;AACA;;;;;;;;;;;;;;AAvDA;;;ACuCA;AACA;AACA;AACA;AAGA;AAGA;;;;AAIA;AACA;AACA;AACA;;;;;;;;;;;;;;AAvDA;;;ACqDA;AACA;AACA;AACA;AAGA;AAGA;;;;AAIA;AACA;AACA;AACA;;;AAKA;;;;AAIA;;;;;AAOA;AACA;;;;AAIA;;;;;AAOA;AACA;;;;AAIA;;;;;AAOA;AACA;;;;;;;;;;;;;;;AA3GA;;;AC+DA;AACA;AACA;AACA;AAGA;AAGA;;;;AAIA;AACA;AACA;AACA;;;AAKA;AACA;;AAEA;AACA;;;AAKA;AACA;;AAEA;AACA;;AAIA;;AAGA;;AAIA;;;;;AAOA;AACA;;;;AAIA;;;;;AAOA;AACA;;;;;AAKA;AACA;;AAEA;AACA;;;;AAMA;AACA;AACA;AACA;;AAIA;;;;;;;;;;;AAtJA;;;;ACiDA;AAGA;AACA;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAKA;;AAIA;;AAIA;;;AAGA;AACA;AAGA;;;;AAIA;;AAIA;;;;;;;AASA;AAGA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAxGA;;;ACoDA;AACA;AACA;AACA;AAGA;AAGA;;;;AAIA;AACA;AACA;AACA;;AAIA;;AAGA;AACA;;;;AAIA;AACA;;;AAKA;AACA;;;;AAIA;AACA;;;AAKA;;AAIA;;;;;AAOA;AACA;;;;AAIA;;;;;AAOA;AACA;;;;;AAKA;AACA;AACA;AACA;;AAIA;;;;;;;;;;;;;AAvIA;;;AC2CA;AACA;AACA;AACA;AAGA;AAGA;;;;AAIA;AACA;AACA;AACA;;;AAKA;AACA;AACA;AACA;;;AAKA;;;AAKA;AACA;AACA;;;;;;;;;;;;;AAnFA","sources":["webpack://home-assistant-frontend/./src/components/ha-chip.ts","webpack://home-assistant-frontend/./src/components/ha-formfield.ts","webpack://home-assistant-frontend/./src/components/ha-input-helper-text.ts","webpack://home-assistant-frontend/./src/panels/config/helpers/forms/ha-counter-form.ts","webpack://home-assistant-frontend/./src/panels/config/helpers/forms/ha-input_boolean-form.ts","webpack://home-assistant-frontend/./src/panels/config/helpers/forms/ha-input_button-form.ts","webpack://home-assistant-frontend/./src/panels/config/helpers/forms/ha-input_datetime-form.ts","webpack://home-assistant-frontend/./src/panels/config/helpers/forms/ha-input_number-form.ts","webpack://home-assistant-frontend/./src/panels/config/helpers/forms/ha-input_select-form.ts","webpack://home-assistant-frontend/./src/panels/config/helpers/forms/ha-input_text-form.ts","webpack://home-assistant-frontend/./src/panels/config/helpers/forms/ha-timer-form.ts"],"sourcesContent":["// @ts-ignore\nimport chipStyles from \"@material/chips/dist/mdc.chips.min.css\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  TemplateResult,\n  unsafeCSS,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-chip\")\nexport class HaChip extends LitElement {\n  @property({ type: Boolean }) public hasIcon = false;\n\n  @property({ type: Boolean }) public hasTrailingIcon = false;\n\n  @property({ type: Boolean }) public noText = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"mdc-chip ${this.noText ? \"no-text\" : \"\"}\">\n        ${this.hasIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--leading\">\n              <slot name=\"icon\"></slot>\n            </div>`\n          : null}\n        <div class=\"mdc-chip__ripple\"></div>\n        <span role=\"gridcell\">\n          <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n            <span class=\"mdc-chip__text\"><slot></slot></span>\n          </span>\n        </span>\n        ${this.hasTrailingIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--trailing\">\n              <slot name=\"trailing-icon\"></slot>\n            </div>`\n          : null}\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ${unsafeCSS(chipStyles)}\n      .mdc-chip {\n        background-color: var(\n          --ha-chip-background-color,\n          rgba(var(--rgb-primary-text-color), 0.15)\n        );\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip.no-text {\n        padding: 0 10px;\n      }\n\n      .mdc-chip:hover {\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip__icon--leading,\n      .mdc-chip__icon--trailing {\n        --mdc-icon-size: 18px;\n        line-height: 14px;\n        color: var(--ha-chip-icon-color, var(--ha-chip-text-color));\n      }\n      .mdc-chip.mdc-chip--selected .mdc-chip__checkmark,\n      .mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden) {\n        margin-right: -4px;\n        margin-inline-start: -4px;\n        margin-inline-end: 4px;\n        direction: var(--direction);\n      }\n\n      span[role=\"gridcell\"] {\n        line-height: 14px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-chip\": HaChip;\n  }\n}\n","import { FormfieldBase } from \"@material/mwc-formfield/mwc-formfield-base\";\nimport { styles } from \"@material/mwc-formfield/mwc-formfield.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\nexport class HaFormfield extends FormfieldBase {\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      switch (input.tagName) {\n        case \"HA-CHECKBOX\":\n        case \"HA-RADIO\":\n          (input as any).checked = !(input as any).checked;\n          fireEvent(input, \"change\");\n          break;\n        default:\n          input.click();\n          break;\n      }\n    }\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host(:not([alignEnd])) ::slotted(ha-switch) {\n        margin-right: 10px;\n        margin-inline-end: 10px;\n        margin-inline-start: inline;\n      }\n      .mdc-form-field > label {\n        direction: var(--direction);\n        margin-inline-start: 0;\n        margin-inline-end: auto;\n        padding-inline-start: 4px;\n        padding-inline-end: 0;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-input-helper-text\")\nclass InputHelperText extends LitElement {\n  protected render(): TemplateResult {\n    return html`<slot></slot>`;\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n      color: var(--mdc-text-field-label-ink-color, rgba(0, 0, 0, 0.6));\n      font-size: 0.75rem;\n      padding-left: 16px;\n      padding-right: 16px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input-helper-text\": InputHelperText;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-picker\";\nimport \"../../../../components/ha-switch\";\nimport \"../../../../components/ha-textfield\";\nimport type { HaSwitch } from \"../../../../components/ha-switch\";\nimport { Counter } from \"../../../../data/counter\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-counter-form\")\nclass HaCounterForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public new?: boolean;\n\n  private _item?: Partial<Counter>;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  @state() private _maximum?: number;\n\n  @state() private _minimum?: number;\n\n  @state() private _restore?: boolean;\n\n  @state() private _initial?: number;\n\n  @state() private _step?: number;\n\n  set item(item: Counter) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._maximum = item.maximum ?? undefined;\n      this._minimum = item.minimum ?? undefined;\n      this._restore = item.restore ?? true;\n      this._step = item.step ?? 1;\n      this._initial = item.initial ?? 0;\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n      this._maximum = undefined;\n      this._minimum = undefined;\n      this._restore = true;\n      this._step = 1;\n      this._initial = 0;\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (\n        this.shadowRoot?.querySelector(\"[dialogInitialFocus]\") as HTMLElement\n      )?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <ha-textfield\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @input=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .errorMessage=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\n          .invalid=${nameInvalid}\n          dialogInitialFocus\n        ></ha-textfield>\n        <ha-icon-picker\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-picker>\n        <ha-textfield\n          .value=${this._minimum}\n          .configValue=${\"minimum\"}\n          type=\"number\"\n          @input=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.counter.minimum\"\n          )}\n        ></ha-textfield>\n        <ha-textfield\n          .value=${this._maximum}\n          .configValue=${\"maximum\"}\n          type=\"number\"\n          @input=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.counter.maximum\"\n          )}\n        ></ha-textfield>\n        <ha-textfield\n          .value=${this._initial}\n          .configValue=${\"initial\"}\n          type=\"number\"\n          @input=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.counter.initial\"\n          )}\n        ></ha-textfield>\n        ${this.hass.userData?.showAdvanced\n          ? html`\n              <ha-textfield\n                .value=${this._step}\n                .configValue=${\"step\"}\n                type=\"number\"\n                @input=${this._valueChanged}\n                .label=${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.counter.step\"\n                )}\n              ></ha-textfield>\n              <div class=\"row\">\n                <ha-switch\n                  .checked=${this._restore}\n                  .configValue=${\"restore\"}\n                  @change=${this._valueChanged}\n                >\n                </ha-switch>\n                <div>\n                  ${this.hass.localize(\n                    \"ui.dialogs.helper_settings.counter.restore\"\n                  )}\n                </div>\n              </div>\n            `\n          : \"\"}\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const target = ev.target as any;\n    const configValue = target.configValue;\n    const value =\n      target.type === \"number\"\n        ? target.value !== \"\"\n          ? Number(target.value)\n          : undefined\n        : target.localName === \"ha-switch\"\n        ? (ev.target as HaSwitch).checked\n        : ev.detail?.value || target.value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (value === undefined || value === \"\") {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        .row {\n          margin-top: 12px;\n          margin-bottom: 12px;\n          color: var(--primary-text-color);\n          display: flex;\n          align-items: center;\n        }\n        .row div {\n          margin-left: 16px;\n        }\n        ha-textfield {\n          display: block;\n          margin: 8px 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-counter-form\": HaCounterForm;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-picker\";\nimport \"../../../../components/ha-textfield\";\nimport { InputBoolean } from \"../../../../data/input_boolean\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-input_boolean-form\")\nclass HaInputBooleanForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public new?: boolean;\n\n  private _item?: InputBoolean;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  set item(item: InputBoolean) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (\n        this.shadowRoot?.querySelector(\"[dialogInitialFocus]\") as HTMLElement\n      )?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <ha-textfield\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @input=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .errorMessage=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\n          .invalid=${nameInvalid}\n          dialogInitialFocus\n        ></ha-textfield>\n        <ha-icon-picker\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-picker>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail?.value || (ev.target as any).value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (!value) {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        .row {\n          padding: 16px 0;\n        }\n        ha-textfield {\n          display: block;\n          margin: 8px 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_boolean-form\": HaInputBooleanForm;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-picker\";\nimport \"../../../../components/ha-textfield\";\nimport { InputButton } from \"../../../../data/input_button\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-input_button-form\")\nclass HaInputButtonForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public new?: boolean;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  private _item?: InputButton;\n\n  set item(item: InputButton) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (\n        this.shadowRoot?.querySelector(\"[dialogInitialFocus]\") as HTMLElement\n      )?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <ha-textfield\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @input=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .errorMessage=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\n          .invalid=${nameInvalid}\n          dialogInitialFocus\n        ></ha-textfield>\n        <ha-icon-picker\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-picker>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail?.value || (ev.target as any).value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (!value) {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        .row {\n          padding: 16px 0;\n        }\n        ha-textfield {\n          display: block;\n          margin: 8px 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_button-form\": HaInputButtonForm;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-formfield\";\nimport \"../../../../components/ha-icon-picker\";\nimport \"../../../../components/ha-radio\";\nimport \"../../../../components/ha-textfield\";\nimport type { HaRadio } from \"../../../../components/ha-radio\";\nimport { InputDateTime } from \"../../../../data/input_datetime\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-input_datetime-form\")\nclass HaInputDateTimeForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public new?: boolean;\n\n  private _item?: InputDateTime;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  @state() private _mode!: \"date\" | \"time\" | \"datetime\";\n\n  set item(item: InputDateTime) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._mode =\n        item.has_time && item.has_date\n          ? \"datetime\"\n          : item.has_time\n          ? \"time\"\n          : \"date\";\n      this._item.has_date =\n        !item.has_date && !item.has_time ? true : item.has_date;\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n      this._mode = \"date\";\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (\n        this.shadowRoot?.querySelector(\"[dialogInitialFocus]\") as HTMLElement\n      )?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <ha-textfield\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @input=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .errorMessage=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\n          .invalid=${nameInvalid}\n          dialogInitialFocus\n        ></ha-textfield>\n        <ha-icon-picker\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-picker>\n        <br />\n        ${this.hass.localize(\"ui.dialogs.helper_settings.input_datetime.mode\")}:\n        <br />\n\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.dialogs.helper_settings.input_datetime.date\"\n          )}\n        >\n          <ha-radio\n            name=\"mode\"\n            value=\"date\"\n            .checked=${this._mode === \"date\"}\n            @change=${this._modeChanged}\n          ></ha-radio>\n        </ha-formfield>\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.dialogs.helper_settings.input_datetime.time\"\n          )}\n        >\n          <ha-radio\n            name=\"mode\"\n            value=\"time\"\n            .checked=${this._mode === \"time\"}\n            @change=${this._modeChanged}\n          ></ha-radio>\n        </ha-formfield>\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.dialogs.helper_settings.input_datetime.datetime\"\n          )}\n        >\n          <ha-radio\n            name=\"mode\"\n            value=\"datetime\"\n            .checked=${this._mode === \"datetime\"}\n            @change=${this._modeChanged}\n          ></ha-radio>\n        </ha-formfield>\n      </div>\n    `;\n  }\n\n  private _modeChanged(ev: CustomEvent) {\n    const mode = (ev.target as HaRadio).value;\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this._item,\n        has_time: [\"time\", \"datetime\"].includes(mode),\n        has_date: [\"date\", \"datetime\"].includes(mode),\n      },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail?.value || (ev.target as any).value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (!value) {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        .row {\n          padding: 16px 0;\n        }\n        ha-textfield {\n          display: block;\n          margin: 8px 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_datetime-form\": HaInputDateTimeForm;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-picker\";\nimport \"../../../../components/ha-textfield\";\nimport { InputNumber } from \"../../../../data/input_number\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport \"../../../../components/ha-formfield\";\nimport \"../../../../components/ha-radio\";\nimport type { HaRadio } from \"../../../../components/ha-radio\";\n\n@customElement(\"ha-input_number-form\")\nclass HaInputNumberForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public new?: boolean;\n\n  private _item?: Partial<InputNumber>;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  @state() private _max?: number;\n\n  @state() private _min?: number;\n\n  @state() private _mode?: string;\n\n  @state() private _step?: number;\n\n  // eslint-disable-next-line: variable-name\n  @state() private _unit_of_measurement?: string;\n\n  set item(item: InputNumber) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._max = item.max ?? 100;\n      this._min = item.min ?? 0;\n      this._mode = item.mode || \"slider\";\n      this._step = item.step ?? 1;\n      this._unit_of_measurement = item.unit_of_measurement;\n    } else {\n      this._item = {\n        min: 0,\n        max: 100,\n      };\n      this._name = \"\";\n      this._icon = \"\";\n      this._max = 100;\n      this._min = 0;\n      this._mode = \"slider\";\n      this._step = 1;\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (\n        this.shadowRoot?.querySelector(\"[dialogInitialFocus]\") as HTMLElement\n      )?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <ha-textfield\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @input=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .errorMessage=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\n          .invalid=${nameInvalid}\n          dialogInitialFocus\n        ></ha-textfield>\n        <ha-icon-picker\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-picker>\n        <ha-textfield\n          .value=${this._min}\n          .configValue=${\"min\"}\n          type=\"number\"\n          @input=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.input_number.min\"\n          )}\n        ></ha-textfield>\n        <ha-textfield\n          .value=${this._max}\n          .configValue=${\"max\"}\n          type=\"number\"\n          @input=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.input_number.max\"\n          )}\n        ></ha-textfield>\n        ${this.hass.userData?.showAdvanced\n          ? html`\n              <div class=\"layout horizontal center justified\">\n                ${this.hass.localize(\n                  \"ui.dialogs.helper_settings.input_number.mode\"\n                )}\n                <ha-formfield\n                  .label=${this.hass.localize(\n                    \"ui.dialogs.helper_settings.input_number.slider\"\n                  )}\n                >\n                  <ha-radio\n                    name=\"mode\"\n                    value=\"slider\"\n                    .checked=${this._mode === \"slider\"}\n                    @change=${this._modeChanged}\n                  ></ha-radio>\n                </ha-formfield>\n                <ha-formfield\n                  .label=${this.hass.localize(\n                    \"ui.dialogs.helper_settings.input_number.box\"\n                  )}\n                >\n                  <ha-radio\n                    name=\"mode\"\n                    value=\"box\"\n                    .checked=${this._mode === \"box\"}\n                    @change=${this._modeChanged}\n                  ></ha-radio>\n                </ha-formfield>\n              </div>\n              <ha-textfield\n                .value=${this._step}\n                .configValue=${\"step\"}\n                type=\"number\"\n                @input=${this._valueChanged}\n                .label=${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.input_number.step\"\n                )}\n              ></ha-textfield>\n\n              <ha-textfield\n                .value=${this._unit_of_measurement || \"\"}\n                .configValue=${\"unit_of_measurement\"}\n                @input=${this._valueChanged}\n                .label=${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.input_number.unit_of_measurement\"\n                )}\n              ></ha-textfield>\n            `\n          : \"\"}\n      </div>\n    `;\n  }\n\n  private _modeChanged(ev: CustomEvent) {\n    fireEvent(this, \"value-changed\", {\n      value: { ...this._item, mode: (ev.target as HaRadio).value },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const target = ev.target as any;\n    const configValue = target.configValue;\n    const value =\n      target.type === \"number\"\n        ? Number(target.value)\n        : ev.detail?.value || target.value;\n\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (value === undefined || value === \"\") {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n\n        ha-textfield {\n          display: block;\n          margin-bottom: 8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_number-form\": HaInputNumberForm;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiDelete } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-button\";\nimport \"../../../../components/ha-icon-picker\";\nimport \"../../../../components/ha-textfield\";\nimport type { HaTextField } from \"../../../../components/ha-textfield\";\nimport type { InputSelect } from \"../../../../data/input_select\";\nimport { showConfirmationDialog } from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-input_select-form\")\nclass HaInputSelectForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public new?: boolean;\n\n  private _item?: InputSelect;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  @state() private _options: string[] = [];\n\n  @query(\"#option_input\", true) private _optionInput?: HaTextField;\n\n  set item(item: InputSelect) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._options = item.options || [];\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n      this._options = [];\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (\n        this.shadowRoot?.querySelector(\"[dialogInitialFocus]\") as HTMLElement\n      )?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <ha-textfield\n          dialogInitialFocus\n          .errorMessage=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\n          .value=${this._name}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .invalid=${nameInvalid}\n          .configValue=${\"name\"}\n          @input=${this._valueChanged}\n        ></ha-textfield>\n        <ha-icon-picker\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-picker>\n        <div class=\"header\">\n          ${this.hass!.localize(\n            \"ui.dialogs.helper_settings.input_select.options\"\n          )}:\n        </div>\n        ${this._options.length\n          ? this._options.map(\n              (option, index) => html`\n                <mwc-list-item class=\"option\" hasMeta>\n                  ${option}\n                  <ha-icon-button\n                    slot=\"meta\"\n                    .index=${index}\n                    .label=${this.hass.localize(\n                      \"ui.dialogs.helper_settings.input_select.remove_option\"\n                    )}\n                    @click=${this._removeOption}\n                    .path=${mdiDelete}\n                  ></ha-icon-button>\n                </mwc-list-item>\n              `\n            )\n          : html`\n              <mwc-list-item noninteractive>\n                ${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.input_select.no_options\"\n                )}\n              </mwc-list-item>\n            `}\n        <div class=\"layout horizontal center\">\n          <ha-textfield\n            class=\"flex-auto\"\n            id=\"option_input\"\n            .label=${this.hass!.localize(\n              \"ui.dialogs.helper_settings.input_select.add_option\"\n            )}\n            @keydown=${this._handleKeyAdd}\n          ></ha-textfield>\n          <mwc-button @click=${this._addOption}\n            >${this.hass!.localize(\n              \"ui.dialogs.helper_settings.input_select.add\"\n            )}</mwc-button\n          >\n        </div>\n      </div>\n    `;\n  }\n\n  private _handleKeyAdd(ev: KeyboardEvent) {\n    ev.stopPropagation();\n    if (ev.keyCode !== 13) {\n      return;\n    }\n    this._addOption();\n  }\n\n  private _addOption() {\n    const input = this._optionInput;\n    if (!input?.value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: { ...this._item, options: [...this._options, input.value] },\n    });\n    input.value = \"\";\n  }\n\n  private async _removeOption(ev: Event) {\n    const index = (ev.target as any).index;\n    if (\n      !(await showConfirmationDialog(this, {\n        title: \"Delete this item?\",\n        text: \"Are you sure you want to delete this item?\",\n      }))\n    ) {\n      return;\n    }\n    const options = [...this._options];\n    options.splice(index, 1);\n    fireEvent(this, \"value-changed\", {\n      value: { ...this._item, options },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail?.value || (ev.target as any).value;\n\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (!value) {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        .option {\n          border: 1px solid var(--divider-color);\n          border-radius: 4px;\n          margin-top: 4px;\n          --mdc-icon-button-size: 24px;\n        }\n        mwc-button {\n          margin-left: 8px;\n        }\n        ha-textfield {\n          display: block;\n          margin-bottom: 8px;\n        }\n        #option_input {\n          margin-top: 8px;\n        }\n        .header {\n          margin-top: 8px;\n          margin-bottom: 8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_select-form\": HaInputSelectForm;\n  }\n}\n","import \"../../../../components/ha-form/ha-form\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-picker\";\nimport \"../../../../components/ha-textfield\";\nimport type { HaRadio } from \"../../../../components/ha-radio\";\nimport { InputText } from \"../../../../data/input_text\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport \"../../../../components/ha-formfield\";\nimport \"../../../../components/ha-radio\";\n\n@customElement(\"ha-input_text-form\")\nclass HaInputTextForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public new?: boolean;\n\n  private _item?: InputText;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  @state() private _max?: number;\n\n  @state() private _min?: number;\n\n  @state() private _mode?: string;\n\n  @state() private _pattern?: string;\n\n  set item(item: InputText) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._max = item.max || 100;\n      this._min = item.min || 0;\n      this._mode = item.mode || \"text\";\n      this._pattern = item.pattern;\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n      this._max = 100;\n      this._min = 0;\n      this._mode = \"text\";\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (\n        this.shadowRoot?.querySelector(\"[dialogInitialFocus]\") as HTMLElement\n      )?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <ha-textfield\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @input=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .errorMessage=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\n          .invalid=${nameInvalid}\n          dialogInitialFocus\n        ></ha-textfield>\n        <ha-icon-picker\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-picker>\n        ${this.hass.userData?.showAdvanced\n          ? html`\n              <ha-textfield\n                .value=${this._min}\n                .configValue=${\"min\"}\n                type=\"number\"\n                min=\"0\"\n                max=\"255\"\n                @input=${this._valueChanged}\n                .label=${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.input_text.min\"\n                )}\n              ></ha-textfield>\n              <ha-textfield\n                .value=${this._max}\n                .configValue=${\"max\"}\n                min=\"0\"\n                max=\"255\"\n                type=\"number\"\n                @input=${this._valueChanged}\n                .label=${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.input_text.max\"\n                )}\n              ></ha-textfield>\n              <div class=\"layout horizontal center justified\">\n                ${this.hass.localize(\n                  \"ui.dialogs.helper_settings.input_text.mode\"\n                )}\n                <ha-formfield\n                  .label=${this.hass.localize(\n                    \"ui.dialogs.helper_settings.input_text.text\"\n                  )}\n                >\n                  <ha-radio\n                    name=\"mode\"\n                    value=\"text\"\n                    .checked=${this._mode === \"text\"}\n                    @change=${this._modeChanged}\n                  ></ha-radio>\n                </ha-formfield>\n                <ha-formfield\n                  .label=${this.hass.localize(\n                    \"ui.dialogs.helper_settings.input_text.password\"\n                  )}\n                >\n                  <ha-radio\n                    name=\"mode\"\n                    value=\"password\"\n                    .checked=${this._mode === \"password\"}\n                    @change=${this._modeChanged}\n                  ></ha-radio>\n                </ha-formfield>\n              </div>\n              <ha-textfield\n                .value=${this._pattern || \"\"}\n                .configValue=${\"pattern\"}\n                @input=${this._valueChanged}\n                .label=${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.input_text.pattern\"\n                )}\n              ></ha-textfield>\n            `\n          : \"\"}\n      </div>\n    `;\n  }\n\n  private _modeChanged(ev: CustomEvent) {\n    fireEvent(this, \"value-changed\", {\n      value: { ...this._item, mode: (ev.target as HaRadio).value },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail?.value || (ev.target as any).value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (!value) {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        .row {\n          padding: 16px 0;\n        }\n        ha-textfield {\n          display: block;\n          margin: 8px 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_text-form\": HaInputTextForm;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-picker\";\nimport \"../../../../components/ha-textfield\";\nimport { DurationDict, Timer } from \"../../../../data/timer\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-timer-form\")\nclass HaTimerForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public new?: boolean;\n\n  private _item?: Timer;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  @state() private _duration!: string | number | DurationDict;\n\n  @state() private _restore!: boolean;\n\n  set item(item: Timer) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._duration = item.duration || \"00:00:00\";\n      this._restore = item.restore || false;\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n      this._duration = \"00:00:00\";\n      this._restore = false;\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (\n        this.shadowRoot?.querySelector(\"[dialogInitialFocus]\") as HTMLElement\n      )?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <ha-textfield\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @input=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .errorMessage=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\n          .invalid=${nameInvalid}\n          dialogInitialFocus\n        ></ha-textfield>\n        <ha-icon-picker\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-picker>\n        <ha-textfield\n          .configValue=${\"duration\"}\n          .value=${this._duration}\n          @input=${this._valueChanged}\n          .label=${this.hass.localize(\n            \"ui.dialogs.helper_settings.timer.duration\"\n          )}\n        ></ha-textfield>\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.dialogs.helper_settings.timer.restore\"\n          )}\n        >\n          <ha-checkbox\n            .configValue=${\"restore\"}\n            .checked=${this._restore}\n            @click=${this._toggleRestore}\n          >\n          </ha-checkbox>\n        </ha-formfield>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail?.value || (ev.target as any).value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (!value) {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  private _toggleRestore() {\n    this._restore = !this._restore;\n    fireEvent(this, \"value-changed\", {\n      value: { ...this._item, restore: this._restore },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        ha-textfield {\n          display: block;\n          margin: 8px 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-timer-form\": HaTimerForm;\n  }\n}\n"],"names":[],"sourceRoot":""}