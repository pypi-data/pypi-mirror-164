{"version":3,"file":"e1a0dbab.js","mappings":";;;AAiCA;AACA;;;AAGA;;;;AAIA;AACA;;;;AAIA;;;;AAIA;AACA;;;AAGA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzCA;;AC4BA;AACA;AACA;;;AAGA;;;;AAKA;;;AAIA;AACA;;;AAIA;AACA;;AAGA;;AAGA;AACA;;AAEA;;AAjCA;;;;;;;;;;;;;AAvBA","sources":["webpack://home-assistant-frontend/./src/components/ha-expansion-panel.ts","webpack://home-assistant-frontend/./src/panels/config/devices/device-detail/integration-elements/zha/ha-device-info-zha.ts"],"sourcesContent":["import { mdiChevronDown } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { nextRender } from \"../common/util/render-status\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-expansion-panel\")\nclass HaExpansionPanel extends LitElement {\n  @property({ type: Boolean, reflect: true }) expanded = false;\n\n  @property({ type: Boolean, reflect: true }) outlined = false;\n\n  @property() header?: string;\n\n  @property() secondary?: string;\n\n  @state() _showContent = this.expanded;\n\n  @query(\".container\") private _container!: HTMLDivElement;\n\n  protected render(): TemplateResult {\n    return html`\n      <div\n        id=\"summary\"\n        @click=${this._toggleContainer}\n        @keydown=${this._toggleContainer}\n        role=\"button\"\n        tabindex=\"0\"\n        aria-expanded=${this.expanded}\n        aria-controls=\"sect1\"\n      >\n        <slot class=\"header\" name=\"header\">\n          ${this.header}\n          <slot class=\"secondary\" name=\"secondary\">${this.secondary}</slot>\n        </slot>\n        <ha-svg-icon\n          .path=${mdiChevronDown}\n          class=\"summary-icon ${classMap({ expanded: this.expanded })}\"\n        ></ha-svg-icon>\n      </div>\n      <div\n        class=\"container ${classMap({ expanded: this.expanded })}\"\n        @transitionend=${this._handleTransitionEnd}\n        role=\"region\"\n        aria-labelledby=\"summary\"\n        aria-hidden=${!this.expanded}\n        tabindex=\"-1\"\n      >\n        ${this._showContent ? html`<slot></slot>` : \"\"}\n      </div>\n    `;\n  }\n\n  protected willUpdate(changedProps: PropertyValues) {\n    if (changedProps.has(\"expanded\") && this.expanded) {\n      this._showContent = this.expanded;\n    }\n  }\n\n  private _handleTransitionEnd() {\n    this._container.style.removeProperty(\"height\");\n    this._showContent = this.expanded;\n  }\n\n  private async _toggleContainer(ev): Promise<void> {\n    if (ev.type === \"keydown\" && ev.key !== \"Enter\" && ev.key !== \" \") {\n      return;\n    }\n    ev.preventDefault();\n    const newExpanded = !this.expanded;\n    fireEvent(this, \"expanded-will-change\", { expanded: newExpanded });\n\n    if (newExpanded) {\n      this._showContent = true;\n      // allow for dynamic content to be rendered\n      await nextRender();\n    }\n\n    const scrollHeight = this._container.scrollHeight;\n    this._container.style.height = `${scrollHeight}px`;\n\n    if (!newExpanded) {\n      setTimeout(() => {\n        this._container.style.height = \"0px\";\n      }, 0);\n    }\n\n    this.expanded = newExpanded;\n    fireEvent(this, \"expanded-changed\", { expanded: this.expanded });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: 1px;\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n      }\n\n      #summary {\n        display: flex;\n        padding: var(--expansion-panel-summary-padding, 0 8px);\n        min-height: 48px;\n        align-items: center;\n        cursor: pointer;\n        overflow: hidden;\n        font-weight: 500;\n        outline: none;\n      }\n\n      #summary:focus {\n        background: var(--input-fill-color);\n      }\n\n      .summary-icon {\n        transition: transform 150ms cubic-bezier(0.4, 0, 0.2, 1);\n        margin-left: auto;\n        margin-inline-start: auto;\n        margin-inline-end: initial;\n        direction: var(--direction);\n      }\n\n      .summary-icon.expanded {\n        transform: rotate(180deg);\n      }\n\n      .container {\n        padding: var(--expansion-panel-content-padding, 0 8px);\n        overflow: hidden;\n        transition: height 300ms cubic-bezier(0.4, 0, 0.2, 1);\n        height: 0px;\n      }\n\n      .container.expanded {\n        height: auto;\n      }\n\n      .header {\n        display: block;\n      }\n\n      .secondary {\n        display: block;\n        color: var(--secondary-text-color);\n        font-size: 12px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-expansion-panel\": HaExpansionPanel;\n  }\n\n  // for fire event\n  interface HASSDomEvents {\n    \"expanded-changed\": {\n      expanded: boolean;\n    };\n    \"expanded-will-change\": {\n      expanded: boolean;\n    };\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../../../../components/ha-expansion-panel\";\nimport { DeviceRegistryEntry } from \"../../../../../../data/device_registry\";\nimport { fetchZHADevice, ZHADevice } from \"../../../../../../data/zha\";\nimport { haStyle } from \"../../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../../types\";\nimport { formatAsPaddedHex } from \"../../../../integrations/integration-panels/zha/functions\";\n\n@customElement(\"ha-device-info-zha\")\nexport class HaDeviceActionsZha extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public device!: DeviceRegistryEntry;\n\n  @state() private _zhaDevice?: ZHADevice;\n\n  protected updated(changedProperties: PropertyValues) {\n    if (changedProperties.has(\"device\")) {\n      const zigbeeConnection = this.device.connections.find(\n        (conn) => conn[0] === \"zigbee\"\n      );\n      if (!zigbeeConnection) {\n        return;\n      }\n      fetchZHADevice(this.hass, zigbeeConnection[1]).then((device) => {\n        this._zhaDevice = device;\n      });\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._zhaDevice) {\n      return html``;\n    }\n    return html`\n      <ha-expansion-panel header=\"Zigbee info\">\n        <div>IEEE: ${this._zhaDevice.ieee}</div>\n        <div>Nwk: ${formatAsPaddedHex(this._zhaDevice.nwk)}</div>\n        <div>Device Type: ${this._zhaDevice.device_type}</div>\n        <div>\n          LQI:\n          ${this._zhaDevice.lqi ||\n          this.hass!.localize(\"ui.dialogs.zha_device_info.unknown\")}\n        </div>\n        <div>\n          RSSI:\n          ${this._zhaDevice.rssi ||\n          this.hass!.localize(\"ui.dialogs.zha_device_info.unknown\")}\n        </div>\n        <div>\n          ${this.hass!.localize(\"ui.dialogs.zha_device_info.last_seen\")}:\n          ${this._zhaDevice.last_seen ||\n          this.hass!.localize(\"ui.dialogs.zha_device_info.unknown\")}\n        </div>\n        <div>\n          ${this.hass!.localize(\"ui.dialogs.zha_device_info.power_source\")}:\n          ${this._zhaDevice.power_source ||\n          this.hass!.localize(\"ui.dialogs.zha_device_info.unknown\")}\n        </div>\n        ${this._zhaDevice.quirk_applied\n          ? html`\n              <div>\n                ${this.hass!.localize(\"ui.dialogs.zha_device_info.quirk\")}:\n                ${this._zhaDevice.quirk_class}\n              </div>\n            `\n          : \"\"}\n      </ha-expansion-panel>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        h4 {\n          margin-bottom: 4px;\n        }\n        div {\n          word-break: break-all;\n          margin-top: 2px;\n        }\n        ha-expansion-panel {\n          --expansion-panel-summary-padding: 0;\n          --expansion-panel-content-padding: 0;\n          padding-top: 4px;\n        }\n      `,\n    ];\n  }\n}\n"],"names":[],"sourceRoot":""}