{"version":3,"file":"233b9334.js","mappings":";;AAaA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;;ACUA;AACA;;;AAGA;;;;AAIA;AACA;;;;AAIA;;;;AAIA;AACA;;;AAGA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzCA;;;;AC+DA;AACA;;;;AAMA;;;AAKA;;;;;AAKA;AACA;AACA;AACA;;;;AAMA;;AAIA;AACA;;;;;AAKA;;AAIA;;;;AAIA;;AAIA;;AAEA;;;AAIA;;AAIA;;AAEA;;;AAIA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA5GA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-expansion-panel.ts","webpack://home-assistant-frontend/./src/panels/config/hardware/dialog-hardware-available.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { mdiChevronDown } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { nextRender } from \"../common/util/render-status\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-expansion-panel\")\nclass HaExpansionPanel extends LitElement {\n  @property({ type: Boolean, reflect: true }) expanded = false;\n\n  @property({ type: Boolean, reflect: true }) outlined = false;\n\n  @property() header?: string;\n\n  @property() secondary?: string;\n\n  @state() _showContent = this.expanded;\n\n  @query(\".container\") private _container!: HTMLDivElement;\n\n  protected render(): TemplateResult {\n    return html`\n      <div\n        id=\"summary\"\n        @click=${this._toggleContainer}\n        @keydown=${this._toggleContainer}\n        role=\"button\"\n        tabindex=\"0\"\n        aria-expanded=${this.expanded}\n        aria-controls=\"sect1\"\n      >\n        <slot class=\"header\" name=\"header\">\n          ${this.header}\n          <slot class=\"secondary\" name=\"secondary\">${this.secondary}</slot>\n        </slot>\n        <ha-svg-icon\n          .path=${mdiChevronDown}\n          class=\"summary-icon ${classMap({ expanded: this.expanded })}\"\n        ></ha-svg-icon>\n      </div>\n      <div\n        class=\"container ${classMap({ expanded: this.expanded })}\"\n        @transitionend=${this._handleTransitionEnd}\n        role=\"region\"\n        aria-labelledby=\"summary\"\n        aria-hidden=${!this.expanded}\n        tabindex=\"-1\"\n      >\n        ${this._showContent ? html`<slot></slot>` : \"\"}\n      </div>\n    `;\n  }\n\n  protected willUpdate(changedProps: PropertyValues) {\n    if (changedProps.has(\"expanded\") && this.expanded) {\n      this._showContent = this.expanded;\n    }\n  }\n\n  private _handleTransitionEnd() {\n    this._container.style.removeProperty(\"height\");\n    this._showContent = this.expanded;\n  }\n\n  private async _toggleContainer(ev): Promise<void> {\n    if (ev.type === \"keydown\" && ev.key !== \"Enter\" && ev.key !== \" \") {\n      return;\n    }\n    ev.preventDefault();\n    const newExpanded = !this.expanded;\n    fireEvent(this, \"expanded-will-change\", { expanded: newExpanded });\n\n    if (newExpanded) {\n      this._showContent = true;\n      // allow for dynamic content to be rendered\n      await nextRender();\n    }\n\n    const scrollHeight = this._container.scrollHeight;\n    this._container.style.height = `${scrollHeight}px`;\n\n    if (!newExpanded) {\n      setTimeout(() => {\n        this._container.style.height = \"0px\";\n      }, 0);\n    }\n\n    this.expanded = newExpanded;\n    fireEvent(this, \"expanded-changed\", { expanded: this.expanded });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: 1px;\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n      }\n\n      #summary {\n        display: flex;\n        padding: var(--expansion-panel-summary-padding, 0 8px);\n        min-height: 48px;\n        align-items: center;\n        cursor: pointer;\n        overflow: hidden;\n        font-weight: 500;\n        outline: none;\n      }\n\n      #summary:focus {\n        background: var(--input-fill-color);\n      }\n\n      .summary-icon {\n        transition: transform 150ms cubic-bezier(0.4, 0, 0.2, 1);\n        margin-left: auto;\n        margin-inline-start: auto;\n        margin-inline-end: initial;\n        direction: var(--direction);\n      }\n\n      .summary-icon.expanded {\n        transform: rotate(180deg);\n      }\n\n      .container {\n        padding: var(--expansion-panel-content-padding, 0 8px);\n        overflow: hidden;\n        transition: height 300ms cubic-bezier(0.4, 0, 0.2, 1);\n        height: 0px;\n      }\n\n      .container.expanded {\n        height: auto;\n      }\n\n      .header {\n        display: block;\n      }\n\n      .secondary {\n        display: block;\n        color: var(--secondary-text-color);\n        font-size: 12px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-expansion-panel\": HaExpansionPanel;\n  }\n\n  // for fire event\n  interface HASSDomEvents {\n    \"expanded-changed\": {\n      expanded: boolean;\n    };\n    \"expanded-will-change\": {\n      expanded: boolean;\n    };\n  }\n}\n","import { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { stringCompare } from \"../../../common/string/compare\";\nimport \"../../../components/ha-dialog\";\nimport \"../../../components/ha-expansion-panel\";\nimport \"../../../components/ha-icon-next\";\nimport \"../../../components/search-input\";\nimport { extractApiErrorMessage } from \"../../../data/hassio/common\";\nimport {\n  fetchHassioHardwareInfo,\n  HassioHardwareInfo,\n} from \"../../../data/hassio/hardware\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport type { HassDialog } from \"../../../dialogs/make-dialog-manager\";\nimport { dump } from \"../../../resources/js-yaml-dump\";\nimport { haStyle, haStyleDialog } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\n\nconst _filterDevices = memoizeOne(\n  (showAdvanced: boolean, hardware: HassioHardwareInfo, filter: string) =>\n    hardware.devices\n      .filter(\n        (device) =>\n          (showAdvanced ||\n            [\"tty\", \"gpio\", \"input\"].includes(device.subsystem)) &&\n          (device.by_id?.toLowerCase().includes(filter) ||\n            device.name.toLowerCase().includes(filter) ||\n            device.dev_path.toLocaleLowerCase().includes(filter) ||\n            JSON.stringify(device.attributes)\n              .toLocaleLowerCase()\n              .includes(filter))\n      )\n      .sort((a, b) => stringCompare(a.name, b.name))\n);\n\n@customElement(\"ha-dialog-hardware-available\")\nclass DialogHardwareAvailable extends LitElement implements HassDialog {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _hardware?: HassioHardwareInfo;\n\n  @state() private _filter?: string;\n\n  public async showDialog(): Promise<Promise<void>> {\n    try {\n      this._hardware = await fetchHassioHardwareInfo(this.hass);\n    } catch (err: any) {\n      await showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.hardware.available_hardware.failed_to_get\"\n        ),\n        text: extractApiErrorMessage(err),\n      });\n    }\n  }\n\n  public closeDialog(): void {\n    this._hardware = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._hardware) {\n      return html``;\n    }\n\n    const devices = _filterDevices(\n      this.hass.userData?.showAdvanced || false,\n      this._hardware,\n      (this._filter || \"\").toLowerCase()\n    );\n\n    return html`\n      <ha-dialog\n        open\n        hideActions\n        @closed=${this.closeDialog}\n        .heading=${this.hass.localize(\n          \"ui.panel.config.hardware.available_hardware.title\"\n        )}\n      >\n        <div class=\"header\" slot=\"heading\">\n          <h2>\n            ${this.hass.localize(\n              \"ui.panel.config.hardware.available_hardware.title\"\n            )}\n          </h2>\n          <ha-icon-button\n            .label=${this.hass.localize(\"ui.common.close\")}\n            .path=${mdiClose}\n            dialogAction=\"close\"\n          ></ha-icon-button>\n          <search-input\n            .hass=${this.hass}\n            .filter=${this._filter}\n            @value-changed=${this._handleSearchChange}\n            .label=${this.hass.localize(\n              \"ui.panel.config.hardware.available_hardware.search\"\n            )}\n          >\n          </search-input>\n        </div>\n        ${devices.map(\n          (device) =>\n            html`\n              <ha-expansion-panel\n                .header=${device.name}\n                .secondary=${device.by_id || undefined}\n                outlined\n              >\n                <div class=\"device-property\">\n                  <span>\n                    ${this.hass.localize(\n                      \"ui.panel.config.hardware.available_hardware.subsystem\"\n                    )}:\n                  </span>\n                  <span>${device.subsystem}</span>\n                </div>\n                <div class=\"device-property\">\n                  <span>\n                    ${this.hass.localize(\n                      \"ui.panel.config.hardware.available_hardware.device_path\"\n                    )}:\n                  </span>\n                  <code>${device.dev_path}</code>\n                </div>\n                ${device.by_id\n                  ? html`\n                      <div class=\"device-property\">\n                        <span>\n                          ${this.hass.localize(\n                            \"ui.panel.config.hardware.available_hardware.id\"\n                          )}:\n                        </span>\n                        <code>${device.by_id}</code>\n                      </div>\n                    `\n                  : \"\"}\n                <div class=\"attributes\">\n                  <span>\n                    ${this.hass.localize(\n                      \"ui.panel.config.hardware.available_hardware.attributes\"\n                    )}:\n                  </span>\n                  <pre>${dump(device.attributes, { indent: 2 })}</pre>\n                </div>\n              </ha-expansion-panel>\n            `\n        )}\n      </ha-dialog>\n    `;\n  }\n\n  private _handleSearchChange(ev: CustomEvent) {\n    this._filter = ev.detail.value;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        ha-icon-button {\n          position: absolute;\n          right: 16px;\n          top: 10px;\n          text-decoration: none;\n          color: var(--primary-text-color);\n        }\n        h2 {\n          margin: 18px 42px 0 18px;\n          color: var(--primary-text-color);\n        }\n        ha-expansion-panel {\n          margin: 4px 0;\n        }\n        pre,\n        code {\n          background-color: var(--markdown-code-background-color, none);\n          border-radius: 3px;\n        }\n        pre {\n          padding: 16px;\n          overflow: auto;\n          line-height: 1.45;\n          font-family: var(--code-font-family, monospace);\n        }\n        code {\n          font-size: 85%;\n          padding: 0.2em 0.4em;\n        }\n        search-input {\n          margin: 8px 16px 0;\n          display: block;\n        }\n        .device-property {\n          display: flex;\n          justify-content: space-between;\n        }\n        .attributes {\n          margin-top: 12px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog-hardware-available\": DialogHardwareAvailable;\n  }\n}\n"],"names":[],"sourceRoot":""}