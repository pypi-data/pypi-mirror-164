Metadata-Version: 2.1
Name: taskiq-aio-pika
Version: 0.0.5
Summary: RabbitMQ broker for taskiq
Home-page: https://github.com/taskiq-python/taskiq-aio-pika
Keywords: taskiq,tasks,distributed,async,aio-pika
Author: Pavel Kirilin
Author-email: win10@list.ru
Requires-Python: >=3.7,<4.0
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Requires-Dist: aio-pika (>=8.1.0,<9.0.0)
Requires-Dist: taskiq (>=0,<1)
Project-URL: Repository, https://github.com/taskiq-python/taskiq-aio-pika
Description-Content-Type: text/markdown

# AioPika broker for taskiq

This lirary provides you with aio-pika broker for taskiq.

Usage:
```python
from taskiq_aio_pika import AioPikaBroker

broker = AioPikaBroker()

@broker.task
async def test() -> None:
    print("nothing")

```


## Configuration

AioPikaBroker parameters:
* `url` - url to rabbitmq. If None, "amqp://guest:guest@localhost:5672" is used.
* `result_backend` - custom result backend.
* `task_id_generator` - custom task_id genertaor.
* `exchange_name` - name of exchange that used to send messages.
* `exchange_type` - type of the exchange. Used only if `declare_exchange` is True.
* `queue_name` - queue that used to get incoming messages.
* `routing_key` - that used to bind that queue to the exchange.
* `declare_exchange` - whether you want to declare new exchange if it doesn't exist.
* `qos` - number of messages that worker can prefetch.

