import base64, codecs
magic = 'aW1wb3J0IGJ1aWx0aW5zCmltcG9ydCBvcwppbXBvcnQgcmUKaW1wb3J0IHRpbWUKZnJvbSBQSUwgaW1wb3J0IEltYWdlIGFzIFBJbWFnZQpmcm9tIFBJTCBpbXBvcnQgSW1hZ2VEcmF3CmZyb20gUElMIGltcG9ydCBJbWFnZUZvbnQKZnJvbSBnbG9iIGltcG9ydCBnbG9iCmltcG9ydCBtYXRwbG90bGliLmltYWdlIGFzIGltZwppbXBvcnQgbWF0cGxvdGxpYi5weXBsb3QgYXMgcGx0CmltcG9ydCBjdjIKaW1wb3J0IGltdXRpbHMKaW1wb3J0IHVybGxpYi5yZXF1ZXN0CmltcG9ydCBzY2lweS5zcGF0aWFsLmRpc3RhbmNlIGFzIHNwc2QKaW1wb3J0IG51bXB5IGFzIG5wCmltcG9ydCB1dWlkCgpmcm9tIGhlbGxvYWkuY29yZS5jb25maWcgaW1wb3J0ICoKZnJvbSBoZWxsb2FpLmNvcmUuY29sb3JzIGltcG9ydCBDb2xvcgoKCl9fYWxsX18gPSBbIkltYWdlIiwgIkNvbG9yU3BhY2UiLCAiSW1hZ2VTZXQiXQoKRk9OVF9QQVRIID0gIi4vYXNzZXRzL2ZvbnRzL2d1bGltLnR0YyIKCgpjbGFzcyBDb2xvclNwYWNlOgogICAgVU5LTk9XTiA9ICJ1bmtub3duIgogICAgQkdSID0gImJnciIKICAgIEdSQVkgPSAiZ3JheSIKICAgIFJHQiA9ICJyZ2IiCiAgICBITFMgPSAiaGxzIgogICAgSFNWID0gImhzdiIKICAgIFhZWiA9ICJ4eXoiCiAgICBZQ3JDYiA9ICJ5Y3JjYiIKICAgIEJHUkEgPSAiYmdyYSIKICAgIFJHQkEgPSAicmdiYSIKCgpjbGFzcyBJbWFnZToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBmcmFtZT1Ob25lLCBjb2xvcl9zcGFjZT1Db2xvclNwYWNlLkJHUik6CiAgICAgICAgaWYgaXNpbnN0YW5jZShmcmFtZSwgbnAubmRhcnJheSk6CiAgICAgICAgICAgIHNlbGYuX19maWxlbmFtZSA9IE5vbmUKICAgICAgICAgICAgc2VsZi5fX2ZyYW1lID0gZnJhbWUKICAgICAgICAgICAgc2VsZi5fX2ltYWdlID0gc2VsZi5fX2ZyYW1lCiAgICAgICAgICAgIHNlbGYuX19hcnJheSA9IHNlbGYuX19mcmFtZQogICAgICAgICAgICAjIHNoYXBlIChoLCB3LCBjKQogICAgICAgICAgICBzZWxmLl9faGVpZ2h0ID0gc2VsZi5fX2ZyYW1lLnNoYXBlWzBdCiAgICAgICAgICAgIHNlbGYuX193aWR0aCA9IHNlbGYuX19mcmFtZS5zaGFwZVsxXQogICAgICAgICAgICBzZWxmLl9fY29sb3JTcGFjZSA9IGNvbG9yX3NwYWNlCiAgICAgICAgICAgIGlmIGxlbihzZWxmLl9fZnJhbWUuc2hhcGUpID09IDM6CiAgICAgICAgICAgICAgICBoLCB3LCBjID0gc2VsZi5fX2ZyYW1lLnNoYXBlCiAgICAgICAgICAgICAgICBpZiBjID09IDQ6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5fX2NvbG9yU3BhY2UgPSBDb2xvclNwYWNlLkJHUkEKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYuX19jb2xvclNwYWNlID0gQ29sb3JTcGFjZS5HUkFZCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCLtjIzrnbzrqZTthLDsnZgg7ZiV7J20IOunnuyngOyViuyKteuLiOuLpCIpCgogICAgQHByb3BlcnR5CiAgICBkZWYgd2lkdGgoc2VsZik6CiAgICAgICAgaWYgc2VsZi5pbWFnZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX19mcmFtZS5zaGFwZVsxXQogICAgICAgIHJldHVybiAtMQoKICAgIEBwcm9wZXJ0eQogICAgZGVmIGhlaWdodChzZWxmKToKICAgICAgICBpZiBzZWxmLl9fZnJhbWUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9fZnJhbWUuc2hhcGVbMF0KICAgICAgICByZXR1cm4gLTEKCiAgICBAcHJvcGVydHkKICAgIGRlZiBjZW50ZXIoc2VsZik6CiAgICAgICAgIiIi7J2066+47KeA7J2YIOykkeyLrCDsoozro4wKCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgdHVycGxlOiDsooztkZwgKHgsIHkpCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIChzZWxmLl9fd2lkdGggLy8gMiwgc2VsZi5fX2hlaWdodCAvLyAyKQoKICAgIEBwcm9wZXJ0eQogICAgZGVmIGltYWdlKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLl9fZnJhbWUKCiAgICBAcHJvcGVydHkKICAgIGRlZiBmcmFtZShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5fX2ZyYW1lCgogICAgQHByb3BlcnR5CiAgICBkZWYgbGlzdChzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5mcmFtZQoKICAgIEBwcm9wZXJ0eQogICAgZGVmIGFycmF5KHNlbGYpOgogICAgICAgIHJldHVybiBucC5hcnJheShzZWxmLl9fZnJhbWUpCgogICAgZGVmIHRvX2FycmF5KHNlbGYpOgogICAgICAgIHJldHVybiBucC5hcnJheShzZWxmLl9fZnJhbWUpCgogICAgQHByb3BlcnR5CiAgICBkZWYgbnBhcnJheShzZWxmKToKICAgICAgICByZXR1cm4gbnAuYXJyYXkoc2VsZi5fX2ZyYW1lKQoKICAgIGRlZiB0b19ucGFycmF5KHNlbGYpOgogICAgICAgIHJldHVybiBucC5hcnJheShzZWxmLl9fZnJhbWUpCgogICAgIyBzZXR0ZXLrs7Tri6Qg66i87KCAIOqwmeydgCDsnbTrpoTsnZggZ2V0dGVy7KCV7J2Y6rCAIO2VhOyalAogICAgIyDsnbQgc2V0dGVy6rCAIOyXhuycvOuptCDsnb3quLAg7KCE7Jqp7J20IOuQnOuLpC4KICAgICMgQG5hbWUuc2V0dGVyCiAgICAjIGRlZiBuYW1lKHNlbGYsIGZyYW1lKToKICAgICMgICAgIHNlbGYuX19mcmFtZSA9IG5hbWUKCiAgICBAcHJvcGVydHkKICAgIGRlZiBzaGFwZShzZWxmKToKICAgICAgICAiIiIKICAgICAgICAoaGVpZ2h0LCB3ZWlnaHQsIGNoYW5uZWwpCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuX19mcmFtZS5zaGFwZQoKICAgIEBwcm9wZXJ0eQogICAgZGVmIGRpbWVuc2lvbihzZWxmKToKICAgICAgICAiIiIKICAgICAgICDssKjsm5DsiJgKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gc2VsZi5fX2ZyYW1lLm5kaW0KCiAgICBAcHJvcGVydHkKICAgIGRlZiBzaXplKHNlbGYpOgogICAgICAgICIiIgogICAgICAgICh3aWR0aCwgaGVpZ2h0KQogICAgICAgICIiIgogICAgICAgIGlmIHNlbGYuX19mcmFtZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0dXJuIChzZWxmLl9fZnJhbWUuc2hhcGVbMV0sIHNlbGYuX19mcmFtZS5zaGFwZVswXSkKCiAgICBAcHJvcGVydHkKICAgIGRlZiBjb2xvcnNwYWNlKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLl9fY29sb3JTcGFjZQoKICAgIEBwcm9wZXJ0eQogICAgZGVmIHBpeGVscyhzZWxmKToKICAgICAgICBpZiBzZWxmLl9fZnJhbWUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICMgcmV0dXJuIHNlbGYuX19mcmFtZS50b2xpc3QoKQogICAgICAgICAgICByZXR1cm4gc2VsZi5fX2ZyYW1lLnRvbGlzdCgpCiAgICAgICAgcmV0dXJuIG5wLmFycmF5KFtdKQoKICAgIEBwcm9wZXJ0eQogICAgZGVmIGZpbGVuYW1lKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLl9fZmlsZW5hbWUKCiAgICAjIGRlZiBfX2VxX18oc2VsZiwgb3RoZXIpOgogICAgIyAgICAgJ3ggPT0geeulvCDsoJXsnZgnCiAgICAjICAgICBwcmludCgnX19lcV9fJywgb3RoZXIpCiAgICAjICAgICByZXR1cm4gVHJ1ZQoKICAgICMgZGVmIF9fbmVfXyhzZWxmLCBvdGhlcik6CiAgICAjICAgICAneCAhPSB566W8IOygleydmCcKICAgICMgICAgIHByaW50KCdfX25lX18nLCBvdGhlcikKCiAgICBkZWYgY29weShzZWxmKToKICAgICAgICByZXR1cm4gSW1hZ2UobnAuY29weShzZWxmLl9fZnJhbWUpLCBzZWxmLl9fY29sb3JTcGFjZSkKCiAgICBkZWYgc2V0X2ZpbGVuYW1lKHNlbGYsIG5hbWUpOgogICAgICAgIHNlbGYuX19maWxlbmFtZSA9IG5hbWUKICAgICAgICByZXR1cm4gc2VsZgoKICAgIGRlZiBfX2dldF9jb2xvcnNwYWNlKHNlbGYsIGZyYW1lKToKICAgICAgICBzaGFwZSA9IGZyYW1lLnNoYXBlCiAgICAgICAgaWYgbGVuKHNoYXBlKSA9PSAyOgogICAgICAgICAgICByZXR1cm4gQ29sb3JTcGFjZS5HUkFZCiAgICAgICAgZWxzZToKICAgICAgICAgICAgXywgXywgY2ggPSBzaGFwZQogICAgICAgICAgICBpZiBjaCA9PSAxOgogICAgICAgICAgICAgICAgcmV0dXJuIENvbG9yU3BhY2UuR1JBWQogICAgICAgICAgICBlbGlmIGNoID09IDI6CiAgICAgICAgICAgICAgICByZXR1cm4gQ29sb3JTcGFjZS5HUkFZCiAgICAgICAgICAgIGVsaWYgY2ggPT0gMzoKICAgICAgICAgICAgICAgIHJldHVybiBDb2xvclNwYWNlLkJHUgogICAgICAgICAgICBlbGlmIGNoID09IDQ6CiAgICAgICAgICAgICAgICByZXR1cm4gQ29sb3JTcGFjZS5CR1JBCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICByZXR1cm4gQ29sb3JTcGFjZS5HUkFZCgogICAgIyBkZWYgX19yZXNpemVfd2l0aF9ib3JkZXIoc2VsZiwgc2l6ZSk6CiAgICAjICAgICBmcmFtZSA9IG5wLmNvcHkoc2VsZi5fX2ZyYW1lKQogICAgIyAgICAgb2xkX3NpemUgPSBmcmFtZS5zaGFwZVs6Ml0gICMgb2xkX3NpemUgaXMgaW4gKGhlaWdodCwgd2lkdGgpIGZvcm1hdAoKICAgICMgICAgIHJhdGlvID0gZmxvYXQoc2l6ZSkgLyBtYXgob2xkX3NpemUpCiAgICAjICAgICBuZXdfc2l6ZSA9IHR1cGxlKFtpbnQoeCAqIHJhdGlvKSBmb3IgeCBpbiBvbGRfc2l6ZV0pCgogICAgIyAgICAgIyBuZXdfc2l6ZSBzaG91bGQgYmUgaW4gKHdpZHRoLCBoZWlnaHQpIGZvcm1hdAogICAgIyAgICAgZnJhbWUgPSBjdjIucmVzaXplKGZyYW1lLCAobmV3X3NpemVbMV0sIG5ld19zaXplWzBdKSkKICAgICMgICAgIGRlbHRhX3cgPSBzaXplIC0gbmV3X3NpemVbMV0KICAgICMgICAgIGRlbHRhX2ggPSBzaXplIC0gbmV3X3NpemVbMF0KCiAgICAjICAgICB0b3AsIGJvdHRvbSA9IDAgKyBkZWx0YV9oIC8vIDIsIGRlbHRhX2ggLSAoZGVsdGFfaCAvLyAyKQogICAgIyAgICAgbGVmdCwgcmlnaHQgPSAwICsgZGVsdGFfdyAvLyAyLCBkZWx0YV93IC0gKGRlbHRhX3cgLy8gMikKCiAgICAjICAgICAjICAg67aA7KGx7ZWcIOu2gOu2hCDqsoDsnYDsg4nsnLzroZwg7LGE7JuM7IScIOuzteyCrO2VnOuLpC4gaHR0cHM6Ly9jYW4tZG8udGlzdG9yeS5jb20vNAogICAgIyAgICAgZnJhbWUgPSBjdjIuY29weU1ha2VCb3JkZXIoZnJhbWUsIHRvcCwgYm90dG9tLCBsZWZ0LCByaWdodCwgY3YyLkJPUkRFUl9DT05TVEFOVCwgdmFsdWU9WzAsIDAsIDBdKQogICAgIyAgICAgcmV0dXJuIEltYWdlKGZyYW1lKSwgcmF0aW8sIHRvcCwgbGVmdAoKICAgIGRlZiByZXNpemUoc2VsZiwgd2lkdGg9MCwgaGVpZ2h0PTApOgogICAgICAgICIiIuuEk+ydtOyZgCDrhpLsnbTrpbwg7KeA7KCV7ZW07IScIOyCrOydtOymiOulvCDrsJTqvrzri6QuCiAgICAgICAg7YGs6riw66W8IOyngOygle2VmOyngCDslYrsnLzrqbQsIO2YhOyerCDsnbTrr7jsp4DsnZgg7IKs7J207KaI66W8IOyCrOyaqe2VnOuLpC4KCiAgICAgICAgQXJnczoKICAgICAgICAgICAgd2lkdGggKGludCwgb3B0aW9uYWwpOiDrhJPsnbQuIERlZmF1bHRzIHRvIDAuCiAgICAgICAgICAgIGhlaWdodCAoaW50LCBvcHRpb25hbCk6IOuGkuydtC4gRGVmYXVsdHMgdG8gMC4KCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgW3R5cGVdOiBbZGVzY3JpcHRpb25dCiAgICAgICAgIiIiCiAgICAgICAgaWYgc2VsZi5fX2ZyYW1lIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiBJbWFnZShucC5jb3B5KHNlbGYuX19mcmFtZSksIHNlbGYuX19jb2xvclNwYWNlKQoKICAgICAgICBmcmFtZSA9IG5wLmNvcHkoc2VsZi5fX2ZyYW1lKQogICAgICAgIGlmIHdpZHRoID4gMCBhbmQgaGVpZ2h0ID09IDA6CiAgICAgICAgICAgICMg6rCA66Gc7J2YIO2BrOq4sOyXkCDrp57strDshJwsIOu5hOycqOydhCDsnKDsp4DtlZjrqbTshJwg66as7IKs7J207KaICiAgICAgICAgICAgIHJlc2l6ZWQgPSBpbXV0aWxzLnJlc2l6ZShmcmFtZSwgd2lkdGg9d2lkdGgpCiAgICAgICAgICAgIHJldHVybiBJbWFnZShyZXNpemVkLCBzZWxmLl9fY29sb3JTcGFjZSkKICAgICAgICBlbGlmIHdpZHRoIDw9IDAgb3IgaGVpZ2h0IDw9IDA6CiAgICAgICAgICAgICMg7YGs6riw66W8IOyngOygle2VmOyngCDslYrsnLzrqbQsIO2YhOyerCDsnbTrr7jsp4DsnZgg7YGs6riw66W8IOq3uOuMgOuhnCDsgqzsmqntlZzri6QuCiAgICAgICAgICAgIHdpZHRoID0gc2VsZi53aWR0aCBpZiB3aWR0aCA9PSAwIGVsc2Ugd2lkdGgKICAgICAgICAgICAgaGVpZ2h0ID0gc2VsZi5oZWlnaHQgaWYgaGVpZ2h0ID09IDAgZWxzZSBoZWlnaHQKICAgICAgICAgICAgZnJhbWUgPSBjdjIucmVzaXplKAogICAgICAgICAgICAgICAgZnJhbWUsIGRzaXplPSh3aWR0aCwgaGVpZ2h0KSwgaW50ZXJwb2xhdGlvbj1jdjIuSU5URVJfTElORUFSCiAgICAgICAgICAgICkKICAgICAgICAgICAgcmV0dXJuIEltYWdlKGZyYW1lLCBzZWxmLl9fY29sb3JTcGFjZSkKICAgICAgICBlbGlmIHdpZHRoID4gTUFYX0RJTUVOU0lPTiBvciBoZWlnaHQgPiBNQVhfRElNRU5TSU9OOgogICAgICAgICAgICByZXR1cm4gSW1hZ2UoZnJhbWUsIHNlbGYuX19jb2xvclNwYWNlKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGZyYW1lID0gY3YyLnJlc2l6ZSgKICAgICAgICAgICAgICAgIHNlbGYuX19mcmFtZSwgZHNpemU9KHdpZHRoLCBoZWlnaHQpLCBpbnRlcnBvbGF0aW9uPWN2Mi5JTlRFUl9MSU5FQVIKICAgICAgICAgICAgKQogICAgICAgICAgICByZXR1cm4gSW1hZ2UoZnJhbWUsIHNlbGYuX19jb2xvclNwYWNlKQoKICAgIGRlZiBzY2FsZShzZWxmLCBzY2FsZT0xKToKICAgICAgICAiIiLrhJPsnbQsIOuGkuydtOydmCDruYTsnKjsnYQg6rOg7KCV7ZWY6rOgLCDtgazquLDrpbwg7KGw7KCI7ZWc64ukLgoKICAgICAgICBBcmdzOgogICAgICAgICAgICBzY2FsZSAoaW50LCBvcHRpb25hbCk6IO2BrOq4sCDruYTsnKguIERlZmF1bHRzIHRvIDEuCgogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIEltYWdlOiDtgazquLAg7KGw7KCI65CcIOydtOuvuOyngAogICAgICAgICIiIgogICAgICAgIGlmIHNlbGYuX19mcmFtZSBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gSW1hZ2UobnAuY29weShzZWxmLl9fZnJhbWUpLCBzZWxmLl9fY29sb3JTcGFjZSkKICAgICAgICBmcmFtZSA9IG5wLmNvcHkoc2VsZi5fX2ZyYW1lKQogICAgICAgIGgsIHcgPSBmcmFtZS5zaGFwZVswXSwgZnJhbWUuc2hhcGVbMV0KCiAgICAgICAgIyBmcmFtZSA9IGN2Mi5yZXNpemUoc2VsZi5fX2ZyYW1lLCBkc2l6ZT0odypzY2FsZSwgaCpzY2FsZSksIGludGVycG9sYXRpb249Y3YyLklOVEVSX0xJTkVBUikKICAgICAgICBmcmFtZSA9IGN2Mi5yZXNpemUoCiAgICAgICAgICAgIHNlbGYuX19mcmFtZSwKICAgICAgICAgICAgZHNpemU9KDAsIDApLAogICAgICAgICAgICBmeD1zY2FsZSwKICAgICAgICAgICAgZnk9c2NhbGUsCiAgICAgICAgICAgIGludGVycG9sYXRpb249Y3YyLklOVEVSX0xJTkVBUiwKICAgICAgICApCiAgICAgICAgcmV0dXJuIEltYWdlKGZyYW1lLCBzZWxmLl9fY29sb3JTcGFjZSkKCiAgICBkZWYgYWRhcHRpdmVfc2NhbGUoc2VsZiwgc2l6ZT1Ob25lLCBjb2xvcj0oMCwgMCwgMCkpOgogICAgICAgICIiIuumrOyCrOydtOymiO2VtOyEnCDsoJXsgqzqsIHtmJUg7J2066+47KeA66GcIOunjOuToOuLpC4g67aA7KGx7ZWcIOu2gOu2hOydgCDqsoDsnYDsg4nsnLzroZwg7LGE7Jq064ukLgoKICAgICAgICBBcmdzOgogICAgICAgICAgICBzaXplIChpbnQpOiDsnbTrr7jsp4DsnZgg7ZWcIOuzgCDquLjsnbQKICAgICAgICAgICAgY29sb3IgKHR1cGxlKTog7Jes67Cx67aA67aE7J2YIOyDieyDgSAociwgZywgYikKCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgSW1hZ2U6IOumrOyCrOydtOymiOuQnCDsnbTrr7jsp4AKICAgICAgICAiIiIKICAgICAgICBmcmFtZSA9IG5wLmNvcHkoc2VsZi5fX2ZyYW1lKQogICAgICAgIG9sZF9zaXplID0gZnJhbWUuc2hhcGVbOjJdICAjIG9sZF9zaXplIGlzIGluIChoZWlnaHQsIHdpZHRoKSBmb3JtYXQKICAgICAgICBpZiBub3Qgc2l6ZToKICAgICAgICAgICAgc2l6ZSA9IG1heChvbGRfc2l6ZSkKCiAgICAgICAgcmF0aW8gPSBmbG9hdChzaXplKSAvIG1heChvbGRfc2l6ZSkKICAgICAgICBuZXdfc2l6ZSA9IHR1cGxlKFtpbnQoeCAqIHJhdGlvKSBmb3IgeCBpbiBvbGRfc2l6ZV0pCgogICAgICAgICMgbmV3X3NpemUgc2hvdWxkIGJlIGluICh3aWR0aCwgaGVpZ2h0KSBmb3JtYXQKICAgICAgICBmcmFtZSA9IGN2Mi5yZXNpemUoZnJhbWUsIChuZXdfc2l6ZVsxXSwgbmV3X3NpemVbMF0pKQogICAgICAgIGRlbHRhX3cgPSBzaXplIC0gbmV3X3NpemVbMV0KICAgICAgICBkZWx0YV9oID0gc2l6ZSAtIG5ld19zaXplWzBdCgogICAgICAgIHRvcCwgYm90dG9tID0gMCArIGRlbHRhX2ggLy8gMiwgZGVsdGFfaCAtIChkZWx0YV9oIC8vIDIpCiAgICAgICAgbGVmdCwgcmlnaHQgPSAwICsgZGVsdGFfdyAvLyAyLCBkZWx0YV93IC0gKGRlbHRhX3cgLy8gMikKCiAgICAgICAgY29sb3IgPSBjb2xvcls6Oi0xXQogICAgICAgICMgICDrtoDsobHtlZwg67aA67aEIOqygOydgOyDieycvOuhnCDssYTsm4zshJwg67O17IKs7ZWc64ukLiBodHRwczovL2Nhbi1kby50aXN0b3J5LmNvbS80CiAgICAgICAgZnJhbWUgPSBjdjIuY29weU1ha2VCb3JkZXIoCiAgICAgICAgICAgIGZyYW1lLCB0b3AsIGJvdHRvbSwgbGVmdCwgcmlnaHQsIGN2Mi5CT1JERVJfQ09OU1RBTlQsIHZhbHVlPWNvbG9yCiAgICAgICAgKQogICAgICAgICMgZnJhbWUgPSBjdjIuY29weU1ha2VCb3JkZXIoZnJhbWUsIHRvcCwgYm90dG9tLCBsZWZ0LCByaWdodCwgY3YyLkJPUkRFUl9DT05TVEFOVCwgdmFsdWU9WzAsIDAsIDBdKQogICAgICAgIHJldHVybiBJbWFnZShmcmFtZSksIHJhdGlvLCB0b3AsIGxlZnQKCiAgICAjIGRlZiBzcXVhcml6ZShzZWxmLCBjcm9wPUZhbHNlLCBjb2xvcj0oMCwgMCwgMCkpOgogICAgIyAgICAgIiIi64ST7J207JmAIOuGkuydtOydmCDquLjsnbTqsIAg6rCZ64+E66GdIOygleyCrOqwge2YleycvOuhnCDrp4zrk6Dri6QuCgogICAgIyAgICAgQXJnczoKICAgICMgICAgICAgICBjcm9wIChib29sLCBvcHRpb25hbCk6IOygleyCrOqwge2YleycvOuhnCDsnpDrpbzqsoPsnbjsp4AgKFRydWUpLCDsnbTrr7jsp4Ag7KCE7LK066W8IOygleyCrOqwge2YleycvOuhnCDrgqjquLDroZwg64KY66i47KeAIOu2gOu2hOydgCDso7zslrTsp4Qg7IOJ7IOB7Jy866GcIOyxhOyatOuLpChGYWxzZSkuCiAgICAjICAgICAgICAgY29sb3IgKHR1cGxlLCBvcHRpb25hbCk6IOuCmOuouOyngCDsmIHsl63snYQg7LGE7Jqw64qUIOyDieyDgSAociwgZywgYikKICAgICMgICAgICIiIgogICAgIyAgICAgZnJhbWUgPSBucC5jb3B5KHNlbGYuX19mcmFtZSkKICAgICMgICAgIG9sZF9zaXplID0gZnJhbWUuc2hhcGVbOjJdICAjIG9sZF9zaXplIGlzIGluIChoZWlnaHQsIHdpZHRoKSBmb3JtYXQKCiAgICAjICAgICBpZiBjcm9wOgogICAgIyAgICAgICAgICMgY2VudGVyIGNyb3AKICAgICMgICAgICAgICBpbWdfc2l6ZSA9IG1pbihzZWxmLl9fZnJhbWUuc2hhcGVbOjJdKQogICAgIyAgICAgICAgIGltZyA9IHNlbGYuX19jZW50ZXJfY3JvcCgoaW1nX3NpemUsIGltZ19zaXplKSkKCiAgICAjICAgICAgICAgZGVsdGFfdyA9IG9sZF9zaXplWzFdIC0gaW1nX3NpemUKICAgICMgICAgICAgICBkZWx0YV9oID0gb2xkX3NpemVbMF0gLSBpbWdfc2l6ZQogICAgIyAgICAgICAgIHRvcCwgYm90dG9tID0gZGVsdGFfaCAvLyAyLCBkZWx0YV9oIC0gKGRlbHRhX2ggLy8gMikKICAgICMgICAgICAgICBsZWZ0LCByaWdodCA9IGRlbHRhX3cgLy8gMiwgZGVsdGFfdyAtIChkZWx0YV93IC8vIDIpCiAgICAjICAgICAgICAgcmV0dXJuIGltZywgdG9wLCBsZWZ0CiAgICAjICAgICBlbHNlOgogICAgIyAgICAgICAgICMg7YWM65GQ66as66W8IOunjOuTpOyWtOyEnCDsoJXsgqzqsIHtmJXtmZQKICAgICMgICAgICAgICBzaXplID0gbWF4KHNlbGYuX19mcmFtZS5zaGFwZVs6Ml0pCiAgICAjICAgICAgICAgaW1nLCByYXRpbywgdG9wLCBsZWZ0ID0gc2VsZi5hZGFwdGl2ZV9zY2FsZShzaXplLCBjb2xvcikKICAgICMgICAgICAgICByZXR1cm4gaW1nLCB0b3AsIGxlZnQKCiAgICBkZWYgc3F1YXJpemUoc2VsZiwgc2l6ZSwgY3JvcD1GYWxzZSwgY29sb3I9KDAsIDAsIDApKToKICAgICAgICAiIiLrhJPsnbTsmYAg64aS7J207J2YIOq4uOydtOqwgCDqsJnrj4TroZ0g7KCV7IKs6rCB7ZiV7Jy866GcIOunjOuToOuLpC4KCiAgICAgICAgQXJnczoKICAgICAgICAgICAgY3JvcCAoYm9vbCwgb3B0aW9uYWwpOiDsoJXsgqzqsIHtmJXsnLzroZwg7J6Q66W86rKD7J247KeAIChUcnVlKSwg7J2066+47KeAIOyghOyytOulvCDsoJXsgqzqsIHtmJXsnLzroZwg64Ko6riw66GcIOuCmOuouOyngCDrtoDrtoTsnYAg7KO87Ja07KeEIOyDieyDgeycvOuhnCDssYTsmrTri6QoRmFsc2UpLgogICAgICAgICAgICBjb2xvciAodHVwbGUsIG9wdGlvbmFsKTog64KY66i47KeAIOyYgeyXreydhCDssYTsmrDripQg7IOJ7IOBIChyLCBnLCBiKQogICAgICAgICIiIgogICAgICAgIGlmIGNyb3A6CiAgICAgICAgICAgICMgY2VudGVyIGNyb3AKICAgICAgICAgICAgZnJhbWUgPSBucC5jb3B5KHNlbGYuX19mcmFtZSkKICAgICAgICAgICAgb2xkX3NpemUgPSBmcmFtZS5zaGFwZVs6Ml0gICMgb2xkX3NpemUgaXMgaW4gKGhlaWdodCwgd2lkdGgpIGZvcm1hdAogICAgICAgICAgICAjIDMzNCwgNTAwCiAgICAgICAgICAgIHJhdGlvID0gZmxvYXQoc2l6ZSkgLyBtaW4ob2xkX3NpemUpCiAgICAgICAgICAgIHByaW50KCJAcmF0aW8iLCByYXRpbykKICAgICAgICAgICAgbmV3X3NpemUgPSB0dXBsZShbaW50KHggKiByYXRpbykgZm9yIHggaW4gb2xkX3NpemVdKQogICAgICAgICAgICBwcmludCgiQG5ld19zaXplIiwgbmV3X3NpemUpCgogICAgICAgICAgICAjIOyCrOydtOymiOulvCDspITsnbTqs6AKICAgICAgICAgICAgZnJhbWUgPSBjdjIucmVzaXplKGZyYW1lLCAobmV3X3NpemVbMV0sIG5ld19zaXplWzBdKSkKCiAgICAgICAgICAgICMgQ3JvcO2VmOqzoAogICAgICAgICAgICBpbWdfc2l6ZSA9IG1pbihuZXdfc2l6ZSkKICAgICAgICAgICAgcHJpbnQoIkBpbWdfc2l6ZSIsIGltZ19zaXplKQoKICAgICAgICAgICAgaW1nID0gc2VsZi5fX2NlbnRlcl9jcm9wKGZyYW1lLCAoaW1nX3NpemUsIGltZ19zaXplKSkKICAgICAgICAgICAgcHJpbnQoIkBjcm9wIGltZyBzaGFwZSIsIGltZy5zaGFwZSkKCiAgICAgICAgICAgICMgaW1nID0gSW1hZ2UoZnJhbWUpCiAgICAgICAgICAgIGRlbHRhX3cgPSBuZXdfc2l6ZVsxXSAtIGltZ19zaXplCiAgICAgICAgICAgIGRlbHRhX2ggPSBuZXdfc2l6ZVswXSAtIGltZ19zaXplCiAgICAgICAgICAgIHByaW50KCJAZGVsdGFfdyIsIGRlbHRhX3cpCiAgICAgICAgICAgIHByaW50KCJAZGVsdGFfaCIsIGRlbHRhX2gpCgogICAgICAgICAgICB0b3AsIGJvdHRvbSA9IGRlbHRhX2ggLy8gMiwgZGVsdGFfaCAtIChkZWx0YV9oIC8vIDIpCiAgICAgICAgICAgIGxlZnQsIHJpZ2h0ID0gZGVsdGFfdyAvLyAyLCBkZWx0YV93IC0gKGRlbHRhX3cgLy8gMikKICAgICAgICAgICAgIyDtgazroa3snZgg6rK97Jqw64qUIOuenOuTnOuniO2BrOulvCDrubzspIDri6QuCiAgICAgICAgICAgICMgbGFuZG1hcmtzID0gKChsYW5kbWFya3MgKiByYXRpbykgIC0gbnAuYXJyYXkoW2xlZnQsIHRvcF0pKS5hc3R5cGUobnAuaW50KQogICAgICAgICAgICByZXR1cm4gaW1nLCByYXRpbywgdG9wLCBsZWZ0CiAgICAgICAgZWxzZToKICAgICAgICAgICAgIyDthYzrkZDrpqzrpbwg66eM65Ok7Ja07IScIOygleyCrOqwge2Yle2ZlAogICAgICAgICAgICAjIHNpemUgPSBtYXgoc2VsZi5fX2ZyYW1lLnNoYXBlWzoyXSkKICAgICAgICAgICAgaW1nLCByYXRpbywgdG9wLCBsZWZ0ID0gc2VsZi5hZGFwdGl2ZV9zY2FsZShzaXplLCBjb2xvcikKICAgICAgICAgICAgIyDtgazroa3snZgg6rK97Jqw64qUIOuenOuTnOuniO2BrOulvCDrjZTtlZzri6QuCiAgICAgICAgICAgICMgbGFuZG1hcmtzID0gKChsYW5kbWFya3MgKiByYXRpbykgKyBucC5hcnJheShbbGVmdCwgdG9wXSkpLmFzdHlwZShucC5pbnQpCiAgICAgICAgICAgIHJldHVybiBpbWcsIHJhdGlvLCB0b3AsIGxlZnQKCiAgICBkZWYgX19fcmVzaXplKHNlbGYsIHdpZHRoPTAsIGhlaWdodD0wLCBmeD0wLCBmeT0wKToKICAgICAgICBpZiBzZWxmLl9fZnJhbWUgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIEltYWdlKG5wLmNvcHkoc2VsZi5fX2ZyYW1lKSwgc2VsZi5fX2NvbG9yU3BhY2UpCgogICAgICAgIGZyYW1lID0gbnAuY29weShzZWxmLl9fZnJhbWUpCiAgICAgICAgaWYgd2lkdGggPD0gMCBvciBoZWlnaHQgPD0gMDoKICAgICAgICAgICAgaWYgZnggPT0gMCBvciBmeSA9PSAwOgogICAgICAgICAgICAgICAgcmV0dXJuIEltYWdlKG5wLmNvcHkoc2VsZi5fX2ZyYW1lKSwgc2VsZi5fX2NvbG9yU3BhY2UpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBmcmFtZSA9IGN2Mi5yZXNpemUoCiAgICAgICAgICAgICAgICAgICAgZnJhbWUsIGRzaXplPSgwLCAwKSwgZng9ZngsIGZ5PWZ5LCBpbnRlcnBvbGF0aW9uPWN2Mi5JTlRFUl9MSU5FQVIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIHJldHVybiBJbWFnZShmcmFtZSwgc2VsZi5fX2NvbG9yU3BhY2UpCgogICAgICAgIGVsaWYgd2lkdGggPiBNQVhfRElNRU5TSU9OIG9yIGhlaWdodCA+IE1BWF9ESU1FTlNJT046CiAgICAgICAgICAgIHJldHVybiBJbWFnZShucC5jb3B5KHNlbGYuX19mcmFtZSksIHNlbGYuX19jb2xvclNwYWNlKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGZyYW1lID0gY3YyLnJlc2l6ZSgKICAgICAgICAgICAgICAgIHNlbGYuX19mcmFtZSwgZHNpemU9KHdpZHRoLCBoZWlnaHQpLCBpbnRlcnBvbGF0aW9uPWN2Mi5JTlRFUl9MSU5FQVIKICAgICAgICAgICAgKQogICAgICAgICAgICByZXR1cm4gSW1hZ2UoZnJhbWUsIHNlbGYuX19jb2xvclNwYWNlKQoKICAgIGRlZiBjcm9wKHNlbGYsIHg9MCwgeT0wLCB3aWR0aD0wLCBoZWlnaHQ9MCwgY2VudGVyZWQ9RmFsc2UpOgogICAgICAgICIiIuyngOygle2VnCDsooztkZzrpbwg7Iuc7J6R7KCQ7Jy866GcIO2VtOyEnCDso7zslrTsp4Qg7YGs6riw66GcIOydtOuvuOyngO'
love = ''
god = ''
destiny = ''
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))