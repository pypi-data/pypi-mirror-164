"use strict";(globalThis.webpackChunksuperset=globalThis.webpackChunksuperset||[]).push([[3324],{804125:(e,t,a)=>{a.d(t,{Z:()=>x});var o=a(380744),r=a(777380),i=a(715614),s=a(844211),n=a(106948),_=a(100281),l=a(453982),c=a(495772),d=a(151331),g=a(104516);const p=[0,0,0,0],u=[0,255,0,255],h=["minColor","maxColor","colorRange","colorDomain"],m={cellSizePixels:{value:100,min:1},cellMarginPixels:{value:2,min:0,max:5},colorDomain:null,colorRange:g.K};class f extends c.Z{static isSupported(e){return(0,s.ag)(e,[n.h.TEXTURE_FLOAT])}getShaders(){return{vs:"#define SHADER_NAME screen-grid-layer-vertex-shader\n#define RANGE_COUNT 6\n\nattribute vec3 positions;\nattribute vec3 instancePositions;\nattribute vec4 instanceCounts;\nattribute vec3 instancePickingColors;\n\nuniform float opacity;\nuniform vec3 cellScale;\nuniform vec4 minColor;\nuniform vec4 maxColor;\nuniform vec4 colorRange[RANGE_COUNT];\nuniform vec2 colorDomain;\nuniform bool shouldUseMinMax;\nuniform sampler2D maxTexture;\n\nvarying vec4 vColor;\nvarying float vSampleCount;\n\nvec4 quantizeScale(vec2 domain, vec4 range[RANGE_COUNT], float value) {\n  vec4 outColor = vec4(0., 0., 0., 0.);\n  if (value >= domain.x && value <= domain.y) {\n    float domainRange = domain.y - domain.x;\n    if (domainRange <= 0.) {\n      outColor = colorRange[0];\n    } else {\n      float rangeCount = float(RANGE_COUNT);\n      float rangeStep = domainRange / rangeCount;\n      float idx = floor((value - domain.x) / rangeStep);\n      idx = clamp(idx, 0., rangeCount - 1.);\n      int intIdx = int(idx);\n      outColor = colorRange[intIdx];\n    }\n  }\n  outColor = outColor / 255.;\n  return outColor;\n}\n\nvoid main(void) {\n  vSampleCount = instanceCounts.a;\n\n  float weight = instanceCounts.r;\n  float maxWeight = texture2D(maxTexture, vec2(0.5)).r;\n\n  float step = weight / maxWeight;\n  vec4 minMaxColor = mix(minColor, maxColor, step) / 255.;\n\n  vec2 domain = colorDomain;\n  float domainMaxValid = float(colorDomain.y != 0.);\n  domain.y = mix(maxWeight, colorDomain.y, domainMaxValid);\n  vec4 rangeColor = quantizeScale(domain, colorRange, weight);\n\n  float rangeMinMax = float(shouldUseMinMax);\n  vec4 color = mix(rangeColor, minMaxColor, rangeMinMax);\n  vColor = vec4(color.rgb, color.a * opacity);\n  picking_setPickingColor(instancePickingColors);\n\n  gl_Position = vec4(instancePositions + positions * cellScale, 1.);\n}\n",fs:"#define SHADER_NAME screen-grid-layer-fragment-shader\n\nprecision highp float;\n\nvarying vec4 vColor;\nvarying float vSampleCount;\n\nvoid main(void) {\n  if (vSampleCount <= 0.0) {\n    discard;\n  }\n  gl_FragColor = vColor;\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n",modules:[d.Z]}}initializeState(){const{gl:e}=this.context;this.getAttributeManager().addInstanced({instancePositions:{size:3,update:this.calculateInstancePositions},instanceCounts:{size:4,noAlloc:!0}}),this.setState({model:this._getModel(e)})}shouldUpdateState({changeFlags:e}){return e.somethingChanged}updateState({oldProps:e,props:t,changeFlags:a}){super.updateState({oldProps:e,props:t,changeFlags:a});const o=this.getAttributeManager();t.numInstances!==e.numInstances?o.invalidateAll():e.cellSizePixels!==t.cellSizePixels&&o.invalidate("instancePositions"),this._updateUniforms(e,t,a)}draw({uniforms:e}){const{parameters:t,maxTexture:a}=this.props,o=this.props.minColor||p,r=this.props.maxColor||u,i=this.props.colorDomain||[1,0],{model:s}=this.state;s.setUniforms(e).setUniforms({minColor:o,maxColor:r,maxTexture:a,colorDomain:i}).draw({parameters:{depthTest:!1,depthMask:!1,...t}})}calculateInstancePositions(e,{numInstances:t}){const{width:a,height:o}=this.context.viewport,{cellSizePixels:r}=this.props,i=Math.ceil(a/r),{value:s,size:n}=e;for(let e=0;e<t;e++){const t=e%i,_=Math.floor(e/i);s[e*n+0]=t*r/a*2-1,s[e*n+1]=1-_*r/o*2,s[e*n+2]=0}}_getModel(e){return new _.Z(e,{...this.getShaders(),id:this.props.id,geometry:new l.Z({drawMode:6,attributes:{positions:new Float32Array([0,0,0,1,0,0,1,1,0,0,1,0])}}),isInstanced:!0})}_shouldUseMinMax(){const{minColor:e,maxColor:t,colorDomain:a,colorRange:r}=this.props;return e||t?(o.Z.deprecated("ScreenGridLayer props: minColor and maxColor","colorRange, colorDomain")(),!0):!a&&!r}_updateUniforms(e,t,a){const{model:o}=this.state;if(h.some((a=>e[a]!==t[a]))&&o.setUniforms({shouldUseMinMax:this._shouldUseMinMax()}),e.colorRange!==t.colorRange&&o.setUniforms({colorRange:(0,g.P)(t.colorRange)}),e.cellMarginPixels!==t.cellMarginPixels||e.cellSizePixels!==t.cellSizePixels||a.viewportChanged){const{width:e,height:t}=this.context.viewport,{cellSizePixels:a,cellMarginPixels:r}=this.props,i=a>r?r:0,s=new Float32Array([(a-i)/e*2,-(a-i)/t*2,1]);o.setUniforms({cellScale:s})}}}f.layerName="ScreenGridCellLayer",f.defaultProps=m;var P=a(213208),E=a(592637);const D={...f.defaultProps,getPosition:{type:"accessor",value:e=>e.position},getWeight:{type:"accessor",value:1},gpuAggregation:!0,aggregation:"SUM"},M="positions",C={data:{props:["cellSizePixels"]},weights:{props:["aggregation"],accessors:["getWeight"]}};class x extends P.Z{initializeState(){const{gl:e}=this.context;if(!f.isSupported(e))return this.setState({supported:!1}),void o.Z.error("ScreenGridLayer: ".concat(this.id," is not supported on this browser"))();super.initializeState({dimensions:C,getCellSize:e=>e.cellSizePixels});const t={count:{size:1,operation:i.KM.SUM,needMax:!0,maxTexture:(0,E.hq)(e,{id:"".concat(this.id,"-max-texture")})}};this.setState({supported:!0,projectPoints:!0,weights:t,subLayerData:{attributes:{}},maxTexture:t.count.maxTexture,positionAttributeName:"positions",posOffset:[0,0],translation:[1,-1]}),this.getAttributeManager().add({[M]:{size:3,accessor:"getPosition",type:5130,fp64:this.use64bitPositions()},count:{size:3,accessor:"getWeight"}})}shouldUpdateState({changeFlags:e}){return this.state.supported&&e.somethingChanged}updateState(e){super.updateState(e)}renderLayers(){if(!this.state.supported)return[];const{maxTexture:e,numRow:t,numCol:a,weights:o}=this.state,{updateTriggers:r}=this.props,{aggregationBuffer:i}=o.count;return new(this.getSubLayerClass("cells",f))(this.props,this.getSubLayerProps({id:"cell-layer",updateTriggers:r}),{data:{attributes:{instanceCounts:i}},maxTexture:e,numInstances:t*a})}finalizeState(){super.finalizeState();const{aggregationBuffer:e,maxBuffer:t,maxTexture:a}=this.state;null==e||e.delete(),null==t||t.delete(),null==a||a.delete()}getPickingInfo({info:e,mode:t}){const{index:a}=e;if(a>=0){const{gpuGridAggregator:t,gpuAggregation:o,weights:i}=this.state,s=o?t.getData("count"):i.count;e.object=r.Z.getAggregationData({pixelIndex:a,...s})}return e}updateResults({aggregationData:e,maxData:t}){const{count:a}=this.state.weights;a.aggregationData=e,a.aggregationBuffer.setData({data:e}),a.maxData=t,a.maxTexture.setImageData({data:t})}updateAggregationState(e){const t=e.props.cellSizePixels,a=e.oldProps.cellSizePixels!==t,{viewportChanged:i}=e.changeFlags;let s=e.props.gpuAggregation;this.state.gpuAggregation!==e.props.gpuAggregation&&s&&!r.Z.isSupported(this.context.gl)&&(o.Z.warn("GPU Grid Aggregation not supported, falling back to CPU")(),s=!1);const n=s!==this.state.gpuAggregation;this.setState({gpuAggregation:s});const _=this.isAttributeChanged(M),{dimensions:l}=this.state,{data:c,weights:d}=l,g=_||n||i||this.isAggregationDirty(e,{compareAll:s,dimension:c}),p=this.isAggregationDirty(e,{dimension:d});this.setState({aggregationDataDirty:g,aggregationWeightsDirty:p});const{viewport:u}=this.context;if(i||a){const{width:e,height:a}=u,o=Math.ceil(e/t),r=Math.ceil(a/t);this.allocateResources(r,o),this.setState({scaling:[e/2,-a/2,1],gridOffset:{xOffset:t,yOffset:t},width:e,height:a,numCol:o,numRow:r})}p&&this._updateAccessors(e),(g||p)&&this._resetResults()}_updateAccessors(e){const{getWeight:t,aggregation:a,data:o}=e.props,{count:r}=this.state.weights;r&&(r.getWeight=t,r.operation=i.KM[a]),this.setState({getValue:(0,i._D)(a,t,{data:o})})}_resetResults(){const{count:e}=this.state.weights;e&&(e.aggregationData=null)}}x.layerName="ScreenGridLayer",x.defaultProps=D},383324:(module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{getLayer:()=>getLayer,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(667294),prop_types__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(45697),prop_types__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__),deck_gl__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(804125),_superset_ui_core__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(455867),_AnimatableDeckGLContainer__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(815354),_utils_time__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(166911),_utils_sandbox__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(621207),_common__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(452154),_TooltipRow__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(101740),_utils_fitViewport__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(74020),_emotion_react__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(211965),enterModule;module=__webpack_require__.hmd(module),enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e};function getPoints(e){return e.map((e=>e.position))}function setTooltipContent(e){return(0,_emotion_react__WEBPACK_IMPORTED_MODULE_8__.tZ)("div",{className:"deckgl-tooltip"},(0,_emotion_react__WEBPACK_IMPORTED_MODULE_8__.tZ)(_TooltipRow__WEBPACK_IMPORTED_MODULE_6__.Z,{label:`${(0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_9__.t)("Longitude and Latitude")}: `,value:`${e.coordinate[0]}, ${e.coordinate[1]}`}),(0,_emotion_react__WEBPACK_IMPORTED_MODULE_8__.tZ)(_TooltipRow__WEBPACK_IMPORTED_MODULE_6__.Z,{label:`${(0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_9__.t)("Weight")}: `,value:`${e.object.weight}`}))}function getLayer(e,t,a,o,r,i,s){const n=e,_=n.color_picker;let l=t.data.features.map((e=>({...e,color:[_.r,_.g,_.b,255*_.a]})));if(n.js_data_mutator){const e=(0,_utils_sandbox__WEBPACK_IMPORTED_MODULE_4__.Z)(n.js_data_mutator);l=e(l)}return null!=s&&s.forEach((e=>{l=l.filter((t=>e(t)))})),new deck_gl__WEBPACK_IMPORTED_MODULE_10__.Z({id:`screengrid-layer-${n.slice_id}`,data:l,pickable:!0,cellSizePixels:n.grid_size,minColor:[_.r,_.g,_.b,0],maxColor:[_.r,_.g,_.b,255*_.a],outline:!1,getWeight:e=>e.weight||0,...(0,_common__WEBPACK_IMPORTED_MODULE_5__.N)(n,o,setTooltipContent)})}const propTypes={formData:prop_types__WEBPACK_IMPORTED_MODULE_1___default().object.isRequired,payload:prop_types__WEBPACK_IMPORTED_MODULE_1___default().object.isRequired,setControlValue:prop_types__WEBPACK_IMPORTED_MODULE_1___default().func.isRequired,viewport:prop_types__WEBPACK_IMPORTED_MODULE_1___default().object.isRequired,onAddFilter:prop_types__WEBPACK_IMPORTED_MODULE_1___default().func,width:prop_types__WEBPACK_IMPORTED_MODULE_1___default().number.isRequired,height:prop_types__WEBPACK_IMPORTED_MODULE_1___default().number.isRequired},defaultProps={onAddFilter(){}};class DeckGLScreenGrid extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent{constructor(e){super(e),this.containerRef=react__WEBPACK_IMPORTED_MODULE_0__.createRef(),this.setTooltip=e=>{const{current:t}=this.containerRef;t&&t.setTooltip(e)},this.state=DeckGLScreenGrid.getDerivedStateFromProps(e),this.getLayers=this.getLayers.bind(this),this.onValuesChange=this.onValuesChange.bind(this)}static getDerivedStateFromProps(e,t){if(t&&e.payload.form_data===t.formData)return null;const a=e.payload.data.features||[],o=a.map((e=>e.__timestamp)),r=e.payload.form_data.time_grain_sqla||e.payload.form_data.granularity||"P1D",{start:i,end:s,getStep:n,values:_,disabled:l}=(0,_utils_time__WEBPACK_IMPORTED_MODULE_3__.g)(o,r),{width:c,height:d,formData:g}=e;let{viewport:p}=e;return g.autozoom&&(p=(0,_utils_fitViewport__WEBPACK_IMPORTED_MODULE_7__.Z)(p,{width:c,height:d,points:getPoints(a)})),{start:i,end:s,getStep:n,values:_,disabled:l,viewport:p,selected:[],lastClick:0,formData:e.payload.form_data}}onValuesChange(e){this.setState({values:Array.isArray(e)?e:[e,e+this.state.getStep(e)]})}getLayers(e){const t=[];return e[0]===e[1]||e[1]===this.end?t.push((t=>t.__timestamp>=e[0]&&t.__timestamp<=e[1])):t.push((t=>t.__timestamp>=e[0]&&t.__timestamp<e[1])),[getLayer(this.props.formData,this.props.payload,this.props.onAddFilter,this.setTooltip,t)]}render(){const{formData:e,payload:t,setControlValue:a}=this.props;return(0,_emotion_react__WEBPACK_IMPORTED_MODULE_8__.tZ)("div",null,(0,_emotion_react__WEBPACK_IMPORTED_MODULE_8__.tZ)(_AnimatableDeckGLContainer__WEBPACK_IMPORTED_MODULE_2__.Z,{ref:this.containerRef,aggregation:!0,getLayers:this.getLayers,start:this.state.start,end:this.state.end,getStep:this.state.getStep,values:this.state.values,disabled:this.state.disabled,viewport:this.state.viewport,width:this.props.width,height:this.props.height,mapboxApiAccessToken:t.data.mapboxApiKey,mapStyle:e.mapbox_style,setControlValue:a,onValuesChange:this.onValuesChange,onViewportChange:this.onViewportChange}))}__reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}DeckGLScreenGrid.propTypes=propTypes,DeckGLScreenGrid.defaultProps=defaultProps;const _default=DeckGLScreenGrid,__WEBPACK_DEFAULT_EXPORT__=_default;var reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&(reactHotLoader.register(getPoints,"getPoints","/Users/chenming/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Screengrid/Screengrid.jsx"),reactHotLoader.register(setTooltipContent,"setTooltipContent","/Users/chenming/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Screengrid/Screengrid.jsx"),reactHotLoader.register(getLayer,"getLayer","/Users/chenming/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Screengrid/Screengrid.jsx"),reactHotLoader.register(propTypes,"propTypes","/Users/chenming/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Screengrid/Screengrid.jsx"),reactHotLoader.register(defaultProps,"defaultProps","/Users/chenming/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Screengrid/Screengrid.jsx"),reactHotLoader.register(DeckGLScreenGrid,"DeckGLScreenGrid","/Users/chenming/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Screengrid/Screengrid.jsx"),reactHotLoader.register(_default,"default","/Users/chenming/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Screengrid/Screengrid.jsx")),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}}]);