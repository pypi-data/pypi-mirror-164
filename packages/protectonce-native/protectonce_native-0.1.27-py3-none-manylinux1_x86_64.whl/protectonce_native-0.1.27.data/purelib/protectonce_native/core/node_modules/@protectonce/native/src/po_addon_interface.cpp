
#include <napi.h>

#include "flex.h"
#include "libinjection.h"

Napi::Boolean DetectXSS(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();

  if (info.Length() != 1) {
    Napi::TypeError::New(env, "Wrong number of arguments")
        .ThrowAsJavaScriptException();
    return Napi::Boolean::New(env, false);
  }

  if (!info[0].IsString()) {
    Napi::TypeError::New(env, "Wrong arguments").ThrowAsJavaScriptException();
    return Napi::Boolean::New(env, false);
  }

  const std::string input = info[0].As<Napi::String>().Utf8Value();
  const bool result = !!libinjection_xss(input.c_str(), input.length());
  return Napi::Boolean::New(env, result);
}

Napi::Boolean DetectSQLI(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();

  if (info.Length() != 1) {
    Napi::TypeError::New(env, "Wrong number of arguments")
        .ThrowAsJavaScriptException();
    return Napi::Boolean::New(env, false);
  }

  if (!info[0].IsString()) {
    Napi::TypeError::New(env, "Wrong arguments").ThrowAsJavaScriptException();
    return Napi::Boolean::New(env, false);
  }

  char fingerprint[10] = {0};
  const std::string input = info[0].As<Napi::String>().Utf8Value();
  const bool result =
      !!libinjection_sqli(input.c_str(), input.length(), fingerprint);
  return Napi::Boolean::New(env, result);
}

Napi::Array FlexTokenize(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();

  if (info.Length() != 2) {
    Napi::TypeError::New(env, "Wrong number of arguments")
        .ThrowAsJavaScriptException();
    return Napi::Array::New(env);
  }

  const std::string input = info[0].As<Napi::String>().Utf8Value();
  const std::string lexerMode = info[1].As<Napi::String>().Utf8Value();

  flex_token_result token_result =
      flex_lexing(input.c_str(), input.length(), lexerMode.c_str());

  size_t len = std::min(uint32_t(input.length()), token_result.result_len);
  auto arr = Napi::Array::New(env, len);
  for (size_t i = 0; i < len; i++) {
    arr[i] = Napi::Number::New(env, token_result.result[i]);
  }
  free(token_result.result);
  return arr;
}

Napi::Object Init(Napi::Env env, Napi::Object exports) {
  exports.Set(Napi::String::New(env, "detectXSS"),
              Napi::Function::New(env, DetectXSS));

  exports.Set(Napi::String::New(env, "detectSQLI"),
              Napi::Function::New(env, DetectSQLI));

  exports.Set(Napi::String::New(env, "flex_tokenize"),
              Napi::Function::New(env, FlexTokenize));
  return exports;
}

NODE_API_MODULE(po_native_interface, Init)
