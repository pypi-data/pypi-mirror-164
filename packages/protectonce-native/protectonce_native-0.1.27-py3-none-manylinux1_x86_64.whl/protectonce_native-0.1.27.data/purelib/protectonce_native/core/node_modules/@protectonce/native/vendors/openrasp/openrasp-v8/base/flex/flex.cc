
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 42
#define YY_END_OF_BUFFER 43
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[344] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   43,   41,   41,   41,
       41,   41,   41,   21,   20,    4,    7,    5,   20,   15,
        1,    2,   20,    1,   19,   17,   18,    1,   41,   41,
        8,   41,    9,   27,   26,   31,   30,   26,   26,   26,
       41,   26,   41,   35,   41,   41,   41,   41,   41,   28,
       29,   41,   28,   41,   36,   41,   41,   41,   41,   41,
       39,   38,   26,   33,   26,   23,   24,   37,   26,   41,
       40,    0,    0,    0,    0,    0,   11,    0,    0,    0,
        0,    0,    0,    7,    0,   12,    0,    0,    0,    0,

        0,    0,   14,    1,    0,    1,    1,   13,    0,   10,
        0,    0,    0,    0,    0,    0,    1,   16,   27,   26,
        0,    0,    0,    0,    0,    0,   30,   25,   34,   25,
       25,    0,   26,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   26,    0,    0,    0,    0,   28,
        0,    0,    0,    0,    0,    0,   25,    0,    0,    0,
        0,    0,   28,    0,    0,    0,    0,   38,   32,   34,
       32,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    7,    1,    1,    0,    6,   13,

        0,    1,    0,    0,    0,    0,   26,    0,    0,    0,
        0,   25,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       28,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   22,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
        7,    0,    1,    6,    0,    6,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    1,    7,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    7,
        1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,    9,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,    9,   20,   21,
       22,   10,   23,   24,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       26,   27,   26,    9,   28,   29,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   30,   31,   32,   26,    1,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   34,   34,   34,   34,   34,   34,   34,   34,   34,

       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   36,
       36,   36,   36,   36,   36,   36,   36,   37,   37,   37,
       37,   38,   38,   39,   39
    } ;

static yyconst flex_int32_t yy_meta[40] =
    {   0,
        1,    2,    3,    2,    4,    1,    5,    6,    7,    2,
        2,    5,    2,    4,    7,    4,    7,    7,    4,    2,
        2,    7,    4,    4,    4,    7,    7,    4,    8,    4,
        2,    7,    9,    7,    7,    7,    7,    7,    9
    } ;

static yyconst flex_int16_t yy_base[358] =
    {   0,
        0,    5,   43,    0,   82,    0,  121,    0,    0,    3,
        4,  153,  177,  201,  159,  162,  764,  765,  730,  729,
      728,  727,  726,  765,  765,  225,    0,  253,  740,  765,
        2,  765,  743,  152,  765,  765,  765,  176,  138,  196,
      765,  725,  765,    0,  265,  765,    0,  169,  765,  293,
      742,  733,  182,  765,  720,  719,  718,  717,  716,  305,
      765,  175,  331,  369,  765,  715,  714,  713,  712,  711,
      765,    0,  731,  765,  730,  728,  765,  765,  728,  727,
      765,  705,  704,  703,  702,  402,  765,  198,  701,  700,
      699,  698,  697,    0,  430,  765,  203,  677,  672,  668,

      638,  634,  765,  465,  226,  249,  253,    0,  228,  765,
      633,  609,  584,  583,  582,  257,  597,  765,   20,  467,
      259,  580,  579,  577,  576,  575,    0,  765,  595,  286,
      198,  495,  765,  272,  573,  572,  571,  570,  569,  568,
      567,  566,  565,  564,    0,  563,  556,  555,  554,  573,
        0,  552,  551,  549,  548,  547,  566,  545,  544,  543,
      542,  541,  560,  539,  538,  537,  536,    0,  556,  549,
      548,  526,  525,  524,  523,  521,  520,  519,  518,  528,
      517,  516,  515,  514,  513,  512,  511,  510,  509,  556,
      508,  507,  506,  505,    0,  296,  329,  331,  523,  765,

      518,  336,  502,  495,  494,  493,    0,  492,  491,  490,
      488,  297,  353,  487,  486,  485,  484,  483,  584,  482,
      481,  480,  479,  478,  477,  476,  475,  474,  467,  466,
      485,  464,  463,  462,  459,  458,  456,  455,  454,  453,
      452,  450,  765,  447,  446,  445,  444,  443,  442,  441,
      440,  439,  438,  437,  430,  429,  428,  425,  420,  363,
      367,  393,  435,  435,  430,  765,  413,  411,  410,  402,
      401,  400,  365,  399,  398,  397,  395,  394,  392,  391,
      387,  386,  383,  380,  378,  377,  369,  368,  367,  366,
      361,  356,  354,  343,  341,  340,  338,  330,  329,  318,

      316,  305,  304,  303,  398,  426,  302,  301,  300,  293,
      290,  286,  285,  284,  265,  251,  250,  246,  242,  238,
      234,  225,  217,  216,  215,  213,  210,  196,  194,  431,
      205,  178,  177,  169,  165,  163,  153,  146,  145,  131,
      130,  129,  765,  622,  631,  639,  648,  656,  661,  668,
      674,  680,  688,  695,  702,  711,  720
    } ;

static yyconst flex_int16_t yy_def[358] =
    {   0,
      344,  344,  343,    3,  343,    5,  343,    7,    5,    5,
        5,    5,    5,    5,    7,    7,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  345,  346,  347,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  348,  343,
      343,  343,  343,  343,  349,  343,  350,  351,  343,  352,
      343,  343,  353,  343,  343,  343,  343,  343,  343,  354,
      343,  351,  354,  354,  343,  343,  343,  343,  343,  343,
      343,  355,   62,  343,   62,  343,  343,  343,   62,   62,
      343,  343,  343,  343,  343,  345,  343,  345,  343,  343,
      343,  343,  343,  346,  347,  343,  347,  343,  343,  343,

      343,  343,  343,  343,  343,  343,  343,  356,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  349,
      353,  343,  343,  343,  343,  343,  350,  343,  343,  343,
      343,  352,  343,  352,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  120,  343,  343,  343,  343,   63,
       64,  343,  343,  343,  343,  343,   63,  343,  343,  343,
      343,  343,   63,  343,  343,  343,  343,  355,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  345,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  347,
      343,  343,  343,  343,  346,  346,  343,  343,  357,  343,

      356,  343,  343,  343,  343,  343,  120,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  352,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
       63,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  346,
      346,  343,  343,  357,  357,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,

      343,  343,  343,  343,  346,  346,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  346,
      346,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,    0,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343
    } ;

static yyconst flex_int16_t yy_nxt[805] =
    {   0,
      343,  119,  119,  119,  200,   71,   72,   73,   71,   72,
       73,   75,  343,  201,  343,   76,   77,  104,  105,  343,
      106,  119,  119,  119,  343,  343,  107,  343,   74,  107,
      343,   74,   78,   19,   20,   21,   22,   23,   19,   20,
       21,   22,   23,   18,   24,   24,   24,   25,   26,   27,
       25,   25,   25,   28,   25,   25,   29,   30,   31,   32,
       33,   34,   35,   25,   36,   25,   37,   38,   18,   39,
       38,   40,   41,   42,   43,   18,   19,   20,   21,   22,
       23,   18,   18,   44,   44,   44,   45,   46,   47,   48,
       45,   49,   50,   51,   18,   45,   45,   45,   45,   45,

       45,   49,   52,   45,   45,   45,   45,   45,   53,   45,
       54,   45,   49,   45,   18,   55,   56,   57,   58,   59,
       18,   18,   60,   60,   60,   60,   61,   60,   62,   60,
       60,   60,   63,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   64,   60,   65,
       60,   60,   60,   18,   66,   67,   68,   69,   70,   18,
       75,  132,   95,   86,   76,   77,   80,  107,  109,   80,
      106,  111,  112,  113,  114,  115,  107,  150,  231,  107,
      129,   78,   71,   72,   79,  120,  129,   74,   76,   77,
       74,  107,  105,  130,  107,  219,  130,  342,  131,  130,

      107,  132,  130,  107,  131,   74,   71,   72,   79,  207,
      110,  116,   76,   77,  116,  140,  141,  142,  143,  144,
      116,  261,  213,  116,  117,  213,  190,  128,  341,   74,
       87,  175,  176,  177,  178,  179,  185,  186,  187,  188,
      189,  197,   95,  197,  197,  180,  202,  340,   86,  163,
      197,   88,  197,  197,  198,  197,  198,  339,   89,   90,
       91,   92,   93,   96,  107,  109,  150,  106,  107,  105,
      338,  107,  116,  107,  231,  116,  107,  107,  145,   97,
      107,  116,  337,  120,  116,  117,   98,   99,  100,  101,
      102,  121,  140,  141,  142,  143,  144,  336,  122,  123,

      124,  125,  126,  133,  212,  214,  215,  216,  217,  218,
      212,  260,  261,  212,  260,  212,  219,  335,  334,  134,
      260,  212,  132,  260,  212,  333,  135,  136,  137,  138,
      139,  151,  207,  332,  110,  329,  190,  328,  152,  153,
      154,  155,  156,  157,  197,  105,  262,  197,  327,  262,
       95,  197,  105,  197,  202,  262,  197,  151,  262,  263,
      197,  326,  180,  197,  152,  153,  154,  155,  156,  150,
      325,  273,  324,   86,  150,   81,  150,  273,  260,  261,
      273,  260,  305,  273,  128,  305,  323,  260,  163,  273,
      260,  305,  273,  322,  305,  306,  128,  150,  321,  150,

      320,  319,  158,  159,  160,  161,  162,   87,  262,  231,
      318,  262,  145,  305,  261,  317,  305,  262,  316,  120,
      262,  263,  305,  315,  314,  305,  219,  313,   88,  312,
      311,  132,  310,  309,  207,   89,   90,   91,   92,   93,
       96,  330,  308,  307,  330,  110,  330,  266,  265,  330,
      330,  105,  304,  330,  331,  330,   97,  303,  330,  331,
      190,  302,  301,   98,   99,  100,  101,  102,  195,  300,
       95,  299,  298,  180,  297,  296,  295,   86,  294,   81,
      196,  105,  293,  107,  292,  163,  291,  290,  289,  107,
      150,  288,  107,  121,  287,  286,  231,  150,  285,  284,

      122,  123,  124,  125,  126,  133,  145,  283,  282,  281,
      120,  280,  279,  278,  219,  277,  276,  275,  274,  132,
      272,  134,  271,  270,  207,  269,  268,  267,  135,  136,
      137,  138,  139,   87,  110,  266,  265,  259,  258,  257,
      190,  256,  255,  254,  253,   95,  252,  251,  250,  180,
      249,  248,  247,  246,   88,   86,  245,  244,   81,  243,
      243,   89,   90,   91,   92,   93,   96,  128,  242,  241,
      240,  163,  150,  239,  238,  237,  236,  150,  150,  235,
      234,  233,   97,  232,  231,  150,  230,  229,  228,   98,
       99,  100,  101,  102,  133,  145,  227,  226,  225,  224,

      120,  223,  222,  221,  220,  219,  128,  211,  210,  209,
      134,  208,  207,  105,  206,  205,  204,  135,  136,  137,
      138,  139,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   86,   86,   86,   86,   86,   86,   86,   86,   94,
       94,  203,   94,   94,   94,   94,   94,   94,   95,   95,
       95,   95,   95,   95,   95,   95,  110,  110,  110,  110,
      110,  110,  110,  110,  120,  110,  194,  120,  127,  127,
      193,  127,  127,  127,  127,  127,  127,  128,  128,  128,
      132,  132,  132,  132,  132,  132,  132,  132,  120,  120,
      120,  120,  120,  120,  120,  120,  150,  150,  150,  150,

      192,  150,  168,  168,  191,  168,  168,  168,  168,  190,
      168,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  184,
      183,  182,  181,  180,  174,  173,  172,   81,  169,  171,
      128,  170,  169,  167,  166,  165,  164,  163,  149,  148,
      147,  146,  145,  133,  128,  118,  108,  103,   85,   84,
       83,   82,   81,  343,   17,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,

      343,  343,  343,  343
    } ;

static yyconst flex_int16_t yy_chk[805] =
    {   0,
        0,   44,   44,   44,  108,    9,    9,    9,   10,   10,
       10,   11,    0,  108,    0,   11,   11,   31,   31,    0,
       31,  119,  119,  119,    0,    0,   31,    0,    9,   31,
        0,   10,   11,    1,    1,    1,    1,    1,    2,    2,
        2,    2,    2,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
       12,  342,  341,  340,   12,   12,   15,   34,   34,   16,
       34,   39,   39,   39,   39,   39,   34,  339,  338,   34,
       48,   12,   13,   13,   13,  337,   62,   15,   13,   13,
       16,   38,   38,   48,   38,  336,   48,  335,   48,   62,

       38,  334,   62,   38,   62,   13,   14,   14,   14,  333,
      332,   40,   14,   14,   40,   53,   53,   53,   53,   53,
       40,  331,  131,   40,   40,  131,  329,  131,  328,   14,
       26,   88,   88,   88,   88,   88,   97,   97,   97,   97,
       97,  105,  327,  109,  105,  326,  109,  325,  324,  323,
      105,   26,  109,  105,  105,  109,  109,  322,   26,   26,
       26,   26,   26,   28,  106,  106,  321,  106,  107,  107,
      320,  107,  116,  106,  319,  116,  106,  107,  318,   28,
      107,  116,  317,  316,  116,  116,   28,   28,   28,   28,
       28,   45,  121,  121,  121,  121,  121,  315,   45,   45,

       45,   45,   45,   50,  130,  134,  134,  134,  134,  134,
      130,  196,  196,  130,  196,  212,  314,  313,  312,   50,
      196,  212,  311,  196,  212,  310,   50,   50,   50,   50,
       50,   60,  309,  308,  307,  304,  303,  302,   60,   60,
       60,   60,   60,   63,  197,  197,  198,  197,  301,  198,
      300,  202,  202,  197,  202,  198,  197,   63,  198,  198,
      202,  299,  298,  202,   63,   63,   63,   63,   63,   64,
      297,  213,  296,  295,   64,  294,   64,  213,  260,  260,
      213,  260,  261,  273,  213,  261,  293,  260,  292,  273,
      260,  261,  273,  291,  261,  261,  273,   64,  290,  289,

      288,  287,   64,   64,   64,   64,   64,   86,  262,  286,
      285,  262,  284,  305,  305,  283,  305,  262,  282,  281,
      262,  262,  305,  280,  279,  305,  278,  277,   86,  276,
      275,  274,  272,  271,  270,   86,   86,   86,   86,   86,
       95,  306,  269,  268,  306,  267,  330,  265,  264,  330,
      306,  263,  259,  306,  306,  330,   95,  258,  330,  330,
      257,  256,  255,   95,   95,   95,   95,   95,  104,  254,
      253,  252,  251,  250,  249,  248,  247,  246,  245,  244,
      104,  104,  242,  104,  241,  240,  239,  238,  237,  104,
      236,  235,  104,  120,  234,  233,  232,  231,  230,  229,

      120,  120,  120,  120,  120,  132,  228,  227,  226,  225,
      224,  223,  222,  221,  220,  218,  217,  216,  215,  214,
      211,  132,  210,  209,  208,  206,  205,  204,  132,  132,
      132,  132,  132,  180,  203,  201,  199,  194,  193,  192,
      191,  189,  188,  187,  186,  185,  184,  183,  182,  181,
      179,  178,  177,  176,  180,  175,  174,  173,  172,  171,
      170,  180,  180,  180,  180,  180,  190,  169,  167,  166,
      165,  164,  163,  162,  161,  160,  159,  158,  157,  156,
      155,  154,  190,  153,  152,  150,  149,  148,  147,  190,
      190,  190,  190,  190,  219,  146,  144,  143,  142,  141,

      140,  139,  138,  137,  136,  135,  129,  126,  125,  124,
      219,  123,  122,  117,  115,  114,  113,  219,  219,  219,
      219,  219,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  345,  345,  345,  345,  345,  345,  345,  345,  346,
      346,  112,  346,  346,  346,  346,  346,  346,  347,  347,
      347,  347,  347,  347,  347,  347,  348,  348,  348,  348,
      348,  348,  348,  348,  349,  111,  102,  349,  350,  350,
      101,  350,  350,  350,  350,  350,  350,  351,  351,  351,
      352,  352,  352,  352,  352,  352,  352,  352,  353,  353,
      353,  353,  353,  353,  353,  353,  354,  354,  354,  354,

      100,  354,  355,  355,   99,  355,  355,  355,  355,   98,
      355,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      357,  357,  357,  357,  357,  357,  357,  357,  357,   93,
       92,   91,   90,   89,   85,   84,   83,   82,   80,   79,
       76,   75,   73,   70,   69,   68,   67,   66,   59,   58,
       57,   56,   55,   52,   51,   42,   33,   29,   23,   22,
       21,   20,   19,   17,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,

      343,  343,  343,  343
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flexLexer/lex.l"
#line 2 "flexLexer/lex.l"

typedef enum flex_mode
{
    flex_mode_sql,
    flex_mode_bash,
    flex_mode_bashQuote,
    flex_mode_bashTick,
    flex_mode_bashExec,
    flex_mode_bashTickExec,
    flex_mode_bashTickQuote
} flex_mode;

typedef struct mode_info {
    flex_mode mode_type;
    flex_uint32_t parentheses_count;//未匹配的括号数量
    mode_info * next;//下一个mode_info节点
} mode_info;

typedef struct token_info {
    const char * mode; //存储使用的tokenize规则，为sql或bash
    flex_uint32_t * result; //存储token起止下标在输入字符串上的位置，格式为[token1_start_pos,token1_stop_pos, token2_start_pos,token2_stop_pos ...]
    flex_uint32_t result_len; //当前result已申请的内存大小
    const char * input; //当前输入字符串
    flex_uint32_t crt_input_pos; //当前输入字符串已分析的长度
    flex_uint32_t crt_input_unicode_pos; //当前输入字符串已分析的unicode字符数
    flex_uint32_t crt_result_pos; //当前result数组长度
    mode_info * mode_info_ptr;//记录flex_mode当前状态信息的堆栈
} token_info;


#line 40 "flexLexer/lex.l"
#include <stdlib.h>
#include "flex.h"

#ifdef _WIN32
#define YY_NO_UNISTD_H
static inline int isatty(int desc) { return 0; }
#endif

#define ADD_TOKEN \
    if(add_token(yyextra, yyleng)!=0) \
        return -1;

#define SKIP_TOKEN change_pos(yyextra, yyleng);
#define INIT_RESULT_LEN 8192 * 2

#define BEGIN_MODE(mode) \
    switch(mode){ \
        case flex_mode_sql: \
            BEGIN(sql); \
            break; \
        case flex_mode_bash: \
            BEGIN(bash); \
            break; \
        case flex_mode_bashQuote: \
            BEGIN(bashQuote); \
            break; \
        case flex_mode_bashTick: \
            BEGIN(bashTick); \
            break; \
        case flex_mode_bashExec: \
            BEGIN(bashExec); \
            break; \
        case flex_mode_bashTickExec: \
            BEGIN(bashTickExec); \
            break; \
        case flex_mode_bashTickQuote: \
            BEGIN(bashTickQuote); \
            break; \
    }

#define PUSH_MODE(mode_type) \
    if(bash_push_mode(yyextra, mode_type)!=0) \
        return -1; \
    BEGIN_MODE(mode_type)

#define POP_MODE \
    BEGIN_MODE(bash_pop_mode(yyextra, 0))

#define POP_MODE_TICK \
    BEGIN_MODE(bash_pop_mode(yyextra, 1))

#define INIT_MODE(mode_type) \
    if(init_mode(yyextra, flex_mode_##mode_type) != 0) \
        return -1; \
    BEGIN(mode_type);

#define FREE_MODE \
    free_mode(yyextra);

#define PARENTHESES_ADD \
    yyextra->mode_info_ptr->parentheses_count++;

#define PARENTHESES_SUB \
    if ( yyextra->mode_info_ptr->parentheses_count-- == 0){ \
        POP_MODE \
    }

static flex_uint32_t init_mode(token_info * yyext, flex_mode mode_type){
    mode_info* init_mode_info_ptr = (mode_info*)malloc(sizeof(mode_info));
    if(init_mode_info_ptr == NULL){
        return -1;
    }
    init_mode_info_ptr->mode_type = mode_type;
    init_mode_info_ptr->parentheses_count = 0;
    init_mode_info_ptr->next = NULL;
    yyext->mode_info_ptr = init_mode_info_ptr;
    return 0;
}

static void free_mode(token_info * yyext){
    mode_info* next_ptr = yyext->mode_info_ptr;
    mode_info* crt_ptr;
    while(next_ptr != NULL){
        crt_ptr = next_ptr;
        next_ptr = next_ptr->next;
        free(crt_ptr);
    }
    return;
}

static flex_uint32_t bash_push_mode(token_info * yyext, flex_mode next_mode){
    mode_info * new_mode = (mode_info*)malloc(sizeof(mode_info));
    if(new_mode == NULL){
        return -1;
    }
    new_mode->mode_type = next_mode;
    new_mode->parentheses_count = 0;
    new_mode->next = yyext->mode_info_ptr;
    yyext->mode_info_ptr = new_mode;
    return 0;
}

static flex_mode bash_pop_mode(token_info * yyext, flex_uint32_t is_tick){
    mode_info * next_mode_ptr = yyext->mode_info_ptr->next;
    if(is_tick){
        while(next_mode_ptr != NULL && 
              yyext->mode_info_ptr->mode_type != flex_mode_bashTick
        ){
            next_mode_ptr = next_mode_ptr->next;
            bash_pop_mode(yyext, 0);
        }
    }
    
    if(next_mode_ptr == NULL){
        return (yyext->mode_info_ptr->mode_type);
    }
    else{
        free(yyext->mode_info_ptr);
        yyext->mode_info_ptr = next_mode_ptr;
        return next_mode_ptr->mode_type;
    }
}

static flex_uint32_t check_mem(token_info * yyext, flex_uint32_t new_str_len){
    if(yyext->crt_result_pos + new_str_len > yyext->result_len){
        flex_uint32_t new_result_len = yyext->result_len;
        flex_uint32_t * new_result;
        do{
            // 结果不大于10M
            if (new_result_len > (1024 * 1024 * 10)){
                return -1;
            }
            new_result_len = new_result_len * 2;
        }while(yyext->crt_result_pos + new_str_len > new_result_len);
        new_result = (flex_uint32_t*)realloc(yyext->result, sizeof(flex_uint32_t) * new_result_len);
        if (new_result == NULL){
            return -1;
        }
        yyext->result = new_result;
        yyext->result_len = new_result_len;
        return 0;
    }
    else{
        return 0;
    }
}

static flex_uint32_t utf8len(const char * str, flex_uint32_t str_len){
    flex_uint32_t pos = 0;
    flex_uint32_t length = 0;

    while (pos < str_len) {
        if (0xfc == (0xfe & *(str + pos))) {
            // 6-byte utf8 code point (began with 0b1111110x)
            pos += 6;
            // javascript 中大于3byte的unicode会被拆分为2字符，长度+1，下同
            length++;
        } else if (0xf8 == (0xfc & *(str + pos))) {
            // 5-byte utf8 code point (began with 0b111110xx)
            pos += 5;
            length++;
        } else if (0xf0 == (0xf8 & *(str + pos))) {
            // 4-byte utf8 code point (began with 0b11110xxx)
            pos += 4;
            length++;
        } else if (0xe0 == (0xf0 & *(str + pos))) {
            // 3-byte utf8 code point (began with 0b1110xxxx)
            pos += 3;
        } else if (0xc0 == (0xe0 & *(str + pos))) {
            // 2-byte utf8 code point (began with 0b110xxxxx)
            pos += 2;
        } else {
            // 1-byte ascii (began with 0b0xxxxxxx)
            pos += 1;
        }

        // no matter the bytes we marched s forward by, it was
        // only 1 utf8 codepoint
        length++;
    }
    return length;
}

static void change_pos(token_info * yyext, flex_uint32_t length){
    yyext->crt_input_unicode_pos += utf8len(yyext->input + yyext->crt_input_pos, length);
    yyext->crt_input_pos += length;
}

static flex_uint32_t add_token(token_info * yyext, flex_uint32_t length){
    if (check_mem(yyext, length) == 0){
        *(yyext->result + yyext->crt_result_pos) = yyext->crt_input_unicode_pos;
        yyext->crt_result_pos ++;
        // printf("crt_result_pos %d\n", yyext->crt_result_pos);
        change_pos(yyext, length);
        *(yyext->result + yyext->crt_result_pos) = yyext->crt_input_unicode_pos;
        yyext->crt_result_pos ++;
        return 0;
    }
    else{
        return -1;
    }
}

//common tokens
//sql tokens
//bash fragment
//bash tokens

#line 964 "lex.yy.c"

#define INITIAL 0
#define sql 1
#define bash 2
#define bashQuote 3
#define bashTick 4
#define bashExec 5
#define bashTickExec 6
#define bashTickQuote 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE token_info *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int yylex_init (yyscan_t* scanner);

int yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int line_number ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 321 "flexLexer/lex.l"

    if(strcmp(yyextra->mode, "sql") == 0){
        INIT_MODE(sql)
    }
    else if(strcmp(yyextra->mode, "bash") == 0){
        INIT_MODE(bash)
    }
    else{
        return -1;
    }

#line 1202 "lex.yy.c"

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 344 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 765 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 333 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 335 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 336 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 338 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 339 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 341 "flexLexer/lex.l"
{SKIP_TOKEN}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 342 "flexLexer/lex.l"
{SKIP_TOKEN}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 344 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 345 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 347 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 348 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 349 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 351 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 352 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 354 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 356 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 358 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 360 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 362 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 364 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 366 "flexLexer/lex.l"
{SKIP_TOKEN}
	YY_BREAK


case 22:
YY_RULE_SETUP
#line 370 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 371 "flexLexer/lex.l"
{ADD_TOKEN PARENTHESES_ADD}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 372 "flexLexer/lex.l"
{ADD_TOKEN PARENTHESES_SUB}
	YY_BREAK


case 25:
YY_RULE_SETUP
#line 376 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK


case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 380 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 381 "flexLexer/lex.l"
{SKIP_TOKEN}
	YY_BREAK


case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 385 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 386 "flexLexer/lex.l"
{ADD_TOKEN POP_MODE}
	YY_BREAK


case 30:
YY_RULE_SETUP
#line 390 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 391 "flexLexer/lex.l"
{ADD_TOKEN PUSH_MODE(flex_mode_bashQuote)}
	YY_BREAK


case 32:
YY_RULE_SETUP
#line 395 "flexLexer/lex.l"
{ADD_TOKEN PUSH_MODE(flex_mode_bashTickExec)}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 396 "flexLexer/lex.l"
{ADD_TOKEN POP_MODE_TICK}
	YY_BREAK


case 34:
YY_RULE_SETUP
#line 400 "flexLexer/lex.l"
{ADD_TOKEN PUSH_MODE(flex_mode_bashExec)}
	YY_BREAK


case 35:
YY_RULE_SETUP
#line 404 "flexLexer/lex.l"
{ADD_TOKEN PUSH_MODE(flex_mode_bashTick)}
	YY_BREAK


case 36:
YY_RULE_SETUP
#line 408 "flexLexer/lex.l"
{ADD_TOKEN PUSH_MODE(flex_mode_bashTick)}
	YY_BREAK


case 37:
YY_RULE_SETUP
#line 412 "flexLexer/lex.l"
{ADD_TOKEN PUSH_MODE(flex_mode_bashTickExec)}
	YY_BREAK


case 38:
YY_RULE_SETUP
#line 416 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 417 "flexLexer/lex.l"
{ADD_TOKEN PUSH_MODE(flex_mode_bashTickQuote)}
	YY_BREAK

case 40:
YY_RULE_SETUP
#line 420 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 421 "flexLexer/lex.l"
{ADD_TOKEN}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(sql):
case YY_STATE_EOF(bash):
case YY_STATE_EOF(bashQuote):
case YY_STATE_EOF(bashTick):
case YY_STATE_EOF(bashExec):
case YY_STATE_EOF(bashTickExec):
case YY_STATE_EOF(bashTickQuote):
#line 423 "flexLexer/lex.l"
{ FREE_MODE return 0; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 425 "flexLexer/lex.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1538 "lex.yy.c"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 344 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 344 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 343);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf ,yyscanner );

	yyfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */

int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 425 "flexLexer/lex.l"


flex_token_result flex_lexing(const char *input, flex_uint32_t len, const char *tokenizer_type){
    flex_uint32_t * init_token_result = (flex_uint32_t *)malloc(sizeof(flex_uint32_t) * INIT_RESULT_LEN);
    if(init_token_result == NULL){
        flex_token_result res = {NULL, 0};
        return res;
    }
    flex_uint32_t res_state;
    yyscan_t scanner;
    token_info ti = {
        tokenizer_type,
        init_token_result,
        INIT_RESULT_LEN,
        input,
        0,
        0,
        0,
        NULL
    };
    if(yylex_init_extra(&ti,&scanner) != 0){
        res_state = 1;
    }
    else{
    #ifndef DISABLE_EXCEPTION
        try{
    #endif

            YY_BUFFER_STATE buffer = yy_scan_bytes(input,len,scanner);
            res_state = yylex(scanner);
            
    #ifndef DISABLE_EXCEPTION
        }
        catch(const char* msg){
            res_state = 1;
        }
    #endif
        yylex_destroy(scanner);
    }
    if(res_state != 0){
        free(ti.result);
        flex_token_result res = {NULL, 0};
        return res;
    }
    flex_token_result res = {ti.result, ti.crt_result_pos};
    return res;
}
