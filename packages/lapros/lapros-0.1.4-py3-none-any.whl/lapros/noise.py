# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/10_noise.ipynb (unless otherwise specified).

__all__ = ['suspect', 'suspect', 'suspect']

# Internal Cell
import numpy as np
import pandas as pd
from plum import dispatch
from .util import set_logger

logger = set_logger();

# Cell
@dispatch
def suspect(
    labels: np.ndarray, unique_labels: set = set(), *, probas: np.ndarray
) -> np.ndarray:
    """The internal method to rank the suspicious labels given negative probas from a binary classifier.

    Params:
        labels: Numpy Array of shape n x 1, label 0 for negative, 1 for positive cases.
        probas: Numpy Array of shape n x 1, probabilites for positive cases

    Return:
        ranks: Numpy Array of shape n x 1, the magnitude of suspicious labels, values between (-1, 1), the larger the more suspicious.
    """
    logger.debug(
        f"Numpy arrays labels and probas must have same length {len(labels)} vs {len(probas)}"
    )
    if len(unique_labels) == 0:
        unique_labels = np.unique(labels)
    logger.debug(f"Unique labels {unique_labels}")
    if len(labels) != len(probas) or len(probas.shape) != len(unique_labels):
        logger.debug("Trying to reshape probas")
        probas = probas.reshape((len(labels), -1))
    logger.debug(f"Shape of labels and probas: {labels.shape} vs {probas.shape}")
    assert len(labels) == len(probas)
    assert probas.shape[1] == 1  # positive probabilieis from a binary classifier
    assert set(unique_labels).issubset([0, 1])  # binary classification
    assert (probas >= 0).all() and (
        probas <= 1
    ).all()  # probas should be between 0 and 1

    # TBD: temporary implementation
    ranks = np.abs(labels - probas[:, 0])
    logger.debug(f"ranks {ranks}")
    assert len(labels) == len(ranks)

    return ranks

# Cell
@dispatch
def suspect(labels: pd.Series, *, probas: pd.DataFrame) -> pd.Series:
    """Rank the suspicious using Pandas series and dataframes"""
    logger.debug(
        f"Pandas series labels and dataframe probas must have same length {len(labels)} vs {len(probas)}"
    )
    ranks = suspect(labels.to_numpy(), probas=probas.iloc[:, [0]].to_numpy())
    ranks = pd.Series(ranks, index=labels.index)
    return ranks

# Cell
@dispatch
def suspect(labels: list, *, probas: list) -> list:
    """Rank the  suspicious using normal Python lists"""
    logger.debug("Normal Python lists")
    ranks = suspect(np.array(labels), probas=np.array(probas))
    # ranks = ranks.tolist() # DO NOT do this. Keep the numerical accuracy
    return ranks