# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from tennis_new_library import tennis_new_pb2 as tennis__new__library_dot_tennis__new__pb2
from th2_grpc_common import common_pb2 as th2__grpc__common_dot_common__pb2


class MatchInfoStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MatchResult = channel.unary_unary(
                '/alexander.oniani.tennis_new.MatchInfo/MatchResult',
                request_serializer=tennis__new__library_dot_tennis__new__pb2.Match.SerializeToString,
                response_deserializer=th2__grpc__common_dot_common__pb2.Message.FromString,
                )
        self.MostWinners = channel.unary_unary(
                '/alexander.oniani.tennis_new.MatchInfo/MostWinners',
                request_serializer=tennis__new__library_dot_tennis__new__pb2.Tournament.SerializeToString,
                response_deserializer=tennis__new__library_dot_tennis__new__pb2.BestPlayer.FromString,
                )
        self.MostErrors = channel.unary_unary(
                '/alexander.oniani.tennis_new.MatchInfo/MostErrors',
                request_serializer=tennis__new__library_dot_tennis__new__pb2.Tournament.SerializeToString,
                response_deserializer=tennis__new__library_dot_tennis__new__pb2.BestPlayer.FromString,
                )
        self.MostAces = channel.unary_unary(
                '/alexander.oniani.tennis_new.MatchInfo/MostAces',
                request_serializer=tennis__new__library_dot_tennis__new__pb2.Tournament.SerializeToString,
                response_deserializer=tennis__new__library_dot_tennis__new__pb2.BestPlayer.FromString,
                )
        self.MostGamesWon = channel.unary_unary(
                '/alexander.oniani.tennis_new.MatchInfo/MostGamesWon',
                request_serializer=tennis__new__library_dot_tennis__new__pb2.Tournament.SerializeToString,
                response_deserializer=tennis__new__library_dot_tennis__new__pb2.BestPlayer.FromString,
                )


class MatchInfoServicer(object):
    """Missing associated documentation comment in .proto file."""

    def MatchResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MostWinners(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MostErrors(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MostAces(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MostGamesWon(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MatchInfoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MatchResult': grpc.unary_unary_rpc_method_handler(
                    servicer.MatchResult,
                    request_deserializer=tennis__new__library_dot_tennis__new__pb2.Match.FromString,
                    response_serializer=th2__grpc__common_dot_common__pb2.Message.SerializeToString,
            ),
            'MostWinners': grpc.unary_unary_rpc_method_handler(
                    servicer.MostWinners,
                    request_deserializer=tennis__new__library_dot_tennis__new__pb2.Tournament.FromString,
                    response_serializer=tennis__new__library_dot_tennis__new__pb2.BestPlayer.SerializeToString,
            ),
            'MostErrors': grpc.unary_unary_rpc_method_handler(
                    servicer.MostErrors,
                    request_deserializer=tennis__new__library_dot_tennis__new__pb2.Tournament.FromString,
                    response_serializer=tennis__new__library_dot_tennis__new__pb2.BestPlayer.SerializeToString,
            ),
            'MostAces': grpc.unary_unary_rpc_method_handler(
                    servicer.MostAces,
                    request_deserializer=tennis__new__library_dot_tennis__new__pb2.Tournament.FromString,
                    response_serializer=tennis__new__library_dot_tennis__new__pb2.BestPlayer.SerializeToString,
            ),
            'MostGamesWon': grpc.unary_unary_rpc_method_handler(
                    servicer.MostGamesWon,
                    request_deserializer=tennis__new__library_dot_tennis__new__pb2.Tournament.FromString,
                    response_serializer=tennis__new__library_dot_tennis__new__pb2.BestPlayer.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'alexander.oniani.tennis_new.MatchInfo', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MatchInfo(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def MatchResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/alexander.oniani.tennis_new.MatchInfo/MatchResult',
            tennis__new__library_dot_tennis__new__pb2.Match.SerializeToString,
            th2__grpc__common_dot_common__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MostWinners(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/alexander.oniani.tennis_new.MatchInfo/MostWinners',
            tennis__new__library_dot_tennis__new__pb2.Tournament.SerializeToString,
            tennis__new__library_dot_tennis__new__pb2.BestPlayer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MostErrors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/alexander.oniani.tennis_new.MatchInfo/MostErrors',
            tennis__new__library_dot_tennis__new__pb2.Tournament.SerializeToString,
            tennis__new__library_dot_tennis__new__pb2.BestPlayer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MostAces(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/alexander.oniani.tennis_new.MatchInfo/MostAces',
            tennis__new__library_dot_tennis__new__pb2.Tournament.SerializeToString,
            tennis__new__library_dot_tennis__new__pb2.BestPlayer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MostGamesWon(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/alexander.oniani.tennis_new.MatchInfo/MostGamesWon',
            tennis__new__library_dot_tennis__new__pb2.Tournament.SerializeToString,
            tennis__new__library_dot_tennis__new__pb2.BestPlayer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
