openapi: 3.0.3
info:
  title: Tapis Applications API
  description: The Tapis Applications API provides for management of Tapis applications including permissions.
  version: '1.1.0'
  termsOfService: "https://tapis-project.org"
  contact:
    name: "Applications API - CICSupport"
    url: "https://tapis-project.org"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: 3-Clause BSD License
    url: 'https://opensource.org/licenses/BSD-3-Clause'
externalDocs:
  description: Tapis Project
  url: 'https://tapis-project.org'
servers:
  - url: 'http://localhost:8080/'
    description: Local test environment
    variables: {}
  - url: 'https://dev.develop.tapis.io/'
    description: Development environment
    variables: {}
security:
  - TapisJWT: []
tags:
  - name: General
    description: General service health and readiness
  - name: Applications
    description: Manage Tapis application resources. Create, retrieve, update, etc.
  - name: Permissions
    description: Manage Tapis permissions for application resources. Grant, revoke and retrieve.

# ------------------------------------------------------------------------------
# --- Paths -------------------------------------------------------------------
# ------------------------------------------------------------------------------
paths:

  # --- Paths for /apps -----------------------------------------------------
  '/v3/apps/healthcheck':
    get:
      tags:
        - General
      description: Health check.
      operationId: healthCheck
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
  '/v3/apps/readycheck':
    get:
      tags:
        - General
      description: Ready check.
      operationId: readyCheck
      responses:
        '200':
          description: Service ready.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '503':
          description: Service unavailable.

  '/v3/apps':
    get:
      tags:
        - Applications
      summary: Retrieve applications
      description: Retrieve list of applications. Use search and select query parameters to limit results.
      operationId: getApps
      parameters:
        - name: search
          in: query
          description: Search conditions as a single query paramter. For example search=(id.like.MyApp*)~(enabled.eq.true)
          schema:
            type: string
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=id(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=id(asc)&startAfter=my.app1
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. For example select=id,version,owner
          schema:
            type: string
            default: 'summaryAttributes'
        - name: showDeleted
          in: query
          description: Indicates if Applications marked as deleted should be shown in the results. Default is false.
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespApps'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Applications
      summary: Create a new version of an application
      description: |
        Create an application using a request body. App id+version must be unique within tenant and can be composed of
        alphanumeric characters and the following special characters [-._~]. Id must begin with an alphabetic character
        and can be no more than 80 characters in length.

        Note that certain attributes (such as tenant) are allowed but ignored so that the JSON result returned by a GET
        may be modified and used when making a POST request to create an application.
        The attributes that are allowed but ignored are

          - tenant
          - uuid
          - deleted
          - created
          - updated
      operationId: createAppVersion
      requestBody:
        required: true
        description: A JSON object specifying information for the app to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPostApp'
      responses:
        '201':
          description: Application created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: Application already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/search':
    get:
      tags:
        - Applications
      summary: Retrieve list of applications matching search conditions specified as query parameters
      description: Retrieve details for applications. Use query parameters to specify search conditions. For example ?owner.eq=jdoe&enabled.eq=false
      operationId: searchAppsQueryParameters
      parameters:
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=id(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=id(asc)&startAfter=my.app2
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. For example select=id,version,owner
          schema:
            type: string
            default: 'summaryAttributes'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespApps'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Applications
      summary: Retrieve applications matching search conditions
      description: Retrieve details for applications. Use request body to specify SQL-like search conditions.
      operationId: searchAppsRequestBody
      parameters:
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=id(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=id(asc)&startAfter=my.app1
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. For example select=id,version,owner
          schema:
            type: string
            default: 'summaryAttributes'
      requestBody:
        required: true
        description: A JSON object specifying SQL-like search conditions as an array of strings. Strings are concatenated to form full search query.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqSearchApps'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespApps'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}':
    get:
      tags:
        - Applications
      summary: Retrieve latest version of an application
      description: Retrieve latest version of an application.
      operationId: getAppLatestVersion
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: requireExecPerm
          in: query
          description: check for EXECUTE permission as well as READ permission.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of the result item. For example select=id,version,owner
          schema:
            type: string
            default: 'allAttributes'
      responses:
        '200':
          description: Application found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespApp'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/{appVersion}':
    get:
      tags:
        - Applications
      summary: Retrieve details for specific version of an application
      description: Retrieve information for an application given the application Id and version.
      operationId: getApp
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: appVersion
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AppVersionString'
        - name: requireExecPerm
          in: query
          description: check for EXECUTE permission as well as READ permission.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of the result item. For example select=id,version,owner
          schema:
            type: string
            default: 'allAttributes'
      responses:
        '200':
          description: Application found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespApp'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    patch:
      tags:
        - Applications
      summary: Update selected attributes of an existing version of an application
      description: |
        Update selected attributes of an existing version of an application.
        Request body may only contain updatable attributes. Application must exist.

        Attributes that may not be updated via PATCH are

          - id
          - owner
          - enabled

        Note that the attributes owner and enabled may be modified using other endpoints.
      operationId: patchApp
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: appVersion
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AppVersionString'
      requestBody:
        required: true
        description: A JSON object specifying changes to be applied.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPatchApp'
      responses:
        '200':
          description: Application updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    put:
      tags:
        - Applications
      summary: Update all updatable attributes of an application
      description: |
        Update all updatable attributes of an application using a request body identical to POST. Application must exist.

        Note that certain attributes (such as tenant) are allowed but ignored so that the JSON result returned by a GET
        may be modified and used when making a PUT request to update.

        The attributes that are allowed but ignored for both PUT and POST are

          - tenant
          - uuid
          - deleted
          - created
          - updated

        In addition for a PUT operation the following non-updatable attributes are allowed but ignored

          - id
          - version
          - owner
          - enabled

        Note that the attributes owner and enabled may be modified using other endpoints.
      operationId: putApp
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: appVersion
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AppVersionString'
      requestBody:
        required: true
        description: A JSON object specifying changes to be applied.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPutApp'
      responses:
        '200':
          description: Application updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: Application already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/isEnabled':
    get:
      tags:
        - Applications
      summary: Check if application is currently enabled
      description: Check if an application is currently enabled, i.e. available for use.
      operationId: isEnabled
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Check successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBoolean'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/enable':
    post:
      tags:
        - Applications
      summary: Mark an application availabe for use
      description: Mark an application available for use. Applies to all versions.
      operationId: enableApp
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Application enabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/disable':
    post:
      tags:
        - Applications
      summary: Mark an application unavailabe for use
      description: Mark an application unavailable for use. Applies to all versions.
      operationId: disableApp
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Application disabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/delete':
    post:
      tags:
        - Applications
      summary: Mark an application as deleted
      description: Mark an application as deleted. Application will not appear in queries unless explicitly requested.
      operationId: deleteApp
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Application deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/undelete':
    post:
      tags:
        - Applications
      summary: Mark an application as not deleted
      description: Mark an application as not deleted. Application will appear in queries.
      operationId: undeleteApp
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Application undeleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/changeOwner/{userName}':
    post:
      tags:
        - Applications
      summary: Change application owner
      description: Change owner of an application. Applies to all versions.
      operationId: changeAppOwner
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: Application owner updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  # --- Paths for /perms -------------------------------------------------------
  '/v3/apps/perms/{appId}/user/{userName}':
    get:
      tags:
        - Permissions
      summary: Retrieve application user permissions
      description: Retrieve all application related permissions for a given application and user.
      operationId: getUserPerms
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Permissions
      summary: Grant application user permissions
      description: Create permissions in the Security Kernel for a user. Requester must be owner. Permissions are READ, MODIFY, EXECUTE.
      operationId: grantUserPerms
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      requestBody:
        required: true
        description: A JSON object specifying a list of permissions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPerms'
      responses:
        '200':
          description: Permissions granted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/apps/perms/{appId}/user/{userName}/revoke':
    post:
      tags:
        - Permissions
      summary: Revoke application user permissions
      description: Remove permissions from the Security Kernel for a user. Requester must be owner. Permissions are READ, MODIFY, EXECUTE.
      operationId: revokeUserPerms
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      requestBody:
        required: true
        description: A JSON object specifying a list of permissions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPerms'
      responses:
        '200':
          description: Permission revoked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/apps/perms/{appId}/user/{userName}/{permission}':
    delete:
      tags:
        - Permissions
      summary: Revoke application user permission
      description: Remove user permission from the Security Kernel. Requester must be owner. Permissions are READ, MODIFY, EXECUTE.
      operationId: revokeUserPerm
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
        - name: permission
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Permission revoked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

# ------------------------------------------------------------------------------
# --- Components ---------------------------------------------------------------
# ------------------------------------------------------------------------------
components:
  securitySchemes:
    TapisJWT:
      type: apiKey
      description: Tapis signed JWT token authentication
      name: X-Tapis-Token
      in: header
  schemas:
    # ------------------------------------------------------------------------------
    # --- Model objects ------------------------------------------------------------
    # ------------------------------------------------------------------------------
    # --- TapisApp ------------------------------------------------------------------
    TapisApp:
      type: object
      properties:
        tenant:
          type: string
        id:
          $ref: '#/components/schemas/IdString'
        version:
          $ref: '#/components/schemas/AppVersionString'
        description:
          $ref: '#/components/schemas/AppJobDescriptionString'
        owner:
          $ref: '#/components/schemas/UserNameApiDefaultString'
        enabled:
          type: boolean
          default: true
        runtime:
          $ref: '#/components/schemas/RuntimeEnum'
        runtimeVersion:
          type: string
        runtimeOptions:
          $ref: '#/components/schemas/RuntimeOptions'
        containerImage:
          type: string
        jobType:
          $ref: '#/components/schemas/JobTypeEnum'
        maxJobs:
          type: integer
          default: -1
        maxJobsPerUser:
          type: integer
          default: -1
        strictFileInputs:
          type: boolean
          default: false
        jobAttributes:
          $ref: '#/components/schemas/JobAttributes'
        tags:
          type: array
          items:
            type: string
        notes:
          type: object
        uuid:
          type: string
          format: uuid
        deleted:
          type: boolean
        created:
          type: string
        updated:
          type: string
    # --- RuntimeOptions --------------------------------------------------------
    RuntimeOptions:
      type: array
      items:
        $ref: '#/components/schemas/RuntimeOptionEnum'
    # --- JobAttributes --------------------------------------------------------
    JobAttributes:
      type: object
      properties:
        description:
          $ref: '#/components/schemas/AppJobDescriptionString'
        dynamicExecSystem:
          type: boolean
          default: false
        execSystemConstraints:
          type: array
          minItems: 1
          items:
            type: string
            minLength: 3
        execSystemId:
          $ref: '#/components/schemas/IdString'
        execSystemExecDir:
          $ref: '#/components/schemas/DirString'
        execSystemInputDir:
          $ref: '#/components/schemas/DirString'
        execSystemOutputDir:
          $ref: '#/components/schemas/DirString'
        execSystemLogicalQueue:
          $ref: '#/components/schemas/QueueNameString'
        archiveSystemId:
          $ref: '#/components/schemas/IdString'
        archiveSystemDir:
          $ref: '#/components/schemas/DirString'
        archiveOnAppError:
          type: boolean
          default: true
        isMpi:
          type: boolean
          default: false
        mpiCmd:
          type: string
          minLength: 1
          maxLength: 126
        cmdPrefix:
          type: string
          minLength: 1
          maxLength: 126
        parameterSet:
          $ref: '#/components/schemas/ParameterSet'
        fileInputs:
          type: array
          items:
            $ref: '#/components/schemas/AppFileInput'
        fileInputArrays:
          type: array
          items:
            $ref: '#/components/schemas/AppFileInputArray'
        nodeCount:
          type: integer
        coresPerNode:
          type: integer
        memoryMB:
          type: integer
        maxMinutes:
          type: integer
        subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/NotificationSubscription'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagString'
    # --- ParameterSet --------------------------------------------------------
    ParameterSet:
      type: object
      properties:
        appArgs:
          type: array
          items:
            $ref: '#/components/schemas/AppArgSpec'
        containerArgs:
          type: array
          items:
            $ref: '#/components/schemas/AppArgSpec'
        schedulerOptions:
          type: array
          items:
            $ref: '#/components/schemas/AppArgSpec'
        envVariables:
          type: array
          items:
            $ref: '#/components/schemas/KeyValuePair'
        archiveFilter:
          type: object
          properties:
            includes:
              type: array
              items:
                type: string
                minLength: 1
            excludes:
              type: array
              items:
                type: string
                minLength: 1
            includeLaunchFiles:
                type: boolean
                default: true
    # --- AppFileInput --------------------------------------------------------
    AppFileInput:
      type: object
      required:
        - name
        - targetPath
      properties:
        name:
          $ref: '#/components/schemas/InputNameString'
        description:
          $ref: '#/components/schemas/ArgDescriptionString'
        inputMode:
          $ref: '#/components/schemas/FileInputModeEnum'
        autoMountLocal:
          type: boolean
          default: true
        sourceUrl:
          type: string
          minLength: 1
        targetPath:
          type: string
          minLength: 1
    # --- AppFileInputArray --------------------------------------------------------
    AppFileInputArray:
      type: object
      required:
        - name
        - targetDir
      properties:
        name:
          $ref: '#/components/schemas/InputNameString'
        description:
          $ref: '#/components/schemas/ArgDescriptionString'
        inputMode:
          $ref: '#/components/schemas/FileInputModeEnum'
        sourceUrls:
          type: array
          items:
            type: string
            minLength: 1
        targetDir:
          type: string
          minLength: 1
    # --- AppArgSpec --------------------------------------------------------------
    AppArgSpec:
      type: object
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/InputNameString'
        description:
          $ref: '#/components/schemas/ArgDescriptionString'
        inputMode:
          $ref: '#/components/schemas/ArgInputModeEnum'
        arg:
          type: string
          minLength: 1
    # --- KeyValuePair -------------------------------------------------------
    KeyValuePair:
      type: object
      required:
        - key
      properties:
        key:
          type: string
          minLength: 1
        value:
          type: string
          default: ""
    # --- NotificationSubscription -------------------------------------------
    NotificationSubscription:
      type: object
      required:
        - notificationMechanisms
      properties:
        filter:
          type: string
          minLength: 1
        notificationMechanisms:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/NotificationMechanism'
    # --- NotificationMechanism -------------------------------------------
    NotificationMechanism:
      type: object
      required:
        - mechanism
      properties:
        mechanism:
          $ref: '#/components/schemas/NotificationMechanismEnum'
        webhookURL:
          type: string
        emailAddress:
          type: string
    # --- String types with constraints ------------------------------------
    IdString:
      type: string
      minLength: 1
      maxLength: 80
    AppVersionString:
      type: string
      minLength: 1
      maxLength: 64
    AppJobDescriptionString:
      type: string
      maxLength: 2048
    ArgDescriptionString:
      type: string
      maxLength: 8096
    InputNameString:
      type: string
      minLength: 1
      maxLength: 80
    UserNameString:
      type: string
      minLength: 1
      maxLength: 60
    UserNameApiDefaultString:
      type: string
      minLength: 1
      maxLength: 60
      default: "${apiUserId}"
    DirString:
      type: string
      minLength: 1
      maxLength: 4096
    TagString:
      type: string
      minLength: 1
      maxLength: 128
    QueueNameString:
      type: string
      minLength: 1
      maxLength: 128
    # -------------------------------------------------------------------------
    # --- Request objects -----------------------------------------------------
    # -------------------------------------------------------------------------
    ReqPostApp:
      type: object
      required:
        - id
        - version
        - containerImage
      properties:
        id:
          $ref: '#/components/schemas/IdString'
        version:
          $ref: '#/components/schemas/AppVersionString'
        description:
          $ref: '#/components/schemas/AppJobDescriptionString'
        owner:
          $ref: '#/components/schemas/UserNameApiDefaultString'
        enabled:
          type: boolean
          default: true
        runtime:
          $ref: '#/components/schemas/RuntimeEnum'
        runtimeVersion:
          type: string
        runtimeOptions:
          $ref: '#/components/schemas/RuntimeOptions'
        containerImage:
          type: string
        jobType:
          $ref: '#/components/schemas/JobTypeEnum'
        maxJobs:
          type: integer
          default: -1
        maxJobsPerUser:
          type: integer
          default: -1
        strictFileInputs:
          type: boolean
          default: false
        jobAttributes:
          $ref: '#/components/schemas/JobAttributes'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagString'
        notes:
          type: object
    ReqPatchApp:
      type: object
      properties:
        description:
          $ref: '#/components/schemas/AppJobDescriptionString'
        runtime:
          $ref: '#/components/schemas/RuntimeEnum'
        runtimeVersion:
          type: string
        runtimeOptions:
          $ref: '#/components/schemas/RuntimeOptions'
        containerImage:
          type: string
        jobType:
          $ref: '#/components/schemas/JobTypeEnum'
        maxJobs:
          type: integer
          default: -1
        maxJobsPerUser:
          type: integer
          default: -1
        strictFileInputs:
          type: boolean
          default: false
        jobAttributes:
          $ref: '#/components/schemas/JobAttributes'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagString'
        notes:
          type: object
    ReqPutApp:
      type: object
      properties:
        description:
          $ref: '#/components/schemas/AppJobDescriptionString'
        runtime:
          $ref: '#/components/schemas/RuntimeEnum'
        runtimeVersion:
          type: string
        runtimeOptions:
          $ref: '#/components/schemas/RuntimeOptions'
        containerImage:
          type: string
        jobType:
          $ref: '#/components/schemas/JobTypeEnum'
        maxJobs:
          type: integer
          default: -1
        maxJobsPerUser:
          type: integer
          default: -1
        strictFileInputs:
          type: boolean
          default: false
        jobAttributes:
          $ref: '#/components/schemas/JobAttributes'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagString'
        notes:
          type: object
    ReqPerms:
      type: object
      required:
        - permissions
      properties:
        permissions:
          type: array
          minItems: 1
          items:
            type: string
    ReqSearchApps:
      type: object
      required:
        - search
      properties:
        search:
          type: array
          minItems: 1
          items:
            type: string
    # -------------------------------------------------------------------------
    # --- Response objects ----------------------------------------------------
    # -------------------------------------------------------------------------
    RespBasic:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          type: object
        metadata:
          type: object
    RespBoolean:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultBoolean'
        metadata:
          type: object
    ResultBoolean:
      type: object
      properties:
        aBool:
          type: boolean
    RespNameArray:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultNameArray'
        metadata:
          type: object
    ResultNameArray:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
    RespChangeCount:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultChangeCount'
        metadata:
          type: object
    ResultChangeCount:
      type: object
      properties:
        changes:
          type: integer
          format: int32
    RespResourceUrl:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultResourceUrl'
        metadata:
          type: object
    ResultResourceUrl:
      type: object
      properties:
        url:
          type: string
    RespApp:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/TapisApp'
        metadata:
          type: object
    RespApps:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/TapisApp'
        metadata:
          type: object
          properties:
            recordCount:
              type: integer
            recordLimit:
              type: integer
            recordsSkipped:
              type: integer
            orderBy:
              type: string
            startAfter:
              type: string
            totalCount:
              type: integer
    # -------------------------------------------------------------------------
    # --- Enums ---------------------------------------------------------------
    # -------------------------------------------------------------------------
    JobTypeEnum:
      type: string
      enum:
        - BATCH
        - FORK
    RuntimeEnum:
      type: string
      enum:
        - SINGULARITY
        - DOCKER
    # NOTE: RuntimeOption starts with NONE due to a bug in client code generation.
    #       Without an initial entry the prefix SINGULARITY_ gets stripped off the other 2 entries.
    RuntimeOptionEnum:
      type: string
      enum:
        - NONE
        - SINGULARITY_START
        - SINGULARITY_RUN
    NotificationMechanismEnum:
      type: string
      enum:
        - WEBHOOK
        - EMAIL
        - QUEUE
        - ACTOR
    FileInputModeEnum:
      type: string
      enum:
        - REQUIRED
        - OPTIONAL
        - FIXED
      default: OPTIONAL
    ArgInputModeEnum:
      type: string
      enum:
        - REQUIRED
        - FIXED
        - INCLUDE_ON_DEMAND
        - INCLUDE_BY_DEFAULT
      default: INCLUDE_ON_DEMAND
