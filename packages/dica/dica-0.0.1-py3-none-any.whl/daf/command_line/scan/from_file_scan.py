#!/usr/bin/env python3

import numpy as np
import pandas as pd

from daf.utils.log import daf_log
from daf.command_line.cli_base_utils import CLIBase
from daf.command_line.scan.daf_scan_utils import ScanBase


class FromFileScan(ScanBase):

    DESC = """Perform a scan from a csv file generated by daf.scan"""
    EPI = """
    Eg:
        daf.ffscan my_scan -t 0.01

        """

    def __init__(self):
        super().__init__(scan_type="hkl")
        self.exp = self.build_exp()

    def parse_command_line(self):
        CLIBase.parse_command_line(self)
        self.parser.add_argument(
            "file_name",
            type=str,
            help="Perform a scan from the file generated by daf.scan",
        )
        self.common_cli_scan_arguments(step=False)
        args = self.parser.parse_args()
        return args

    def generate_data_for_scan(self, full_file_path: str, motor_map: dict) -> np.array:
        """Generate the scan path for scans"""
        scan_points = pd.read_csv(full_file_path)
        mu_points = [
            float(i) for i in scan_points["Mu"]
        ]  # Get only the points related to mu
        eta_points = [
            float(i) for i in scan_points["Eta"]
        ]  # Get only the points related to eta
        chi_points = [
            float(i) for i in scan_points["Chi"]
        ]  # Get only the points related to chi
        phi_points = [
            float(i) for i in scan_points["Phi"]
        ]  # Get only the points related to phi
        nu_points = [
            float(i) for i in scan_points["Nu"]
        ]  # Get only the points related to nu
        del_points = [
            float(i) for i in scan_points["Del"]
        ]  # Get only the points related to del

        data_for_scan = {
            motor_map["mu"]: mu_points,
            motor_map["eta"]: eta_points,
            motor_map["chi"]: chi_points,
            motor_map["phi"]: phi_points,
            motor_map["nu"]: nu_points,
            motor_map["del"]: del_points,
        }
        ordered_motors = [i for i in data_for_scan.keys()]

        return data_for_scan, ordered_motors

    def configure_scan(self):
        """Basically, a wrapper for configure_scan_inputs. It may differ from scan to scan"""
        data_for_scan, ordered_motors = self.generate_data_for_scan(
            self.parsed_args_dict["file_name"], self.motor_map
        )
        if self.parsed_args_dict["xlabel"] is not None:
            xlabel = self.motor_map[self.parsed_args_dict["xlabel"].lower()]
        else:
            xlabel = "points"
        scan_args = self.config_scan_inputs(
            self.parsed_args_dict,
            self.motor_map,
            self.number_of_motors,
            self.scan_type,
            data_for_scan,
            ordered_motors,
            xlabel,
        )
        return scan_args

    def run_cmd(self):
        """
        Method to be defined be each subclass, this is the method
        that should be run when calling the cli interface
        """
        self.run_scan()


@daf_log
def main() -> None:
    obj = FromFileScan()
    obj.run_cmd()


if __name__ == "__main__":
    main()
