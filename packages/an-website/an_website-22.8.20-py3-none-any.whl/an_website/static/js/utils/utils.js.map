{
  "version": 3,
  "sources": ["../../../utils/utils.ts"],
  "sourcesContent": ["// @license magnet:?xt=urn:btih:0b31508aeb0634b347b8270c7bee4d411b5d4109&dn=agpl-3.0.txt GNU-AGPL-3.0-or-later\n\"use strict\";\nconst w = window;\nconst d = document;\nconst elById = (id) => d.getElementById(id);\nconst log = console.log;\nconst error = console.error;\n\nw.lastLocation = String(w.location);\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction post(url, params = {}, ondata = log, onerror = error) {\n    fetch(url, {\n        method: \"POST\",\n        body: JSON.stringify(params),\n        headers: {\n            // deno-fmt-ignore\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\",\n        },\n    })\n        .then((response) => response.json())\n        .catch(onerror)\n        .then(ondata)\n        .catch(onerror);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction get(url, params = {}, ondata = log, onerror = error) {\n    if (params) {\n        url += \"?\" + (new URLSearchParams(params)).toString();\n    }\n    fetch(url, { method: \"GET\", headers: { Accept: \"application/json\" } })\n        .then(\n            (response) => response.json(),\n        )\n        .catch(onerror)\n        .then(ondata)\n        .catch(onerror);\n}\n\nw.PopStateHandlers = {\n    replaceURL: (state) => {\n        // reload if the last location was not the one that got replaced\n        w.lastLocation === state[\"origin\"] || w.location.reload();\n    },\n    // always reload the location if URLParamChange\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    URLParamChange: (s) => w.location.reload(),\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction setURLParam(\n    param,\n    value,\n    state,\n    stateType = \"URLParamChange\",\n    push = true,\n) {\n    // log(\"setURLParam\", param, value, state, onpopstate);\n    const urlParams = new URLSearchParams(w.location.search);\n    urlParams.set(param, value);\n    const newUrl =\n        `${w.location.origin}${w.location.pathname}?${urlParams.toString()}`;\n    // log(\"newUrl\", newUrl);\n    state[\"stateType\"] = stateType;\n    if (push && newUrl !== w.location.href) {\n        history.pushState(state, newUrl, newUrl);\n    } else {\n        history.replaceState(state, newUrl, newUrl);\n    }\n    w.lastLocation = w.location.href;\n    return newUrl;\n}\n\nfunction scrollToId() {\n    if (w.location.hash === \"\") {\n        return;\n    }\n    const el = d.querySelector(w.location.hash);\n    if (!el) {\n        return;\n    }\n    w.scrollBy(\n        0,\n        el.getBoundingClientRect().top - Math.floor(\n            parseFloat(getComputedStyle(elById(\"header\")).height),\n        ),\n    );\n}\n// scroll after few ms so the scroll is right on page load\nsetTimeout(scrollToId, 4);\nw.onhashchange = scrollToId;\n\nw.onpopstate = (event) => {\n    if (w.lastLocation.split(\"#\")[0] === w.location.href.split(\"#\")[0]) {\n        // Only hash changed\n        w.lastLocation = w.location.href;\n        scrollToId();\n        return;\n    }\n    if (\n        event.state &&\n        event.state[\"stateType\"] &&\n        w.PopStateHandlers[event.state[\"stateType\"]]\n    ) {\n        w.PopStateHandlers[event.state[\"stateType\"]](event);\n        w.lastLocation = w.location.href;\n        event.preventDefault();\n        scrollToId();\n        return;\n    }\n    error(\"Couldn't handle state. \", event.state);\n    w.lastLocation = w.location.href;\n    w.location.reload();\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction fixHref(href) {\n    if (w.dynLoadGetFixedHref) {\n        return w.dynLoadGetFixedHref(href);\n    }\n    // if the function doesn't exist don't change anything\n    return href;\n}\n// @license-end\n"],
  "mappings": "aAAA;AAEA,MAAM,EAAI,OACJ,EAAI,SACJ,OAAUA,GAAO,EAAE,eAAeA,CAAE,EACpC,IAAM,QAAQ,IACd,MAAQ,QAAQ,MAEtB,EAAE,aAAe,OAAO,EAAE,QAAQ,EAGlC,SAAS,KAAKC,EAAKC,EAAS,CAAC,EAAGC,EAAS,IAAKC,EAAU,MAAO,CAC3D,MAAMH,EAAK,CACP,OAAQ,OACR,KAAM,KAAK,UAAUC,CAAM,EAC3B,QAAS,CAEL,OAAU,mBACV,eAAgB,kBACpB,CACJ,CAAC,EACI,KAAMG,GAAaA,EAAS,KAAK,CAAC,EAClC,MAAMD,CAAO,EACb,KAAKD,CAAM,EACX,MAAMC,CAAO,CACtB,CAGA,SAAS,IAAIH,EAAKC,EAAS,CAAC,EAAGC,EAAS,IAAKC,EAAU,MAAO,CACtDF,IACAD,GAAO,IAAO,IAAI,gBAAgBC,CAAM,EAAG,SAAS,GAExD,MAAMD,EAAK,CAAE,OAAQ,MAAO,QAAS,CAAE,OAAQ,kBAAmB,CAAE,CAAC,EAChE,KACII,GAAaA,EAAS,KAAK,CAChC,EACC,MAAMD,CAAO,EACb,KAAKD,CAAM,EACX,MAAMC,CAAO,CACtB,CAEA,EAAE,iBAAmB,CACjB,WAAaE,GAAU,CAEnB,EAAE,eAAiBA,EAAM,QAAa,EAAE,SAAS,OAAO,CAC5D,EAGA,eAAiBC,GAAM,EAAE,SAAS,OAAO,CAC7C,EAGA,SAAS,YACLC,EACAC,EACAH,EACAI,EAAY,iBACZC,EAAO,GACT,CAEE,MAAMC,EAAY,IAAI,gBAAgB,EAAE,SAAS,MAAM,EACvDA,EAAU,IAAIJ,EAAOC,CAAK,EAC1B,MAAMI,EACF,GAAG,EAAE,SAAS,SAAS,EAAE,SAAS,YAAYD,EAAU,SAAS,IAErE,OAAAN,EAAM,UAAeI,EACjBC,GAAQE,IAAW,EAAE,SAAS,KAC9B,QAAQ,UAAUP,EAAOO,EAAQA,CAAM,EAEvC,QAAQ,aAAaP,EAAOO,EAAQA,CAAM,EAE9C,EAAE,aAAe,EAAE,SAAS,KACrBA,CACX,CAEA,SAAS,YAAa,CAClB,GAAI,EAAE,SAAS,OAAS,GACpB,OAEJ,MAAMC,EAAK,EAAE,cAAc,EAAE,SAAS,IAAI,EACtC,CAACA,GAGL,EAAE,SACE,EACAA,EAAG,sBAAsB,EAAE,IAAM,KAAK,MAClC,WAAW,iBAAiB,OAAO,QAAQ,CAAC,EAAE,MAAM,CACxD,CACJ,CACJ,CAEA,WAAW,WAAY,CAAC,EACxB,EAAE,aAAe,WAEjB,EAAE,WAAcC,GAAU,CACtB,GAAI,EAAE,aAAa,MAAM,GAAG,EAAE,KAAO,EAAE,SAAS,KAAK,MAAM,GAAG,EAAE,GAAI,CAEhE,EAAE,aAAe,EAAE,SAAS,KAC5B,WAAW,EACX,MACJ,CACA,GACIA,EAAM,OACNA,EAAM,MAAM,WACZ,EAAE,iBAAiBA,EAAM,MAAM,WACjC,CACE,EAAE,iBAAiBA,EAAM,MAAM,WAAcA,CAAK,EAClD,EAAE,aAAe,EAAE,SAAS,KAC5BA,EAAM,eAAe,EACrB,WAAW,EACX,MACJ,CACA,MAAM,0BAA2BA,EAAM,KAAK,EAC5C,EAAE,aAAe,EAAE,SAAS,KAC5B,EAAE,SAAS,OAAO,CACtB,EAGA,SAAS,QAAQC,EAAM,CACnB,OAAI,EAAE,oBACK,EAAE,oBAAoBA,CAAI,EAG9BA,CACX,CACA;",
  "names": ["id", "url", "params", "ondata", "onerror", "response", "state", "s", "param", "value", "stateType", "push", "urlParams", "newUrl", "el", "event", "href"]
}
