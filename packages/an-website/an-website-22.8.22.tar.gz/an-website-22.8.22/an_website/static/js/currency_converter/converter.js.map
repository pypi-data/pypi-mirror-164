{
  "version": 3,
  "sources": ["../../../currency_converter/converter.ts"],
  "sourcesContent": ["// @license magnet:?xt=urn:btih:0b31508aeb0634b347b8270c7bee4d411b5d4109&dn=agpl-3.0.txt GNU-AGPL-3.0-or-later\n\"use strict\";\n(() => {\n    let bigIntType = \"bigint\";\n    try {\n        BigInt(69);\n    } catch (e) {\n        // fix for cool browsers like Pale Moon that don't support BigInt\n        // eslint-disable-next-line no-global-assign\n        BigInt = Number;\n        bigIntType = \"number\";\n    }\n    const output = elById(\"output\");\n\n    const fields = [\n        elById(\"euro\"), // Euro\n        elById(\"mark\"), // Deutsche Mark\n        elById(\"ost\"), // Ostmark\n        elById(\"schwarz\"), // Ostmark auf dem Schwarzmarkt\n    ];\n    const factors = [\n        BigInt(1), // Euro\n        BigInt(2), // Deutsche Mark\n        BigInt(4), // Ostmark\n        BigInt(20), // Ostmark auf dem Schwarzmarkt\n    ];\n    const numberRegex = /^(?:\\d+|(?:\\d+)?[,.]\\d{1,2}|\\d+[,.](?:\\d{1,2})?)?$/;\n\n    const isZero = (str) => /^0*$/.test(str);\n\n    function getDisplayValue(wert) {\n        if (typeof wert === \"string\") {\n            wert = strToBigInt(wert);\n        }\n\n        if (typeof wert !== bigIntType) {\n            alert(`Ung√ºltiger Wert ${wert} mit type ${typeof wert}`);\n        }\n\n        if (bigIntType === \"number\") {\n            wert = Math.floor(wert);\n        }\n\n        let str = wert.toString();\n        if (bigIntType === \"number\" && str.includes(\"e\")) {\n            const [num, pow] = str.split(\"e\");\n\n            if (pow.startsWith(\"-\")) {\n                return \"0\"; // too small to be displayed\n            }\n\n            // eslint-disable-next-line prefer-const\n            let [int, dec] = num.split(\".\");\n            dec = dec || \"\";\n            str = int + dec + \"0\".repeat(pow - dec.length);\n        }\n        if (isZero(str)) {\n            return \"0\"; // is empty string or 0\n        }\n\n        const dec = str.slice(-2); // last two chars or whole str if len <= 2\n        return (\n            (str.slice(0, -2) || \"0\") + // integer part, but \"0\" instead of \"\"\n            (\n                isZero(dec)\n                    ? \"\" // if is integer do not append\n                    : \",\" + (dec.length === 1 ? \"0\" : \"\") + dec\n            )\n        );\n    }\n\n    function strToBigInt(str) {\n        if (typeof str !== \"string\") {\n            throw `${str} is not a String.`;\n        }\n\n        if (isZero(str)) {\n            return BigInt(0);\n        }\n\n        let [int, dec] = [str, \"00\"];\n        if (str.includes(\",\")) {\n            [int, dec] = str.split(\",\");\n        } else if (str.includes(\".\")) {\n            [int, dec] = str.split(\".\");\n        }\n        if (dec.length !== 2) {\n            // get the first two digits after the comma, fill with 0 if needed\n            dec = (dec + \"00\").slice(0, 2);\n        }\n        return BigInt(int + dec);\n    }\n\n    w.PopStateHandlers[\"currencyConverter\"] = (e) =>\n        setAllFields(strToBigInt(e.state[\"euro\"]));\n\n    const setEuroParam = (euroVal, push) =>\n        setURLParam(\n            \"euro\",\n            euroVal,\n            { euro: euroVal },\n            \"currencyConverter\",\n            push,\n        );\n\n    function setAllFields(euroValue, ignored) {\n        setEuroParam(getDisplayValue(euroValue), false);\n        for (let i = 0; i < 4; i++) {\n            const value = getDisplayValue(euroValue * factors[i]);\n            fields[i].placeholder = value;\n            if (i !== ignored) {\n                fields[i].value = value;\n            }\n        }\n    }\n\n    const updateOutput = () => {\n        // deno-fmt-ignore\n        output.value = fields[0].value + \" Euro, das sind ja \" +\n            fields[1].value + \" Mark; \" +\n            fields[2].value + \" Ostmark und \" +\n            fields[3].value + \" Ostmark auf dem Schwarzmarkt!\";\n    };\n\n    function onSubmit(event) {\n        event.preventDefault();\n        for (const feld of fields) {\n            feld.value = getDisplayValue(feld.value);\n        }\n        setEuroParam(fields[0].value, true);\n        updateOutput();\n    }\n\n    for (let i = 0; i < 4; i++) {\n        fields[i].oninput = () => {\n            // remove \"invalid\" class\n            for (const field of fields) {\n                field.className = \"\";\n            }\n            // add \"invalid\" class if input is not a number\n            if (!numberRegex.test(fields[i].value)) {\n                fields[i].className = \"invalid\";\n                return;\n            }\n            // parse input as it is a number\n            setAllFields(strToBigInt(fields[i].value) / factors[i], i);\n\n            updateOutput();\n        };\n    }\n    // set the value of the fields to the placeholder set by tornado\n    for (const field of fields) {\n        field.value = field.placeholder;\n    }\n    // fix form submit\n    elById(\"form\").onsubmit = onSubmit;\n})();\n// @license-end\n"],
  "mappings": "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",
  "names": ["bigIntType", "output", "fields", "factors", "numberRegex", "isZero", "str", "getDisplayValue", "wert", "strToBigInt", "num", "pow", "int", "dec", "setAllFields", "setEuroParam", "euroVal", "push", "euroValue", "ignored", "i", "value", "updateOutput", "onSubmit", "event", "feld", "field"]
}
