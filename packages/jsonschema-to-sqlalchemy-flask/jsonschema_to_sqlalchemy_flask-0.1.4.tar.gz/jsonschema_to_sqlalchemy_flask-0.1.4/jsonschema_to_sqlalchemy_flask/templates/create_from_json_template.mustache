#!/usr/bin/python3

from .{{flask_file}} import db{{#models}}, {{camel_name}}{{/models}}
import json
import argparse

{{#contains_time}}
from datetime import datetime
{{/contains_time}}

{{#models}}
def add_{{snake_name}}(json_data):
    {{snake_name}} = {{camel_name}}(
        {{#columns}}
        {{snake_name}} = {{#needs_conversion_from_json}}{{convert_begin}}{{/needs_conversion_from_json}}json_data["{{unchanged_name}}"]{{#needs_conversion_from_json}}{{convert_end}}{{/needs_conversion_from_json}}{{^very_last}},{{/very_last}}
        {{/columns}}
        {{#foreign_columns}}
        {{snake_name}} = {{#needs_conversion_from_json}}{{convert_begin}}{{/needs_conversion_from_json}}json_data["{{unchanged_name}}"]{{#needs_conversion_from_json}}{{convert_end}}{{/needs_conversion_from_json}}{{^very_last}},{{/very_last}}
        {{/foreign_columns}}
        )
    
    db.session.add({{snake_name}})
    db.session.commit()

{{/models}}
def create_from_json(name_data_dict_list, preprocess = lambda x:x):
    for name_data_dict in name_data_dict_list:
        {{#models}}
        if name_data_dict["name"] == "{{snake_name}}":
            add_{{snake_name}}(preprocess(name_data_dict["data"]))
        {{/models}}

def json_load(filename):
    with open(filename) as filehandle:
        return json.load(filehandle)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="fill data in database from a json file.")
    parser.add_argument("--input_filename","-i", required=True, nargs='+', help='filenames of the input json files.')
    parser.add_argument("--modelname","-m", required=True, nargs='+', help='snakecase names of the models to be filled with data.')

    args = parser.parse_args()
    
    name_data_dict_list = [{"name":name, "data": filename} for (name,filename) in zip(args.modelname,args.input_filename)]
    create_from_json(name_data_dict_list,json_load)
