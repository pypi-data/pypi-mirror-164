# Auto generated by 'inv collect-airflow'
from airfly._vendor.airflow.models.baseoperator import BaseOperator


class CloudNaturalLanguageAnalyzeEntitiesOperator(BaseOperator):
    document: "typing.Union[dict, google.cloud.language_v1.types.Document]"
    encoding_type: "typing.Union[google.cloud.language_v1.gapic.enums.EncodingType, NoneType]"
    retry: "typing.Union[google.api_core.retry.Retry, NoneType]"
    timeout: "typing.Union[float, NoneType]"
    metadata: "typing.Union[typing.Sequence[typing.Tuple[str, str]], NoneType]"
    gcp_conn_id: "str"
    impersonation_chain: "typing.Union[str, typing.Sequence[str], NoneType]"


class CloudNaturalLanguageAnalyzeEntitySentimentOperator(BaseOperator):
    document: "typing.Union[dict, google.cloud.language_v1.types.Document]"
    encoding_type: "typing.Union[google.cloud.language_v1.gapic.enums.EncodingType, NoneType]"
    retry: "typing.Union[google.api_core.retry.Retry, NoneType]"
    timeout: "typing.Union[float, NoneType]"
    metadata: "typing.Union[typing.Sequence[typing.Tuple[str, str]], NoneType]"
    gcp_conn_id: "str"
    impersonation_chain: "typing.Union[str, typing.Sequence[str], NoneType]"


class CloudNaturalLanguageAnalyzeSentimentOperator(BaseOperator):
    document: "typing.Union[dict, google.cloud.language_v1.types.Document]"
    encoding_type: "typing.Union[google.cloud.language_v1.gapic.enums.EncodingType, NoneType]"
    retry: "typing.Union[google.api_core.retry.Retry, NoneType]"
    timeout: "typing.Union[float, NoneType]"
    metadata: "typing.Union[typing.Sequence[typing.Tuple[str, str]], NoneType]"
    gcp_conn_id: "str"
    impersonation_chain: "typing.Union[str, typing.Sequence[str], NoneType]"


class CloudNaturalLanguageClassifyTextOperator(BaseOperator):
    document: "typing.Union[dict, google.cloud.language_v1.types.Document]"
    retry: "typing.Union[google.api_core.retry.Retry, NoneType]"
    timeout: "typing.Union[float, NoneType]"
    metadata: "typing.Union[typing.Sequence[typing.Tuple[str, str]], NoneType]"
    gcp_conn_id: "str"
    impersonation_chain: "typing.Union[str, typing.Sequence[str], NoneType]"
