{"version":3,"file":"lib_index_js.c8ce5d6f06928ba82660.js","mappings":";;;;;;;;;;;;;;;;;;AAA+C;AACS;AAChB;AACxC;AACA;AACA,yBAAyB,+EAA6B;AACtD,wBAAwB,8DAAW,mBAAmB,mEAA2B;AACjF,eAAe,8EAA4B;AAC3C;AACA;AACA;AACA,kCAAkC,gEAAwB;AAC1D,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,8BAA8B,gFAA8B;AAC5D,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA,iEAAe,yBAAyB,EAAC;;;;;;;;;;;;;;;ACxBlC;AACP;AACA;AACA,6IAA6I,gCAAgC,gBAAgB,sBAAsB,qVAAqV,mBAAmB,gVAAgV,mBAAmB;AAC95B;AACA;AACA,yCAAyC,4BAA4B;AACrE,oCAAoC,2BAA2B;AAC/D;AACA;AACA,CAAC,8BAA8B;;;;;;;;;;;;;;;;;;ACVyB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,sEAAgB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,sEAAgB,iGAAiG,GAAG;AAC9I;AACA;AACA;AACA;AACA;AACA,kBAAkB,sEAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sEAAgB;AACrC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iBAAiB,sEAAgB;AACjC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/HyD;AAGZ;AACkB;AACd;AACjD,YAAY,kCAAkC;AACM;AACX;AACqB;AACb;AACT;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAyB;AACnD,yCAAyC,uEAA+B;AACxE;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAA6B;AACrD;AACA,4BAA4B,0DAAkB;AAC9C;AACA;AACA;AACA;AACA,yBAAyB,qDAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mDAAM;AAC1C;AACA;AACA;AACA;AACA;AACA,+BAA+B,+DAAa;AAC5C;AACA,sBAAsB,8DAAO;AAC7B;AACA,wBAAwB,0DAAkB;AAC1C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB,EAAE,2DAAS;AAC1C,eAAe,yEAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://neural-compressor-ext-lab/./lib/client.js","webpack://neural-compressor-ext-lab/./lib/constants.js","webpack://neural-compressor-ext-lab/./lib/deepcoder.js","webpack://neural-compressor-ext-lab/./lib/index.js"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { Constants } from './constants';\nclass JupyterlabDeepCoderClient {\n    request(path, method, body) {\n        const settings = ServerConnection.makeSettings();\n        const fullUrl = URLExt.join(settings.baseUrl, Constants.SHORT_PLUGIN_NAME, path);\n        return ServerConnection.makeRequest(fullUrl, {\n            body,\n            method,\n            headers: new Headers({\n                'Plugin-Version': Constants.PLUGIN_VERSION\n            })\n        }, settings).then(response => {\n            if (response.status !== 200) {\n                console.log(\"response:::\", response.status);\n                return response.text().then(() => {\n                    throw new ServerConnection.ResponseError(response, response.statusText);\n                });\n            }\n            return response.text();\n        });\n    }\n}\nexport default JupyterlabDeepCoderClient;\n","export var Constants;\n(function (Constants) {\n    Constants.SHORT_PLUGIN_NAME = 'neural-compressor-ext-lab';\n    Constants.ICON_FORMAT_ALL_SVG = '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" style=\"margin: auto; background: rgb(255, 255, 255); display: block; shape-rendering: auto;\" width=\"53px\" height=\"53px\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\"><circle cx=\"50\" cy=\"50\" r=\"32\" stroke-width=\"8\" stroke=\"#e15b64\" stroke-dasharray=\"50.26548245743669 50.26548245743669\" fill=\"none\" stroke-linecap=\"round\"><animateTransform attributeName=\"transform\" type=\"rotate\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"0 50 50;360 50 50\"></animateTransform></circle><circle cx=\"50\" cy=\"50\" r=\"23\" stroke-width=\"8\" stroke=\"#f8b26a\" stroke-dasharray=\"36.12831551628262 36.12831551628262\" stroke-dashoffset=\"36.12831551628262\" fill=\"none\" stroke-linecap=\"round\"><animateTransform attributeName=\"transform\" type=\"rotate\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"0 50 50;-360 50 50\"></animateTransform></circle></svg>';\n    Constants.ICON_RUN = '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:svgjs=\"http://svgjs.com/svgjs\" version=\"1.1\" width=\"512\" height=\"512\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\" style=\"enable-background:new 0 0 512 512\" xml:space=\"preserve\" class=\"\"><g><g xmlns=\"http://www.w3.org/2000/svg\" clip-rule=\"evenodd\" fill=\"rgb(0,0,0)\" fill-rule=\"evenodd\"><path d=\"m3.09467 3.09467c1.33447-1.33447 3.33136-1.84467 5.90533-1.84467h6c2.574 0 4.5709.5102 5.9053 1.84467 1.3345 1.33447 1.8447 3.33136 1.8447 5.90533v6c0 2.574-.5102 4.5709-1.8447 5.9053-1.3344 1.3345-3.3313 1.8447-5.9053 1.8447h-6c-2.57397 0-4.57086-.5102-5.90533-1.8447-1.33447-1.3344-1.84467-3.3313-1.84467-5.9053v-2.05c0-.4142.33579-.75.75-.75s.75.3358.75.75v2.05c0 2.426.4898 3.9291 1.40533 4.8447.91553.9155 2.41864 1.4053 4.84467 1.4053h6c2.426 0 3.9291-.4898 4.8447-1.4053.9155-.9156 1.4053-2.4187 1.4053-4.8447v-6c0-2.42603-.4898-3.92914-1.4053-4.84467-.9156-.91553-2.4187-1.40533-4.8447-1.40533h-6c-2.42603 0-3.92914.4898-4.84467 1.40533s-1.40533 2.41864-1.40533 4.84467c0 .41421-.33579.75-.75.75s-.75-.33579-.75-.75c0-2.57397.5102-4.57086 1.84467-5.90533z\" fill=\"#505361\" data-original=\"#000000\" class=\"\"/><path d=\"m10.355 9.23276c-.2302.13229-.505.4923-.505 1.28724v2.96c0 .7885.2739 1.1502.5061 1.2841.2324.1342.6841.1907 1.3697-.2041.3589-.2066.8175-.0832 1.0242.2758.2066.3589.0832.8175-.2758 1.0242-.9644.5552-2.0127.6967-2.86779.2034-.85535-.4936-1.25641-1.4719-1.25641-2.5834v-2.96c0-1.11506.40022-2.09505 1.25754-2.58776.85596-.49195 1.90416-.34642 2.86666.20779l.0012.00067 2.5588 1.47933c-.0002-.00012.0002.00013 0 0 .9642.55537 1.6133 1.39217 1.6133 2.37997 0 .9881-.6487 1.8246-1.6133 2.38-.3589.2066-.8175.0832-1.0242-.2758-.2066-.3589-.0832-.8175.2758-1.0242.6854-.3946.8617-.8131.8617-1.08s-.1763-.6854-.8617-1.08l-2.56-1.48003c.0002.0001-.0002-.00011 0 0-.6871-.39546-1.1394-.34022-1.3708-.20721z\" fill=\"#505361\" data-original=\"#000000\" class=\"\"/></g></g></svg>';\n    Constants.SVG = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" viewBox=\"0 0 18 18\" data-icon=\"ui-components:caret-down-empty\"><g xmlns=\"http://www.w3.org/2000/svg\" class=\"jp-icon3\" fill=\"#616161\" shape-rendering=\"geometricPrecision\"><path d=\"M5.2,5.9L9,9.7l3.8-3.8l1.2,1.2l-4.9,5l-4.9-5L5.2,5.9z\"></path></g></svg>';\n    Constants.LONG_PLUGIN_NAME = `@rya/${Constants.SHORT_PLUGIN_NAME}`;\n    Constants.SETTINGS_SECTION = `${Constants.LONG_PLUGIN_NAME}:settings`;\n    Constants.COMMAND_SECTION_NAME = 'Jupyterlab Code Optimizer';\n    Constants.PLUGIN_VERSION = '0.1.0';\n})(Constants || (Constants = {}));\n","import { showErrorMessage } from '@jupyterlab/apputils';\nclass JupyterlabCodeOptimizer {\n    constructor(client) {\n        this.client = client;\n        this.working = false;\n    }\n    optimizeCode(code, formatter, options, notebook) {\n        return this.client\n            .request('optimize', 'POST', JSON.stringify({\n            code,\n            notebook,\n            formatter,\n            options\n        }))\n            .then(resp => JSON.parse(resp));\n    }\n}\nexport class JupyterlabNotebookCodeOptimizer extends JupyterlabCodeOptimizer {\n    constructor(client, notebookTracker) {\n        super(client);\n        this.notebookTracker = notebookTracker;\n    }\n    async optimizeAction(config, formatter) {\n        return this.optimizeCells(true, config, formatter);\n    }\n    async optimizeAllCodeCells(config, formatter, notebook) {\n        return this.optimizeCells(false, config, formatter, notebook);\n    }\n    getCodeCells(selectedOnly = true, notebook) {\n        if (!this.notebookTracker.currentWidget) {\n            return [];\n        }\n        const codeCells = [];\n        notebook = notebook || this.notebookTracker.currentWidget.content;\n        notebook.widgets.forEach((cell) => {\n            if (cell.model.type === 'code') {\n                codeCells.push(cell);\n            }\n        });\n        return codeCells;\n    }\n    async optimizeCells(selectedOnly, config, formatter, notebook) {\n        var _a;\n        if (this.working) {\n            return;\n        }\n        try {\n            this.working = true;\n            const selectedCells = this.getCodeCells(selectedOnly, notebook);\n            if (selectedCells.length === 0) {\n                this.working = false;\n                return;\n            }\n            const optimize_type = formatter !== undefined ? formatter : 'pytorch_mixed_precision_cpu';\n            const currentTexts = selectedCells.map(cell => cell.model.value.text);\n            console.log(\"arrive here 1\");\n            const optimizedTexts = await this.optimizeCode(currentTexts, optimize_type, undefined, true);\n            console.log(\"arrive here 2\");\n            for (let i = 0; i < selectedCells.length; ++i) {\n                const cell = selectedCells[i];\n                const currentText = currentTexts[i];\n                const optimizedText = optimizedTexts.code[i];\n                if (cell.model.value.text === currentText) {\n                    if (optimizedText.error) {\n                        if (!((_a = config.suppressFormatterErrors) !== null && _a !== void 0 ? _a : false)) {\n                            console.log(\"here 1\");\n                            await showErrorMessage('Optimize Code Error', optimizedText.error);\n                        }\n                    }\n                    else {\n                        cell.model.value.text = optimizedText;\n                        cell.outputArea.node.innerText = \"tothelighthouse\";\n                    }\n                }\n                else {\n                    console.log(\"here 2\");\n                    await showErrorMessage('Optimize Code Error', `Cell value changed since format request was sent, formatting for cell ${i} skipped.`);\n                }\n            }\n        }\n        catch (error) {\n            console.log(\"here 3\");\n            await showErrorMessage('Optimize Code Error', error);\n        }\n        this.working = false;\n    }\n    applicable(formatter, currentWidget) {\n        const currentNotebookWidget = this.notebookTracker.currentWidget;\n        return currentNotebookWidget && currentWidget === currentNotebookWidget;\n    }\n}\nexport class JupyterlabFileEditorCodeOptimizer extends JupyterlabCodeOptimizer {\n    constructor(client, editorTracker) {\n        super(client);\n        this.editorTracker = editorTracker;\n    }\n    optimizeAction(config, formatter) {\n        if (this.working) {\n            return;\n        }\n        const editorWidget = this.editorTracker.currentWidget;\n        this.working = true;\n        if (editorWidget == null) {\n            return;\n        }\n        const editor = editorWidget.content.editor;\n        const code = editor.model.value.text;\n        this.optimizeCode([code], formatter, config[formatter], false)\n            .then(data => {\n            if (data.code[0].error) {\n                console.log(\"here 4\");\n                void showErrorMessage('Optimize Code Error', data.code[0].error);\n                this.working = false;\n                return;\n            }\n            this.working = false;\n        })\n            .catch(error => {\n            this.working = false;\n            console.log(\"here 5\");\n            void showErrorMessage('Optimize Code Error', error);\n        });\n    }\n    applicable(formatter, currentWidget) {\n        const currentEditorWidget = this.editorTracker.currentWidget;\n        return currentEditorWidget && currentWidget === currentEditorWidget;\n    }\n}\n","import { INotebookTracker, } from '@jupyterlab/notebook';\nimport { \n// ICommandPalette,\nToolbarButton, } from '@jupyterlab/apputils';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\n// import { DisposableDelegate, IDisposable } from '@lumino/disposable';\nimport { LabIcon } from '@jupyterlab/ui-components';\nimport { Widget } from '@lumino/widgets';\nimport { JupyterlabNotebookCodeOptimizer } from './deepcoder';\nimport JupyterlabDeepCoderClient from './client';\nimport { Constants } from './constants';\nclass JupyterLabDeepCoder {\n    // private panel: NotebookPanel;\n    constructor(app, tracker) {\n        this.app = app;\n        this.tracker = tracker;\n        // this.panel = panel;\n        this.client = new JupyterlabDeepCoderClient();\n        this.notebookCodeOptimizer = new JupyterlabNotebookCodeOptimizer(this.client, this.tracker);\n        this.setupWidgetExtension();\n    }\n    createNew(nb) {\n        // this.panel = nb;\n        const svg = document.createElement(\"svg\");\n        svg.innerHTML = Constants.ICON_FORMAT_ALL_SVG;\n        const run_svg = document.createElement(\"svg\");\n        run_svg.innerHTML = Constants.ICON_RUN;\n        const div = document.createElement(\"div\");\n        div.setAttribute(\"class\", \"wrapper\");\n        const span = document.createElement(\"span\");\n        span.setAttribute(\"class\", \"f1ozlkqi\");\n        span.innerHTML = Constants.SVG;\n        const selector = document.createElement(\"select\");\n        selector.setAttribute(\"class\", \"aselector\");\n        selector.id = \"NeuralCoder\";\n        const option1 = document.createElement(\"option\");\n        option1.value = \"pytorch_inc_static_quant_fx\";\n        option1.innerText = \"Intel INT8 (Static)\";\n        option1.selected = true;\n        const option2 = document.createElement(\"option\");\n        option2.value = \"pytorch_inc_dynamic_quant\";\n        option2.innerText = \"Intel INT8 (Dynamic)\";\n        const option3 = document.createElement(\"option\");\n        option3.value = \"pytorch_inc_bf16\";\n        option3.innerText = \"Intel BF16\";\n        const option4 = document.createElement(\"option\");\n        option4.value = \"auto-quant\";\n        option4.innerText = \"Auto\";\n        selector.options.add(option1);\n        selector.options.add(option2);\n        selector.options.add(option3);\n        selector.options.add(option4);\n        div.appendChild(selector);\n        div.appendChild(span);\n        const selector_widget = new Widget();\n        selector_widget.node.appendChild(div);\n        selector_widget.addClass(\"aselector\");\n        // let panel = this.panel;\n        let notebookCodeOptimizer = this.notebookCodeOptimizer;\n        let config = this.config;\n        const run_button = new ToolbarButton({\n            tooltip: 'NeuralCoder',\n            icon: new LabIcon({\n                name: \"run\",\n                svgstr: Constants.ICON_RUN\n            }),\n            onClick: async function () {\n                var _a, _b, _c, _d, _e, _f, _g, _h;\n                (_d = (_c = (_b = (_a = run_button.node.firstChild) === null || _a === void 0 ? void 0 : _a.firstChild) === null || _b === void 0 ? void 0 : _b.firstChild) === null || _c === void 0 ? void 0 : _c.firstChild) === null || _d === void 0 ? void 0 : _d.replaceWith(svg);\n                console.log(\"user's selecting feature\");\n                console.log(selector.options[selector.selectedIndex].value);\n                await notebookCodeOptimizer.optimizeAllCodeCells(config, selector.options[selector.selectedIndex].value);\n                (_h = (_g = (_f = (_e = run_button.node.firstChild) === null || _e === void 0 ? void 0 : _e.firstChild) === null || _f === void 0 ? void 0 : _f.firstChild) === null || _g === void 0 ? void 0 : _g.firstChild) === null || _h === void 0 ? void 0 : _h.replaceWith(run_svg);\n            }\n        });\n        nb.toolbar.insertItem(11, \"nc\", run_button);\n        nb.toolbar.insertItem(12, \"selector\", selector_widget);\n    }\n    setupWidgetExtension() {\n        this.app.docRegistry.addWidgetExtension('Notebook', this);\n    }\n}\n/**\n * Initialization data for the deepcoder-jupyterlab extension.\n */\nconst plugin = {\n    id: 'deepcoder-jupyterlab:plugin',\n    autoStart: true,\n    requires: [INotebookTracker, IMainMenu],\n    optional: [ISettingRegistry],\n    activate: (app, tracker) => {\n        new JupyterLabDeepCoder(app, tracker);\n        console.log('JupyterLab extension jupyterlab_neuralcoder is activated!');\n    }\n};\nexport default plugin;\n"],"names":[],"sourceRoot":""}