# AUTOGENERATED! DO NOT EDIT! File to edit: ../00_core.ipynb.

# %% auto 0
__all__ = ['EM6']

# %% ../00_core.ipynb 4
from fastcore.utils import *
import httpx
import pandas as pd
import numpy as np
import json
import calendar
import asyncio
from io import StringIO
import datetime

# %% ../00_core.ipynb 5
class EM6():
    '''
    EM6 is a client for the EM6 API.
    Requires a client_id, username, and password for autehtication
    '''
    def __init__(self,client_id,username,password):
        self.client_id = client_id # client_id is the client id for the EM6 API
        self.username = username # username is the username for the EM6 API
        self.password = password # password is the password for the EM6 API
        # self._emissions()

# %% ../00_core.ipynb 8
@patch
def _token(self:EM6):
    url= "https://api.em6.co.nz/auth"
    data = {'AuthParameters': {'USERNAME': self.username, 'PASSWORD': self.password},
        'AuthFlow': 'USER_PASSWORD_AUTH',
        'ClientId': self.client_id}
    headers = {
        'content-type': "text/plain",
        'cache-control': "no-cache"
        }
    try:
        res = httpx.post(url, data=json.dumps(data), headers=headers)
    except httpx.exceptions.RequestException as e:  # This is the correct syntax
        raise SystemExit(e)
    return res.json()['AuthenticationResult']['IdToken']

# %% ../00_core.ipynb 10
@patch
def _nodes(self:EM6):
    url = 'https://api.em6.co.nz/ords/em6/data_api/nodes'
    headers = {'Authorization': '{}'.format(self._token())}
    params = {}
    try:
        res = httpx.get(url, headers=headers, params= params)
    except httpx.exceptions.RequestException as e:  # This is the correct syntax
        raise SystemExit(e)
    nodes = pd.DataFrame.from_dict(json.loads(res.content)['items'])
    for col in ['pricing_node','load_node','conforming_load','generation_node']:
        nodes[col] = nodes[col] == 'TRUE'
    return nodes

# %% ../00_core.ipynb 13
@patch
def _current(self:EM6):
    url = 'https://api.em6.co.nz/ords/em6/data_api/current_'
    headers = {'Authorization': '{}'.format(self._token())}
    params = {}
    out = []
    for div in ['generation','load']:
        try:
            res = httpx.get(url+div, headers=headers, params= params)
        except httpx.exceptions.RequestException as e:  # This is the correct syntax
            raise SystemExit(e)
        out.append(pd.DataFrame.from_dict(json.loads(res.content)['items']))

    for div in ['hvdc']:
        try:
            res = httpx.get(url+div, headers=headers, params= params)
        except httpx.exceptions.RequestException as e:  # This is the correct syntax
            raise SystemExit(e)
        out.append(pd.DataFrame.from_dict(json.loads(res.content)['hvdc_flow']))
    return out


# %% ../00_core.ipynb 16
@patch
def scada(self:EM6,
            startdate=None, 
            enddate=None):
    ''' returns historical generation / load and hvdc flow data '''

    headers = {'Authorization': '{}'.format(self._token())}
    params = {}
    assert startdate is not None, 'startdate is required'
    assert enddate is not None, 'enddate is required'
    assert startdate < enddate , 'start must be before end'

    params['from_trading_date'] =  str(startdate.strftime("%d/%m/%Y"))       
    params['to_trading_date'] = str(enddate.strftime("%d/%m/%Y"))  
    res = httpx.get(f'https://api.em6.co.nz/ords/em6/data_api/scada_hvdc', 
                        headers=headers, params= params)
    hvdc = (pd.DataFrame.from_dict(json.loads(res.content)['items'])
            .assign(trading_date = lambda df : pd.to_datetime(df.trading_date,dayfirst=True))
            .drop(columns=['tp49_mw','tp50_mw'])
            .pipe(self._melt)
            .assign(timestamp = lambda df_: df_.trading_date +
                                pd.to_timedelta((df_.variable.str[2:-3:].astype(int)-1)*30,'m'),
                    variable = lambda df_ : df_.variable.str[2:-3:].astype(int))
            .drop(columns=['trading_date','variable'])
            .rename(columns={'value': 'mw'})
            )
    res = httpx.get(f'https://api.em6.co.nz/ords/em6/data_api/scada_generation', headers=headers, params= params)
    gen = (pd.DataFrame.from_dict(json.loads(res.content)['items'])
            .assign(trading_date = lambda df : pd.to_datetime(df.trading_date,dayfirst=True))
            .drop(columns=['country','tp49_mw','tp50_mw'])
            .pipe(self._melt)
            .assign(timestamp = lambda df_: df_.trading_date + pd.to_timedelta((df_.variable.str[2:-3:].astype(int)-1)*30,'m'),
                    variable = lambda df_ : df_.variable.str[2:-3:].astype(int))
            .drop(columns=['trading_date','variable'])
            .rename(columns={'value': 'gen_mw'})
            )        
    res = httpx.get(f'https://api.em6.co.nz/ords/em6/data_api/scada_load', headers=headers, params= params)
    load = (pd.DataFrame.from_dict(json.loads(res.content)['items'])
            .assign(trading_date = lambda df : pd.to_datetime(df.trading_date,dayfirst=True))
            .drop(columns=['country','tp49_mw','tp50_mw'])
            .pipe(self._melt)
            .assign(timestamp = lambda df_: df_.trading_date + pd.to_timedelta((df_.variable.str[2:-3:].astype(int)-1)*30,'m'))
            .drop(columns=['trading_date','variable'])
            .rename(columns={'value': 'load_mw'})
            )                

    return gen, load, hvdc

@patch
def _melt(self:EM6, df):
        return pd.melt(df, id_vars=['island' ,'node_id', 'node_name' , 'trading_date'],
                        value_vars=[x for x in df.columns if 'tp' in x])

