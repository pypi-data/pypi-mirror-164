{"version":3,"sources":["index.tsx"],"names":["onKeyUp","event","Streamlit","setComponentValue","target","value","events","addEventListener","RENDER_EVENT","label","detail","args","input","document","getElementsByTagName","label_el","innerText","onkeyup","setComponentReady","setFrameHeight"],"mappings":"oGAAA,kBAEA,SAASA,EAAQC,GACfC,IAAUC,kBAAkBF,EAAMG,OAAOC,MAC1C,CA2BDH,IAAUI,OAAOC,iBAAiBL,IAAUM,cApB5C,SAAkBP,GAEhB,IAEMQ,EAFQR,EAAkCS,OAErBC,KAAL,MAIhBC,EAAQC,SAASC,qBAAqB,SAAS,GAE/CC,EAAWF,SAASC,qBAAqB,SAAS,GAEpDC,IACFA,EAASC,UAAYP,GAGvBG,EAAMK,QAAUjB,CACjB,IAODE,IAAUgB,oBAIVhB,IAAUiB,eAAe,G","file":"static/js/main.b1de1ca2.chunk.js","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\n\nfunction onKeyUp(event: any): void {\n  Streamlit.setComponentValue(event.target.value)\n}\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n\n  const label: string = data.args[\"label\"]\n  //const value: string = data.args[\"value\"]\n  //const key: string = data.args[\"key\"]\n\n  const input = document.getElementsByTagName(\"input\")[0] as HTMLInputElement\n\n  const label_el = document.getElementsByTagName(\"label\")[0] as HTMLLabelElement\n\n  if (label_el) {\n    label_el.innerText = label\n  }\n\n  input.onkeyup = onKeyUp\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight(93)\n"],"sourceRoot":""}