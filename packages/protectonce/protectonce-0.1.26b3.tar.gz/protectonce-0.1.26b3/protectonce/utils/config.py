import platform
import uuid
import time
import os
import pkg_resources
import hashlib
import sys
from .logger import Logger
logger = Logger()
core_version = pkg_resources.get_distribution('protectonce').version
applicationId = "1234567890_sql_injection" #TODO Need to fix this
agentId = str(uuid.uuid4())


class Config:
    
    @classmethod
    def _get_workload_id(cls):
        try:
            if os.environ.get('PROTECTONCE_WORKLOAD_ID'):
                return os.environ['PROTECTONCE_WORKLOAD_ID']
            hashof = cls._hostname  + str(sys.argv[0])
            hash_object = hashlib.sha1(hashof.encode("utf-8"))

            return hash_object.hexdigest()
        except Exception as e:
            logger.error() and logger.write('_get_workload_id failed returning DEFAULT_WORKLOAD with error '+ str(e))
            return 'DEFAULT_WORKLOAD'

    @classmethod
    def set_runtime_info(cls,runtime_info):
        cls._agent_runtime_version = runtime_info.get('version','')
        cls._runtime = runtime_info.get('runtime','')
        cls._runtime_version = runtime_info.get('runtimeVersion','')
        cls._hostname = runtime_info.get('hostname','')
        cls._bom = runtime_info.get('bom',[])
        cls._appName = runtime_info.get('appName','')

    @classmethod
    def get_info(cls):
        info = {
            "os": platform.system(),
            "osVersion": platform.release(),
            "agentCoreVersion": core_version,
            "timestamp": time.time(),
            "applicationId": applicationId,
            "agentId": agentId,
            "autoGenerated": 'configured' if os.environ.get('PROTECTONCE_WORKLOAD_ID') else 'auto'
        }

        info['agentRuntimeVersion'] = cls._agent_runtime_version
        info['runtime'] = cls._runtime
        info['runtimeVersion'] = cls._runtime_version
        info['hostname'] = cls._hostname
        info['bom'] = cls._bom
        info['workLoadId'] = cls._get_workload_id()
        info['appName'] = cls._appName
        
        return info

    @classmethod
    def sync_interval(cls):
        return 20  # 20 secs