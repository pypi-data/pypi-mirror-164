[tool.poetry]
name = "txp"
version = "0.2.38"
description = "Txp is the main Python Package from Tranxpert predictive maintenance solution"
authors = ["Tranxpert"]
readme = "README.md"
repository = "https://github.com/Traxpert/txp"
keywords = [
    "IOT",
    "IIOT",
    "Predictive Maintenance"
    ]
packages = [
    { include = "txp", from = "src" },
    { include = "IpMgrConnectorSerial", from = "thirdparties/SmartMeshSDK" },
    { include = "IpMgrConnectorMux", from = "thirdparties/SmartMeshSDK" },
    { include = "SerialConnector", from = "thirdparties/SmartMeshSDK" },
    { include = "SmartMeshSDK", from = "thirdparties" },
    { include = "iCOMOXSDK", from = "thirdparties" },
    { include = "common", from = "thirdparties/iCOMOXSDK"},
    { include = "ArmSDK", from = "thirdparties" }
]

exclude = [
    "./src/txp/common/credentials"
]

[tool.poetry.scripts]
txp = "txp.cli:txp_cli_entrypoint"

[tool.poetry.dependencies]
python = "^3.7"
dynaconf = "^3.1.4"
pyserial = "^3.5"
pydantic = "^1.9.1"
numpy = {version = "^1.21.2", python = ">=3.7,<3.11"}
pandas = {version = "1.3.5", python = ">=3.7.1,<4.0"}
streamlit = "1.4.0"
pytz = "^2021.3"
opencv-python-headless = "^4.5.5"
Markdown = "^3.3.6"
plotly = "^5.6.0"
tabulate = "^0.8.9"
matplotlib = "*"
streamlit-aggrid = {version = "^0.2.3", python = ">=3.7.1,<4.0"}
google-cloud-bigquery = {version = "^2.31.0", python = ">=3.7,<3.11"}
colorama = "^0.4.5"
firebase-admin = "^5.2.0"
protobuf = "3.20.0"
pytest = {version = "^6.2.4", extras = ["dev"]}
pytest-xdist = {version = "^2.4.0", extras = ["dev"]}
black = {version = "^21.6b0", extras = ["dev"]}
jupyterlab = {version = "^3.4.5", extras = ["dev"]}
nbmake = {version = "^1.3.4", extras = ["dev"]}
google-cloud-pubsub = {version = "^2.12.1", extras = ["dev"]}
google-api-python-client = {version = "^2.23.0", extras = ["dev"]}
google-auth = {version = "^2.2.1", extras = ["dev"]}
google-cloud-iot = {version = "^2.3.0", extras = ["dev"]}
google = {version = "^3.0.0", extras = ["dev"]}
google-auth-oauthlib = {version = "^0.4.6", extras = ["dev"]}
google-cloud-firestore = {version = "^2.3.", extras = ["dev"]}
cryptography = {version = "^35.0.0", extras = ["gateway"]}
scipy = {version = "^1.4.0", extras = ["cloud"]}
transitions = {version = "^0.8.8", extras = ["gateway"]}
PyJWT = {version = "^2.1.0", extras = ["gateway"]}
paho-mqtt = {version = "^1.5.1", extras = ["gateway"]}
ifaddr = {version = "^0.1.7", extras = ["gateway"]}
schedule = {version = "^1.1.0", extras = ["gateway"]}
requests = {version = "^2.26.0", extras = ["gateway"]}
psutil = {version = "^5.8.0", extras = ["gateway"]}
queuelib = {version = "^1.6.2", extras = ["gateway"]}
freezegun = {version = "^1.1.0", extras = ["gateway"]}
pyudev = {version = "^0.23.1", extras = ["gateway"]}
six = {version = "^1.13.0", extras = ["gateway"]}
mcp9600 = {version = "^0.0.4", extras = ["gateway"]}
deepdiff = {version = "^5.7.0", extras = ["gateway"]}
ray = {version = "^1.12.0", extras = ["ml"]}
sklearn = {version = "^0.0", extras = ["ml"]}
fastapi = {version = "^0.78.0", extras = ["ml"]}
xgboost = {version = "^1.6.0", optional = true, extras = ["ml"]}
apache-beam = {extras = ["cloud"], version = "^2.40.0", optional = true}

[tool.poetry.extras]
dev = [
    "pytest^6.2.4",
    "pytest-xdist^2.4.0",
    "black^21.6b0",
    "pytest-cov^2.12.1",
    "jupyterlab",
    "nbmake",
    "google-cloud-pubsub^2.12.1",
    "google-api-python-client^2.23.0",
    "google-auth^2.2.1",
    "google-cloud-iot^2.3.0",
    "google^3.0.0",
    "google-auth-oauthlib^0.4.6",
    "google-cloud-firestore^2.3.4"
]

cloud = [
    "scipy==1.4.0"
]

gateway = [
    "cryptography^35.0.0",
    "transitions^0.8.8",
    "PyJWT^2.1.0",
    "paho-mqtt^1.5.1",
    "ifaddr^0.1.7",
    "schedule^1.1.0",
    "requests^2.26.0",
    "psutil^5.8.0",
    "queuelib^1.6.2",
    "freezegun^1.1.0",
    "pyudev^0.23.1",
    "six^1.13.0",
    "mcp9600",
    "deepdiff^5.7.0"
]

ml = [
    "ray^1.12.0",
    "sklearn^0.0",
    "fastapi^0.78.0",
    "xgboost^1.6.0"
]


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
