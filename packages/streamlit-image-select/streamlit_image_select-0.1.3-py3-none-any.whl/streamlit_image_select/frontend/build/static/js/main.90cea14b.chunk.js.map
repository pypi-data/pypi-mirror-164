{"version":3,"sources":["index.tsx"],"names":["labelDiv","document","body","appendChild","createElement","label","createTextNode","imagesDiv","classList","add","Streamlit","events","addEventListener","RENDER_EVENT","event","data","detail","theme","style","font","color","textColor","base","querySelectorAll","forEach","el","remove","textContent","args","images","childNodes","length","image","i","imgDiv","img","src","onclick","setComponentValue","setFrameHeight","setComponentReady"],"mappings":"iKAAA,kBAEMA,EAAWC,SAASC,KAAKC,YAAYF,SAASG,cAAc,UAC5DC,EAAQL,EAASG,YAAYF,SAASK,eAAe,KACrDC,EAAYN,SAASC,KAAKC,YAAYF,SAASG,cAAc,QACnEG,EAAUC,UAAUC,IAAI,gBA6DxBC,IAAUC,OAAOC,iBAAiBF,IAAUG,cAtD5C,SAAkBC,GAEhB,IAAMC,EAAQD,EAAkCE,OAE5CD,EAAKE,QACPjB,EAASkB,MAAMC,KAAOJ,EAAKE,MAAME,KACjCnB,EAASkB,MAAME,MAAQL,EAAKE,MAAMI,UACV,SAApBN,EAAKE,MAAMK,KACbrB,SAASC,KAAKqB,iBAAiB,WAAWC,SAAQ,SAACC,GACjDA,EAAGjB,UAAUC,IAAI,WAGnBR,SAASC,KAAKqB,iBAAiB,WAAWC,SAAQ,SAACC,GACjDA,EAAGjB,UAAUkB,OAAO,YAK1BrB,EAAMsB,YAAcZ,EAAKa,KAAL,MACpB,IAAIC,EAASd,EAAKa,KAAL,OAEuB,IAAhCrB,EAAUuB,WAAWC,QACvBF,EAAOL,SAAQ,SAACQ,EAAeC,GAC7B,IAAIC,EAAS3B,EAAUJ,YAAYF,SAASG,cAAc,QAC1D8B,EAAO1B,UAAUC,IAAI,UAErB,IAAI0B,EAAMD,EAAO/B,YAAYF,SAASG,cAAc,QACpD+B,EAAI3B,UAAUC,IAAI,aAClB0B,EAAIC,IAAMJ,EAEA,IAANC,IACFC,EAAO1B,UAAUC,IAAI,YACrB0B,EAAI3B,UAAUC,IAAI,aAGpB0B,EAAIE,QAAU,WACZ9B,EAAUgB,iBAAiB,aAAaC,SAAQ,SAACC,GAC/CA,EAAGjB,UAAUkB,OAAO,eAEtBhB,IAAU4B,kBAAkBL,GAC5BC,EAAO1B,UAAUC,IAAI,YACrB0B,EAAI3B,UAAUC,IAAI,gBASxBC,IAAU6B,oBAQZ7B,IAAU8B,oBAIV9B,IAAU6B,mB","file":"static/js/main.90cea14b.chunk.js","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\n\nconst labelDiv = document.body.appendChild(document.createElement(\"label\"))\nconst label = labelDiv.appendChild(document.createTextNode(\"\"))\nconst imagesDiv = document.body.appendChild(document.createElement(\"div\"))\nimagesDiv.classList.add(\"image-picker\")\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n\n  if (data.theme) {\n    labelDiv.style.font = data.theme.font\n    labelDiv.style.color = data.theme.textColor\n    if (data.theme.base === \"dark\") {\n      document.body.querySelectorAll(\".option\").forEach((el) => {\n        el.classList.add(\"dark\")\n      })\n    } else {\n      document.body.querySelectorAll(\".option\").forEach((el) => {\n        el.classList.remove(\"dark\")\n      })\n    }\n  }\n\n  label.textContent = data.args[\"label\"]\n  let images = data.args[\"images\"]\n\n  if (imagesDiv.childNodes.length === 0) {\n    images.forEach((image: string, i: number) => {\n      let imgDiv = imagesDiv.appendChild(document.createElement(\"div\"))\n      imgDiv.classList.add(\"option\")\n\n      let img = imgDiv.appendChild(document.createElement(\"img\"))\n      img.classList.add(\"thumbnail\")\n      img.src = image\n\n      if (i === 0) {\n        imgDiv.classList.add(\"selected\")\n        img.classList.add(\"selected\")\n      }\n\n      img.onclick = function () {\n        imagesDiv.querySelectorAll(\".selected\").forEach((el) => {\n          el.classList.remove(\"selected\")\n        })\n        Streamlit.setComponentValue(i)\n        imgDiv.classList.add(\"selected\")\n        img.classList.add(\"selected\")\n      }\n    })\n  }\n\n  // We tell Streamlit to update our frameHeight after each render event, in\n  // case it has changed. (This isn't strictly necessary for the example\n  // because our height stays fixed, but this is a low-cost function, so\n  // there's no harm in doing it redundantly.)\n  Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"sourceRoot":""}