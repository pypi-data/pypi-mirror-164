{"version":3,"sources":["index.tsx"],"names":["labelDiv","document","body","appendChild","createElement","label","createTextNode","imagesDiv","classList","add","Streamlit","events","addEventListener","RENDER_EVENT","event","data","detail","theme","style","font","color","textColor","base","querySelectorAll","forEach","el","remove","textContent","args","images","captions","childNodes","length","image","i","container","box","img","src","desc","onclick","setComponentValue","setFrameHeight","setComponentReady"],"mappings":"iKAAA,kBAEMA,EAAWC,SAASC,KAAKC,YAAYF,SAASG,cAAc,UAC5DC,EAAQL,EAASG,YAAYF,SAASK,eAAe,KACrDC,EAAYN,SAASC,KAAKC,YAAYF,SAASG,cAAc,QACnEG,EAAUC,UAAUC,IAAI,gBA0ExBC,IAAUC,OAAOC,iBAAiBF,IAAUG,cAnE5C,SAAkBC,GAEhB,IAAMC,EAAQD,EAAkCE,OAE5CD,EAAKE,QACPjB,EAASkB,MAAMC,KAAOJ,EAAKE,MAAME,KACjCnB,EAASkB,MAAME,MAAQL,EAAKE,MAAMI,UACV,SAApBN,EAAKE,MAAMK,KACbrB,SAASC,KAAKqB,iBAAiB,kBAAkBC,SAAQ,SAACC,GACxDA,EAAGjB,UAAUC,IAAI,WAGnBR,SAASC,KAAKqB,iBAAiB,kBAAkBC,SAAQ,SAACC,GACxDA,EAAGjB,UAAUkB,OAAO,YAO1BrB,EAAMsB,YAAcZ,EAAKa,KAAL,MACpB,IAAIC,EAASd,EAAKa,KAAL,OACTE,EAAWf,EAAKa,KAAL,SAGqB,IAAhCrB,EAAUwB,WAAWC,QACvBH,EAAOL,SAAQ,SAACS,EAAeC,GAC7B,IAAIC,EAAY5B,EAAUJ,YAAYF,SAASG,cAAc,QAEzDgC,EAAMD,EAAUhC,YAAYF,SAASG,cAAc,QACvDgC,EAAI5B,UAAUC,IAAI,OAElB,IAAI4B,EAAMD,EAAIjC,YAAYF,SAASG,cAAc,QAIjD,GAHAiC,EAAI7B,UAAUC,IAAI,SAClB4B,EAAIC,IAAML,EAENH,EAAU,CACZ,IAAIS,EAAOJ,EAAUhC,YAAYF,SAASG,cAAc,QACxDmC,EAAK/B,UAAUC,IAAI,WACnB8B,EAAKZ,YAAcG,EAASI,GAIpB,IAANA,IACFE,EAAI5B,UAAUC,IAAI,YAClB4B,EAAI7B,UAAUC,IAAI,aAGpB4B,EAAIG,QAAU,WACZjC,EAAUgB,iBAAiB,aAAaC,SAAQ,SAACC,GAC/CA,EAAGjB,UAAUkB,OAAO,eAEtBhB,IAAU+B,kBAAkBP,GAC5BE,EAAI5B,UAAUC,IAAI,YAClB4B,EAAI7B,UAAUC,IAAI,gBASxBC,IAAUgC,oBAQZhC,IAAUiC,oBAIVjC,IAAUgC,mB","file":"static/js/main.56d2534e.chunk.js","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\n\nconst labelDiv = document.body.appendChild(document.createElement(\"label\"))\nconst label = labelDiv.appendChild(document.createTextNode(\"\"))\nconst imagesDiv = document.body.appendChild(document.createElement(\"div\"))\nimagesDiv.classList.add(\"image-picker\")\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n\n  if (data.theme) {\n    labelDiv.style.font = data.theme.font\n    labelDiv.style.color = data.theme.textColor\n    if (data.theme.base === \"dark\") {\n      document.body.querySelectorAll(\".box, .caption\").forEach((el) => {\n        el.classList.add(\"dark\")\n      })\n    } else {\n      document.body.querySelectorAll(\".box, .caption\").forEach((el) => {\n        el.classList.remove(\"dark\")\n      })\n    }\n\n    // TODO: Gray out the component if it's disabled. \n  }\n\n  label.textContent = data.args[\"label\"]\n  let images = data.args[\"images\"]\n  let captions = data.args[\"captions\"]\n  // console.log(captions)\n\n  if (imagesDiv.childNodes.length === 0) {\n    images.forEach((image: string, i: number) => {\n      let container = imagesDiv.appendChild(document.createElement(\"div\"))\n\n      let box = container.appendChild(document.createElement(\"div\"))\n      box.classList.add(\"box\")\n\n      let img = box.appendChild(document.createElement(\"img\"))\n      img.classList.add(\"image\")\n      img.src = image\n\n      if (captions) {\n        let desc = container.appendChild(document.createElement(\"div\"))\n        desc.classList.add(\"caption\")\n        desc.textContent = captions[i]\n      }\n\n      // TODO: Change this to use `default` instead of just 0.\n      if (i === 0) {\n        box.classList.add(\"selected\")\n        img.classList.add(\"selected\")\n      }\n\n      img.onclick = function () {\n        imagesDiv.querySelectorAll(\".selected\").forEach((el) => {\n          el.classList.remove(\"selected\")\n        })\n        Streamlit.setComponentValue(i)\n        box.classList.add(\"selected\")\n        img.classList.add(\"selected\")\n      }\n    })\n  }\n\n  // We tell Streamlit to update our frameHeight after each render event, in\n  // case it has changed. (This isn't strictly necessary for the example\n  // because our height stays fixed, but this is a low-cost function, so\n  // there's no harm in doing it redundantly.)\n  Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"sourceRoot":""}