"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import constraint_pb2
import expression_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import penalty_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class Problem(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class _Sense:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _SenseEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Problem._Sense.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        MIN: Problem._Sense.ValueType  # 0
        MAX: Problem._Sense.ValueType  # 1
    class Sense(_Sense, metaclass=_SenseEnumTypeWrapper):
        pass

    MIN: Problem.Sense.ValueType  # 0
    MAX: Problem.Sense.ValueType  # 1

    ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    SENSE_FIELD_NUMBER: builtins.int
    OBJECTIVE_FIELD_NUMBER: builtins.int
    CONSTRAINTS_FIELD_NUMBER: builtins.int
    PENALTIES_FIELD_NUMBER: builtins.int
    id: typing.Text
    name: typing.Text
    sense: global___Problem.Sense.ValueType
    @property
    def objective(self) -> expression_pb2.Expression: ...
    @property
    def constraints(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[constraint_pb2.Constraint]: ...
    @property
    def penalties(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[penalty_pb2.Penalty]: ...
    def __init__(self,
        *,
        id: typing.Text = ...,
        name: typing.Text = ...,
        sense: global___Problem.Sense.ValueType = ...,
        objective: typing.Optional[expression_pb2.Expression] = ...,
        constraints: typing.Optional[typing.Iterable[constraint_pb2.Constraint]] = ...,
        penalties: typing.Optional[typing.Iterable[penalty_pb2.Penalty]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["objective",b"objective"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["constraints",b"constraints","id",b"id","name",b"name","objective",b"objective","penalties",b"penalties","sense",b"sense"]) -> None: ...
global___Problem = Problem
