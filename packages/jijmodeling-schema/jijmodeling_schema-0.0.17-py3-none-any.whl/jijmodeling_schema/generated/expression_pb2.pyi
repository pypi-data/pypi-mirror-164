"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import array_shape_pb2
import binary_op_pb2
import binary_var_pb2
import builtins
import element_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import integer_var_pb2
import jagged_array_pb2
import number_lit_pb2
import placeholder_pb2
import reduction_op_pb2
import subscript_op_pb2
import typing
import typing_extensions
import unary_op_pb2

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class Expression(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ID_FIELD_NUMBER: builtins.int
    KIND_FIELD_NUMBER: builtins.int
    CHILDREN_FIELD_NUMBER: builtins.int
    id: typing.Text
    @property
    def kind(self) -> global___NodeKind: ...
    @property
    def children(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expression]: ...
    def __init__(self,
        *,
        id: typing.Text = ...,
        kind: typing.Optional[global___NodeKind] = ...,
        children: typing.Optional[typing.Iterable[global___Expression]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["kind",b"kind"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["children",b"children","id",b"id","kind",b"kind"]) -> None: ...
global___Expression = Expression

class NodeKind(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NUMBER_LIT_FIELD_NUMBER: builtins.int
    ARRAY_SHAPE_FIELD_NUMBER: builtins.int
    ELEMENT_FIELD_NUMBER: builtins.int
    JAGGED_ARRAY_FIELD_NUMBER: builtins.int
    UNARY_OP_FIELD_NUMBER: builtins.int
    BINARY_OP_FIELD_NUMBER: builtins.int
    REDUCTION_OP_FIELD_NUMBER: builtins.int
    BINARY_VAR_FIELD_NUMBER: builtins.int
    INTEGER_VAR_FIELD_NUMBER: builtins.int
    PLACEHOLDER_FIELD_NUMBER: builtins.int
    SUBSCRIPT_OP_FIELD_NUMBER: builtins.int
    @property
    def number_lit(self) -> number_lit_pb2.NumberLit: ...
    @property
    def array_shape(self) -> array_shape_pb2.ArrayShape: ...
    @property
    def element(self) -> element_pb2.Element: ...
    @property
    def jagged_array(self) -> jagged_array_pb2.JaggedArray: ...
    @property
    def unary_op(self) -> unary_op_pb2.UnaryOp: ...
    @property
    def binary_op(self) -> binary_op_pb2.BinaryOp: ...
    @property
    def reduction_op(self) -> reduction_op_pb2.ReductionOp: ...
    @property
    def binary_var(self) -> binary_var_pb2.BinaryVar: ...
    @property
    def integer_var(self) -> integer_var_pb2.IntegerVar: ...
    @property
    def placeholder(self) -> placeholder_pb2.Placeholder: ...
    @property
    def subscript_op(self) -> subscript_op_pb2.SubscriptOp: ...
    def __init__(self,
        *,
        number_lit: typing.Optional[number_lit_pb2.NumberLit] = ...,
        array_shape: typing.Optional[array_shape_pb2.ArrayShape] = ...,
        element: typing.Optional[element_pb2.Element] = ...,
        jagged_array: typing.Optional[jagged_array_pb2.JaggedArray] = ...,
        unary_op: typing.Optional[unary_op_pb2.UnaryOp] = ...,
        binary_op: typing.Optional[binary_op_pb2.BinaryOp] = ...,
        reduction_op: typing.Optional[reduction_op_pb2.ReductionOp] = ...,
        binary_var: typing.Optional[binary_var_pb2.BinaryVar] = ...,
        integer_var: typing.Optional[integer_var_pb2.IntegerVar] = ...,
        placeholder: typing.Optional[placeholder_pb2.Placeholder] = ...,
        subscript_op: typing.Optional[subscript_op_pb2.SubscriptOp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["array_shape",b"array_shape","binary_op",b"binary_op","binary_var",b"binary_var","element",b"element","integer_var",b"integer_var","jagged_array",b"jagged_array","kind",b"kind","number_lit",b"number_lit","placeholder",b"placeholder","reduction_op",b"reduction_op","subscript_op",b"subscript_op","unary_op",b"unary_op"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["array_shape",b"array_shape","binary_op",b"binary_op","binary_var",b"binary_var","element",b"element","integer_var",b"integer_var","jagged_array",b"jagged_array","kind",b"kind","number_lit",b"number_lit","placeholder",b"placeholder","reduction_op",b"reduction_op","subscript_op",b"subscript_op","unary_op",b"unary_op"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["kind",b"kind"]) -> typing.Optional[typing_extensions.Literal["number_lit","array_shape","element","jagged_array","unary_op","binary_op","reduction_op","binary_var","integer_var","placeholder","subscript_op"]]: ...
global___NodeKind = NodeKind
